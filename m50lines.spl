////////////////////////////////////////////////////////////////////////////////
// Program : Maintenance of sales order LINES
//=========================================================================//
// Copyright (C) PRONTO Software Pty Ltd 1987 thru 2001
//
// PRONTO is a registered trademark of PRONTO Software P/L.
//
// All Rights Reserved. Unauthorised copying is prohibited.
//=========================================================================//
// File : m50lines.spl
//
// Description:
//	This program can only be executed from m50ordent.
//	parameters are
//		1/ order number,  2/ bo suffix
//		3/	-r	cancel and remove lines
//			-e	entry
//			-d	edit
//			-i	invoice(edit order)
//			-de	from edit, but enquiry only
//
//	Note: line cost for SN is calc. shipped qty * cost
////////////////////////////////////////////////////////////////////////////////

version-number "m50lines.spl PRONTO:1.237.1.8.1.148.1.670 SCOPE:1.02 04Sep24dkp478081 addition of stock code 4000000 & 500000 for testing purposes by the request of the functional consultant. This change is not permanent."
version-number "m50lines.spl PRONTO:1.237.1.8.1.148.1.670 SCOPE:1.01 31Mar21nc174221 Add Container updating"
version-number "so/m50lines.spl PRONTO: 1.237.1.8.1.148.1.670 SCOPE: 1.00 11nov20wa164921 Upgrade to Pronto 760.2"
version-number "$Header: /apps/devel/src/bms/so/RCS/m50lines.spl,v 1.237.1.8.1.148.1.670 2020/08/26 00:21:22 janinel Exp $"
version-number "c50lines.670.LYC.spl, BMS: 1.237.1.8.1.148.1.137.1.117 SCO:10.0.11 04jul13vgm102698 add selected to lots to ord qty"
version-number "c50lines.670.LYC.spl, BMS: 1.237.1.8.1.148.1.137.1.117 SCO:10.0.10 25jun13vgm102014 allow allocation of lots for non usable classification"
version-number "c50lines.670.LYC.spl, BMS: 1.237.1.8.1.148.1.137.1.117 SCO:10.0.9 17jun13vgm102828 restore qty on remove"
version-number "c50lines.670.LYC.spl, BMS: 1.237.1.8.1.148.1.137.1.117 SCO:10.0.8 12jun13vgm102828 bug fix allocation qty "
version-number "c50lines.670.LYC.spl, BMS: 1.237.1.8.1.148.1.137.1.117 SCO:10.0.7 20mar13vgm85190 merged with 670.8 refresh issue "
version-number "$Header: /apps/devel/src/bms/so/RCS/m50lines.spl,v 1.237.1.8.1.148.1.137.1.117 2011/06/07 04:06:00 chamilab Exp $"
version-number "c50lines.670.LYC.spl, BMS:1.237.1.8.1.148.1.137.1.45 SCO:10.0.6 18jan13vgm98773 replaced DMT with REO"
version-number "c50lines.670.LYC.spl, BMS:1.237.1.8.1.148.1.137.1.45 SCO:10.0.5 03Dec12vgm98773 Pronto selling price"
version-number "c50lines.670.LYC.spl, BMS:1.237.1.8.1.148.1.137.1.45 SCO:10.0.4 09Nov2012vgm94444 qty due"
version-number "c50lines.670.LYC.spl, BMS:1.237.1.8.1.148.1.137.1.45 SCO:10.0.3 21sep12vgm94444 fix table error"
version-number "c50lines.670.LYC.spl, BMS:1.237.1.8.1.148.1.137.1.45 SCO:10.0.2 25jun12vgm94444 Fix for lot no not picking up correctly"
version-number "c50lines.670.LYC.spl, BMS:1.237.1.8.1.148.1.137.1.45 SCO:10.0.1 19mar12vgm92099 lot allocation lookup"
//
link "clib/clib305"
link "clib/clib309"
link "clib/clib402"
link "clib/clib403"
link "clib/clib405"
link "clib/clib406"
link "clib/clib407"
link "clib/clibsales"
link "clib/clibserial"
link "clib/clibtax"
link "clib/clibtaxlookup"
link "clib/clibtaxso"
link "clib/clibstk"
link "clib/clibtrace"
link "clib/clibpostcode"				// postcode lookup
link "clib/clibbillto"
link "clib/clibglsec"
link "clib/clibcurrency"
link "clib/clibdeb"
link "clib/tlibpromo"					//promotion engine
link "clib/clibso"
link "clib/clibassetscreens"
link "clib/clibassetctrl"
link "clib/clibnewmast"		//create new customer & stock record.
link "clib/clibcbs"
link "clib/clibjob"
link "clib/clibiclog"
link "clib/c_clibx1"																				//1.00

#include "../include/bmsdef.spl"
#define I8VALIDGL_INTERACTIVE_OK
#define USE_I50ENTRY

#define PIC_FOR_QTY 			pic -(7)9t99
#define PIC_FOR_DETAIL_QTY 		pic -(7)9t9999
#define PIC_FOR_LARGE_QTY		pic lf-stk-qty-pic
#define POS_CANCEL_REASON 'POSCANCEL'
#define USE_DEBTOR_REP		"***"

//Check the environment variable CNSTK_RTN for the value
//below. This will determine if the update flag is set to 'C'
#define CR_STK_RETURNED_ALREADY		'-stkreturned'

//ie. if Cost is tax inclusive and the line doesn't have
//a tax rate against ( Normal retail situation ), and the
//sales order is tax exempt, THEN the cost will have the
//tax component taken out. Therefore there is no need to
//remove the customer tax from the cost. ( the customer
//tax should be zero anyway.

#define ENTRY				'E'
#define QUOTE				'Q'
#define GRA					'G'
#define EDIT				'D'
#define BRANCH				'B'	// Orders must go to backorder, or on hold
#define CUSTOMER			'C'	// customer entering own order

#define IN_CORRECT_MODE		'C'
#define BEING_ENTERED		'E'
// -pos5edit - deb/m1poscrec calls m50lines with -pos5edit.
// -cash     - crm/crmmaint
#define LANE_ENTRY	(get-param(4) in {'-pos5edit'} or get-param(1) = '-cash')
#define SHORT_BELL_LENGTH			1 //2
#define DISPLAY_ON_MONITOR			num(get-param(5))

#define START_OF_LINES_AND_CHG_SEQ	'A'
#define CURRENT_LINE_AND_NO_SEQ		'B'
#define CURRENT_LINE_AND_CHG_SEQ	'C'

#define USE_MULTIPLE_CONVERSIONS
#define BACK 1
#define FORWARD 2

#define CONCAT_OF_STK_DESC_2ND_STK_DESC				\
concat(substring(stk-description,1,str-len(stk-description) )	\
,' ',stk-desc-line-3)

#define IS_KIT \
	(sol-line-type = 'KN' \
	or (sol-line-type in {'SN' 'DN'} and sol-chg-type in { 'D' 'T'}))

#define DISC_STK_CODE					'ZROUNDDISC'
#define TELEPHONE_LOOKUP	'T'

#define DONT_ALLOW_CHANGE_OF_ADDRESS
#define I5PRICEMOD_TRACE
#define I5PRICEOPT_STD
#define I5PRICEOPT_NO_PROMPT
#define I5PRICEOPT_NO_HELP
#define I5SOLICOST_USE_ACNT_FOR_PRICE_LOOKUP
#define I50EXTRAS_CHECK_INTERNAL_LIMITS
#ifndef I8POST_CTLACC_DONT_DEF_CTRL_ACCOUNTS
#define I8POST_CTLACC_DONT_DEF_CTRL_ACCOUNTS
#endif
#define I5SODESC_WHSE_STATUS_DESC_NOT_REQUIRED
#define I6PODESC_LONG_DESC_NOT_REQUIRED
#define IJGENERAL_JOB_SETUP_FOR_SALES_ORDER

#define PROMOTION_DISCOUNT				"PD"
#define WILDCARD						"****"	//Asset locaiton & Group Wildcards
#define EQUIPMENT_TRADE			"G"

//Modes
mode subst-stk
	prompt 'S&ubstitute' correct entry currency
	help 'Use item code you are current on as substitute item code'
mode find-stk
	prompt 'Find Ite&m'
	currency
	help 'Enter item code or part of it to find 1st occurrence of that item code'
mode order-conclusion
	prompt 'Quit'
	help 'Finished entering line information, now go onto conclusion of order'
mode create-bo
	prompt 'Backorder'
	help 'Allow ordered qty to be all back ordered'
mode create-ship-available
	prompt 'Avail Ship'
	help 'Ship avail. qty and backorder rest of original ordered item code'
mode md-serial
	prompt '&Trace'
	help 'Allow maintenance of serial numbers and lot numbers'
	currency
mode md-other
	prompt 'E&xtra'
	help 'Press [ENTER] for more options'
mode md-enter-proform-details
	prompt 'Pro'
	help 'Allow entry of proforma orders'
mode md-discount-mod
	prompt 'D&isc'
	help 'Maintain discount / gross profit of order'
	currency
mode md-select-proforma-line
	prompt 'Select'
	help 'Press [ENTER] to select this item code and enter qty.'
	currency lock
	correct
mode md-deselect-proforma-line
	prompt 'Deselect'
	help 'Press [ENTER] to de-select this item code'
	currency lock
	//
mode ws-continue-mode
	prompt 'Continue'
	help 'Press [ENTER] to continue'
mode md-alternate-items
	prompt 'Alternative'
	help 'Select an alternative item'
	currency
mode md-orders
	help 'List all outstanding sales orders for this client'
	prompt 'Orders'
mode get-customer
	prompt 'Get Customer'
	help "Get new customer for this order"
mode md-pos-options
	prompt 'POS Options'
	help "Other POS options"
	when sys-point-of-sale-mode-used = '5'
mode all-line-modes
	prompt 'E&xtra'
	help 'Menu of other line modes'
	currency
mode next-scr-orders
	prompt "Next Scr Ords"
	help "Page forward in purchase/work order file"
mode prev-scr-orders
	prompt "Prev Scr Ords"
	help "Page backward in purchase/work order file"
mode md-wo-po-switch
	prompt 'S&witch'
	help 'Switch between Work Orders & Purchase Orders for this item'
mode md-show
mode md-line-notes
	prompt 'Notes'
	help 'Menu of line notes for current sales order line'
	currency
mode md-select-stock-ident
	prompt "Select"
	help "Press [ENTER] to select marked code"
mode md-wp-ed
	prompt ' WP'
	help 'Edit the notes using the prowp editor'
mode md-tax-details
	prompt "Tax Detail&s"
	help "Show tax breakdown for this sales order line"
	currency
mode md-full-stock
	prompt 'Full Stock'
	help 'Full stock details enquiry'
	currency
	perform process-full-stock-enquiry
mode md-atp
	prompt "&ATP"
	help "Drill into Available To Promise (ATP) calculation"
	currency
	when (stock-code != SPACES) and
		 ((so-whse-code != SPACES) or (sol-whse-code != SPACES)) and
		 ((uppercase(sol-line-type) = "SN") or (uppercase(sol-line-type) = "WN"))
	always-show
	// Note 1: SN = Normal sales item.
	// Note 2: WN = Item shipped from a different warehouse.

//Fields
field	ws-numeric-field					type numeric
		ws-accept-stk-code					like stock-code
		ws-saved-order-no					like so-order-no
		ws-saved-bo-suffix					like so-bo-suffix
		ws-saved-stock-code					like stock-code
		ws-saved-line-seq					like sol-line-seq
		ws-line-seq							like sol-line-seq
		ws-this-line						like sol-line-seq
		ws-found-shipped					pic 9
		ws-was-prev-line-a-note				pic x
		ws-itiated-special-z				pic 9
		ws-process-mode						pic x
		ws-order-flag						pic x
		ws-sol-shipped-amount				like sol-shipped-amount
		ws-sol-shipped-discount-amt 		like sol-shipped-discount-amt
		ws-sol-ordered-disc-amt				like sol-ordered-disc-amt
		ws-sol-shipped-sales-tax-amt		like sol-shipped-sales-tax-amt
		ws-sol-ordered-sales-tax-amt		like sol-shipped-sales-tax-amt
		//
		ws-old-item-wholesale-price			like sol-item-wholesale-price
		ws-sol-item-cost					like sol-item-cost
		ws-old-audit-status					like so-order-status
		ws-backorder-amt					like sol-shipped-amount
		ws-find-stk							like stock-code
		ws-found-stk						pic 9
		ws-del-hit							pic x
		ws-cancel-order						pic x
		ws-zero-price 						pic 9
		ws-value-entered					pic 9
		i									pic 99
		ws-confirm							pic x
		ws-problems-found					pic x
		ws-refresh-review					pic 9
		ws-update-sol-for-WN				pic 9
		ws-scanned-qty						type numeric
		//
		ws-mode-type						pic x
		ws-order-type						pic x
		ws-available-stk					pic s9(9)v9(9)
		ws-calc-commitments 				like whse-qty-on-hand
		ws-calc-available-for-sale 			like whse-qty-on-hand
		ws-total-cost 						like sol-line-cost
		ws-entered-stock-code				like stock-code
		entered-stock-code-status			like stk-stock-status
		ws-create-whse						pic x
		ws-special-ordent-program			like sys-description
		ws-special-param 					like sys-tbl-alpha-2
		ws-whse-to							pic 99
		//
		// proforma order entry
		ws-next-line-seq					like sol-line-seq
		ws-proforma-order-no				like so-order-no
		ws-proforma-bo-suffix				like so-bo-suffix
		ws-proforma-first-time-through		pic 9
		ws-bo-qty-found						pic x
		//used for kits
		ws-show-kit-components				pic x
		ws-note-title						pic x(80) type string
		//
		//fields for rotable items
		ws-rot-whse-to-be-used				pic x
		ws-to-whse-avail-stk				like whse-qty-on-hand
		//fields for other whse orders
		ws-original-available-stk			like whse-current-orders
		//fields for the branch recording
		ws-so-date-stamp-to-be-updated		pic x
		//fields for available for promise
		agol-whse-code						like whse-code
		ws-current-line-seq					like sol-line-seq

		//Fields for licences
field
		ws-is-user-a-credit-officer			pic x
		ws-ok-to-post-cost					type boolean
		ws-ok-to-post-income				type boolean
		ws-not-ok-to-post-cost-message		type string pic x(80)
		ws-not-ok-to-post-income-message	type string pic x(80)
		ws-agent-sale						pic 9
		ws-agent-has-licence				pic 9
		ws-order-lines-type					pic x
		ws-agent-wears-debt					pic 9
		ws-bo-found							pic x
		str-item-price						pic x(19)
		ws-disc-rate						pic s9(3)v99
		ws-found-record						pic 9
		ws-van-id							like sl-location-code
		ws-update-contract-qty				like sol-ordered-qty
		ws-limit-contract-amount			like so-order-total-amount
		ws-limit-contract-qty				like so-order-total-charges
		ws-contract-price					like sol-item-price
		ws-found-suspended-order			pic 9
		ws-help-extension					pic x(15)
		ws-apply-to-all-normal				pic x
		ws-print-flag						like sol-print-line
		ws-job-line-amt                     like sol-shipped-amount
		ws-cost-type                     	pic x
		wspos5-refund-password				like sys-tbl-alpha-1
		wspos5-refund-password-entered		like sys-tbl-alpha-1
		wspos5continue						pic 9
		ws-first-read-on-whse-file			pic 9
		ws-len								pic 99
		ws-pin-number						like dpn-pin-number
		ws-saved-code						like so-cust-code
		ws-stock-identifiers				pic x
		ws-default-sales-type-code			like territory
		ws-validation-required				pic s9
		ws-s7-stk-seq-no					like sol-line-seq
		ws-out-supplier						like cre-accountcode
		ws-group-start						like sol-line-seq
		ws-save-line						like sol-line-seq
		ws-movement-direction				pic 9
		ws-display-at-end					pic 9
		ws-x								pic 99999
		ws-wo-po-switch						pic x
		ws-original-code					like stock-code
		ws-save-amount						like sol-line-amount
		ws-terr-ok							pic 9
		ws-whse-ok							pic 9
		ws-gl-accountcode					like so-gl-accountcode
		default-acct						like so-gl-accountcode
		ws-count							pic 9
		ws-error							BMSDEF_MESSAGE_SIZE
		ws-ok								pic 9
		ws-transfer-order					pic x(10)
		ws-returned-accountcode				like accountcode
		ws-to-whse-type						pic 99
		ws-stock-key						like stock-code
		ws-option							pic x(34)
		ws-asked-l-line-q					type boolean
		ws-allow-removal					type boolean
		ws-credoff-max-limit				like slt-attribute-num-0dec-1
		ws-credoff-max-cnote-limit			like slt-attribute-num-0dec-2
		ws-overide-lines-program			like sys-description
		ws-other-option-selected			pic x
		ws-lab-system-used-for-item			pic x
		ws-correct-po						type boolean
		ws-saved-sol-item-cost				like sol-item-cost
		reenter-needed						pic 9
		ws-charge-extra-item				pic x
		ws-freight-question-asked			type boolean
		ws-need-to-insert-note				type boolean
		ws-orig-stock-code					like stock-code
		ws-orig-whse-bo-flag				like sys-backorder-flag
		ws-catalog-no						pic 9(8)
		ws-year								pic 9(4)
		ws-index							pic s999
		ws-issue-to-account					like gl-accountcode
		ws-saved-gl-accountcode				like gl-accountcode
		ws-minimum-GP						like sys-so-mov
		ws-transfer-user-access				type boolean
		ws-order-reason-code				like so-order-reason-code
		ws-refund-reason-found				type boolean
		ws-refund-reason-entered			type boolean
		ws-consys-stock-code				like stock-code
		// Security
		ws-SO-S007							type boolean
		ws-title							pic x(80)
		ws-found-stk-price					type boolean
		ws-user-lines-stk-val-prog 			like sys-description
		ws-user-lines-promo-prog 			like sys-description
		ws-billto-credit-limit-available-amount 	like balance
		ws-result-code						like slf-process-status
		ws-sol-before-entry-program 		like sys-description
		ws-sol-before-confirm-program 		like sys-description
		ws-manuf-packing-program			like sys-description
		ws-negate-tally-qty 				type boolean
		ws-sopl-record-exists				type boolean
		reenter-flag						pic 9
		ws-note-type						pic x
		//
		// sales order totals field used for displaying!
		ws-total-charges					like so-order-total-charges
		ws-total-shipped-incl-charges		like so-order-total-shipped-amount
		ws-total-shipped-cost				like so-order-total-shipped-cost
		ws-total-shipped-tax				like so-order-total-shipped-tax
		ws-total-ordered-incl-charges		like so-order-total-amount
		ws-total-ordered-cost				like so-ordered-total-cost
		ws-total-ordered-tax				like so-order-total-tax
		ws-total-pack-weight				like so-order-weight
		ws-total-no-of-normal-stk-lines		like so-order-packages
		ws-total-ordered-gp-string			pic x(8)
		ws-total-ordered-gp-num				pic s999v99
		ws-total-shipped-gp-string			pic x(8)
		ws-total-shipped-gp-num				pic s999v99
		//
		ws-current-order-shipped-incl-charges like so-order-total-shipped-amount
		ws-current-order-ordered-incl-charges like so-order-total-amount
		//
		ws-box-currency-title				pic x(32)
		ws-box-currency-pricing				pic x(14)
		ws-box-currency-cost				pic x(20)
		//
		ws-tax-prompt						pic x(4)
		ws-gp-prompt						pic x(13)
		ws-item-costs-prompt				pic x(10)
		ws-ordered-costs-prompt				pic x(13)
		ws-shipped-costs-prompt				pic x(13)
		ws-item-price-help					pic x(60)
		ws-line-amount-help					pic x(60)
		ws-limit-modes-fields-used			type boolean
		ws-rms-price-seq-16-active			type boolean
		ws-saved-price-rule					like sol-price-rule
		ws-saved-disc-rate					like sol-disc-rate
		// shipped totals
		ws-original-ship-total				like so-order-total-shipped-amount
		ws-original-shipped-cost			like so-order-total-shipped-cost
		ws-original-shipped-tax				like so-order-total-shipped-tax
		//
		// ordered totals
		ws-original-order-total				like so-order-total-amount
		ws-original-ordered-cost			like so-ordered-total-cost
		ws-original-ordered-tax				like so-order-total-tax
		//
		// charges, packages, weight
		ws-original-charges					like so-order-total-charges
		ws-original-pack-weight				like so-order-weight
		ws-original-order-packages			like so-order-packages
		ws-no-change-on-disc-rate			type boolean
		ws-tax-groups-used					type boolean
		//
		// note line handling
		ws-note-N							like sys-tbl-type
		ws-memo-M							like sys-tbl-type
		ws-select-note-text-D				like sys-tbl-type
		ws-select-note-term-W				like sys-tbl-type
		// to store the initial so line quantity
		ws-total-order-quantity				like sol-ordered-qty
		ws-contract-disc-rate				like sol-disc-rate
		ws-cbs-exist						type boolean
		//
		ws-so-order-total-shipped-amount	like so-order-total-shipped-amount
		ws-so-order-total-charges 			like so-order-total-charges
		ws-so-order-packages 				like so-order-packages
		ws-last-promo-so-order-no			like so-order-no
		ws-last-promo-alert-message			like pas-alert-message
		ws-last-so-date-stamp				like so-date-stamp
		ws-last-so-time-stamp				like so-time-stamp
//
object like-sales-order-line			like sales-order-line
object saved-sales-order like sales-order

object like-stock-master				like stock-master

object proforma-sales-order like sales-order

object tmp-suspended-orders type is memory
	record is
		tmp-order-no			like so-order-no
		tmp-bo-suffix			like so-bo-suffix
		tmp-customer			like so-cust-code
		tmp-order-date			like so-order-date
		tmp-entered-by			like so-user-id-code
		tmp-whse				like so-whse-code
		tmp-reference			like so-cust-reference
		tmp-rep-code			like so-rep-code
	endrecord
	key is tmp-order-no tmp-bo-suffix

object like-job-cost-commitments		like job-cost-commitments

//includes
#include "../include/i8secabt.spl"
#include "../include/i4strupd.spl"
#include "../so/i50strupd.spl"
#include "../include/i4altitem.spl"
#ifndef I81MODES_NONSECURE_SCREENMODES
#define I81MODES_NONSECURE_SCREENMODES
#include "../include/i81modes.spl"
#endif
#ifndef I5TAXHELPH
#define I5TAXHELPH
#endif
#define I4AVAILSTK_KIT_CALCULATION_LINES
#include "../include/i9enqbom.spl"
#include "../include/iwtype.spl"		// whse type definition
#include "../include/i5pricemod.spl"	//call i5pricemod-pricing-module
#define I50ENTRY_INCLUDE_XREF_NOTES
#include "../so/i50entry.spl"
#include "../include/i5postermi.spl"
#include "../include/i5solicost.spl"
#include "../include/i4getprice.spl"
#include "../so/i50tfrprce.spl"
#include "../include/ijobstatii.spl"
#include "../include/ijcattype.spl"
#include "../include/iwvalloc.spl"
#include "../so/i50headso.spl"
#include "../so/i50extras.spl"
#include "../include/i8userwhse.spl"	//validate whse/terr
#include "../include/m2enqcre.spl"
#include "../include/m3enqgl.spl"
#include "../include/i8validgl.spl"
#define M1ENQDEB
#include "../include/i5priceopt.spl"
#include '../include/isdefines.spl'
#include "../include/i8getpery.spl"
#include "../include/i5creason.spl"
#include "../include/i8costsecu.spl"
#include '../include/i8secok.spl'
#include "../include/i5sostatii.spl"
#include "../include/i5sodesc.spl"
#include "../include/i6postatii.spl"
#include "../include/i8rsstdf.spl"
#include "../include/i5source.spl"
#include "../include/i5linecalc.spl"
#include "../include/i4printdec.spl"	//print decimal places
#include "../include/i8param.spl"
#include "../include/i8getgp.spl"
#include "../include/i9status.spl"
#include "../include/i5soldisc.spl"		// call procedure i5soldisc-get-cust-disc
#include "../include/iwcommon.spl"		// whse common include
#include "../include/i4getconv.spl"
#include "../include/i8optfld.spl"
//
#include "../so/i50stkenq.spl"
#include "../so/i50audit.spl"
#include "../so/i50lines.spl"			// common procedures with m50quote
#include "../so/i50package.spl"			// packaged items processing
#include "../so/i5sodeladd.spl"
#include "../include/i5snotes.spl"
#include "../so/i5enqloc.spl"
#include "../so/i5brknpack.spl"			//round up broken pack quantities
#include "../so/i50cusnote.spl"
#include "../include/ijobtype.spl"
#include "../job/ijgeneral.spl"
#include "../so/i5saletype.spl"
#include "../include/accntpad.spl"
#include "../include/i5stksup.spl"
#include "../include/i4stkrnd.spl"
#define I5TENDTRK_UPDATE_VOUCHER_SELL
#define I5TENDTRK_REMOVE_VOUCHER
#define I8TENDTYPE_NO_SELECT_SCREEN
#define I8DATENEW_COMPLETE_BATCH_NOT_REQUIRED
#include "../pos/i5tendtrk.spl"
#include "../include/i4stksub.spl"		//Stock Substitution
#define I5PIECES_NEED_SO
#include "../include/i5pieces.spl"
#include "../include/i5chgstat.spl"
#include "../include/i85carrier.spl"
#include "../include/i4bestsupp.spl"
#define I50EX_DETERMINE_ORDER_TYPE
#include "../so/i50extras.spl"
#include "../pos/i5posbcode.spl"

#include "../include/i8govtbl.spl"		//#defines of governance defined fields
link "clib/clibgov"						//determine size of governance defined fields
#include "../include/i3assgrp.spl"			// Asset grp maint
#include "../include/i3assloc.spl"			// Asset location maint
#include "../include/i8stkcost.spl"
#include "../include/i3doctype.spl"
#include "../include/m5enqjob.spl"
#include "../include/i_stdsec.spl"															//1.00

object tmp-line
	type is memory
	record is
		tmp-line-seq			like sol-line-seq
	endrecord
	key is tmp-line-seq

object tmp-stock-identifiers
	type memory
	record
		tmp-stock-code-ident	like stock-code
	endrecord
	key is tmp-stock-code-ident unique
//1.00 start [>
object tmp-stock-location
	type is memory
	record
		stock-code
		whse-code
		sl-location-code
		sl-picking-preference
		sl-picks
		sl-receipt-date
		sl-location-type
		sl-reference-lot
		sl-qty-on-hand
		sl-qty-due-out
		sl-qty-due-in
		sl-qty-on-hold
		sl-pallet-size
		sl-carton-number
		tmp-mark	pic x
	endrecord
	key is stock-code whse-code sl-picking-preference
			sl-receipt-date sl-location-code sl-reference-lot
	key is whse-code stock-code sl-reference-lot sl-location-code

object tmp-stock-location-copy like tmp-stock-location
//1.00 end <]

field
	ws-public-mode-active				type boolean
	ws-public-mode-prompt				pic x(20) type string
	ws-public-mode-help					pic x(128) type string
	ws-public-mode-refresh-flag			pic x
//1.00 start [>
	i50linec-calculate				type boolean
	i50linec-code-entered			type boolean
	i50linec-reference				like sl-reference-lot
	i50linec-average-result			like stock-batch-average-result
	i50linec-reo-dmt-sum				like stock-batch-average-result
	i50linec-average-dmt				like stock-batch-average-result
	i50linec-average-reo				like stock-batch-average-result
	i50linec-stock-price				like prc-wholesale-price
	i50linec-saved-qty				like str-ordered-qty
//1.00 end <]

mode md-public-mode
	prompt ws-public-mode-prompt
	help ws-public-mode-help
	when ws-public-mode-active
mode md-job-cbs
	prompt "P-CBS"
	help "Project CBS section for the current line"
	when ws-cbs-exist
	and sol-line-type != 'DN'
	always-show
mode md-bulk-cbs
	prompt "B&ulk-CBS"
	help "Project CBS section for selected lines"
	always-show
//1.00 start [>
mode i50linec-md-mark
	prompt '&Mark/Unmark'
	always-show

mode i50linec-md-mark-all
	prompt 'Mark &All'
	always-show

mode i50linec-md-unmark-all
	prompt '&Unmark All'
	always-show

mode i50linec-find-ref
	prompt "&Locate Lot"
	help "Find a particular lot reference"

mode i50linec-continue
	prompt "Continue"
	help "Proceed to select average results"

mode i50linec-exit
	prompt "Cancel and E&xit"
	help "Exit to Lot Allocation Screen"
//1.00 end <]
//1.01 begin [>
mode md-container-details
	prompt "Container &Details"
	help "Enter Container Details for selected line"
	always-show
	when stock-code != SPACES
mode md-select
	prompt "Select"
	help "Select this Lot"
//1.01 end <]
procedure main export
	local field
		lf-ok			type boolean
		lf-old-status	like so-order-status
		lf-abort-status	type boolean
		lf-order-totals-have-changed			type boolean
		//
	set i50lines-neg-invoices-allowed = TRUE
	get system-control first
	do i_stdsec-security-check																	//1.00
	//1.00 start [>
	do c_clibx1-get-set-flag-boolean
		parameters are
			"CAL_PRCSTK"
			FALSE
			"Calc Ord Qty & Prc stkloc"
			"N"
		returning
			i50linec-calculate
	//
	//1.00 end <]
	//
	if TRUE = FALSE //prevent compiler warnings
		do i50extras-del-address-for-pos parameters ZERO SPACES
		do i5snotes-maint-sales-order-notes-search
	endif
	do clibgov-get-governance-table
		parameter
			I8GOVTBL_STOCK_CODE
		returning
			i8govtbl-stock-code-size
	//
	do clibtax-check-tax-groups-used
		returning
			ws-tax-groups-used
	//
	set ws-tax-prompt = concat(str-concat(sys-short-tax-desc),':')
	if get-param(1) = '-cash'
		//m50posmenu
		do i8secok-check-ok parameters
			sys-consolidation-division login-id() "SO" "T022"
			returning lf-ok
		if not lf-ok
			do i8secok-check-ok parameters
				sys-consolidation-division login-id() "SO" "T023"
				returning lf-ok
			if not lf-ok
				do i8secok-check-ok parameters
					sys-consolidation-division login-id() "POS" "M026"
					returning lf-ok
				if not lf-ok
					//crmmaint
					do i8secok-check-ok parameters
						sys-consolidation-division login-id() "CRM" "E001"
						returning lf-ok
					if not lf-ok
						do i8secabt-check-abort parameters
							sys-consolidation-division login-id() "CRM" "M001"
					endif
				endif
			endif
		endif
	else
		do check-specific-security //can abort in here
	endif
	//
	do check-security-settings
	set i50entry-mrp-from-whse = SPACES
	set i50entry-mrp-from-factory = SPACES
	set i50entry-mrp-to-whse = SPACES
	set i50entry-mrp-to-factory = SPACES
	set i50entry-mrp-stock-code = SPACES
	set ws-asked-l-line-q = FALSE
	set ws-limit-modes-fields-used = FALSE
	set i50lines-from-so-entry = FALSE
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PR' 'SO_OP_LINE'
	on error
		set ws-overide-lines-program = SPACES
	else
		set ws-overide-lines-program = sys-description
	endon
 	get system-table
 		key is "PR" 'SO_LNPACK'
 	on error
		initialise system-table leaving sys-tbl-type sys-tbl-code
	endon
	set ws-manuf-packing-program = sys-description
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is "PR" "SOLB4ENTRY"
	on error
		initialise system-table leaving sys-tbl-type sys-tbl-code
	endon
	set ws-sol-before-entry-program = sys-description
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is "PR" "SOLB4CONFI"
	on error
		initialise system-table leaving sys-tbl-type sys-tbl-code
	endon
	set ws-sol-before-confirm-program = sys-description
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PR' 'SOL_ST_VAL'
	on error
		set ws-user-lines-stk-val-prog = SPACES
	else
		set ws-user-lines-stk-val-prog = sys-description
	endon
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PR' 'SOPROMOPRG'
	on error
		set ws-user-lines-promo-prog = SPACES
	else
		set ws-user-lines-promo-prog = sys-description
	endon
	//
	if i8costsecu-cost-security-ok
		if sys-show-costs-at-order-entry = NO
			set i50entry-show-costs = NO
		elseif sys-show-costs-at-order-entry = 'B'
			set i50entry-show-costs = 'B'
		else
			set i50entry-show-costs = YES
		endif
	else
		set i50entry-show-costs = NO
	endif
	if i50entry-show-costs = 'B'
		set ws-box-currency-cost = ' '
		//This is to ensure box title is also disabled when show costs = B,
		//to avoid cost titles been seen by the clients at the POS
		//This prompt will not be visible even when the toggle is on for 'B'
	else
		set ws-box-currency-cost = 'Line Costs in Local'
	endif
	get system-login-table
		on index slt-type slt-login-id
		key is 'CL' login-id()
	on error
		set ws-is-user-a-credit-officer = NO
		set ws-credoff-max-limit = ZERO
		set ws-credoff-max-cnote-limit = ZERO
	else
		set ws-is-user-a-credit-officer = YES
		set ws-credoff-max-limit = slt-attribute-num-0dec-1
		set ws-credoff-max-cnote-limit = slt-attribute-num-0dec-2
	endon
	if param-cnt() = 0
		message 'This program must be run from m50ordent.spl'
		exit
	endif
	do i50lines-set-pack-description
	switch on sys-line-timeout
	case '2'
		set i50lines-time-out = 19
	case '3'
		set i50lines-time-out = 29
	case '4'
		set i50lines-time-out = 39
	case '5'
		set i50lines-time-out = 49
	case '6'
		set i50lines-time-out = 59
	case '7'
		set i50lines-time-out = 120
	case '8'
		set i50lines-time-out = 180
	case '9'
		set i50lines-time-out = 300
	else   // SPACES '0' '1'
		set i50lines-time-out = max-value(i50lines-time-out)
	endswitch
	set ws-special-ordent-program = SPACES
	get system-table
		key is 'PR' 'SO_ENTRY'
	on error
	else
		set ws-special-ordent-program = sys-description
		set ws-special-param = sys-tbl-alpha-2
	endon
	// Check if contract orders are used
	set i50lines-contracts-used = FALSE
	extract sales-order
		on index so-order-status so-order-priority
		so-delivery-date so-order-no so-bo-suffix
		key is I5SO_CONTRACT_ORDER 0 0 0 SPACES
		next same so-order-status
	detail
		set i50lines-contracts-used = TRUE
		break
	endextract
	set ws-show-kit-components = sys-show-kit-components
	set i50lines-deliver-on-behalf-flag = SPACES
	set ws-order-type = SPACES
	set ws-saved-order-no = num(get-param(1))
	set ws-saved-bo-suffix = get-param(2)
	do check-if-sopl-record-exists
	// NOTE: NOTE: param 1 and 2 aren't necessarily the
	//             order number and suffix eg. could be '-cash' etc
	// Now see if we've got a contract for this customer and if so select it
	if i50lines-contracts-used
	and get-param(1) != '-cash'
		do check-contract-orders
	endif
	if sys-proforma-style in { '1' '2' }
	and get-param(1) != '-cash'
		do get-proforma-order
	endif
	if get-param(3) = '-de'
		set ws-show-kit-components = get-param(4)
	else
		if ws-saved-order-no = 0
		and get-param(1) = '-cash'
			do special-point-of-sale-setup returning lf-abort-status
			if lf-abort-status
				exit
			endif
		endif
		if LANE_ENTRY
			set ws-order-type = "N"
		else
			set ws-order-type = get-param(4)
		endif
		set ws-show-kit-components = get-param(6)
		set ws-order-flag = get-param(7)
		if get-param(8) = "-zero-price"
			set ws-zero-price = TRUE
		else
			set ws-zero-price = FALSE
		endif
		if get-param(9) != SPACES
			set ws-van-id = get-param(9)
		else
			set ws-van-id = SPACES
		endif
		if ws-order-type = "S"
			set ws-order-type = "N"
		endif
	endif
	if ws-order-type = 'I'
	and get-param(5) = '-gl-acct'
		set ws-issue-to-account = get-param(6)
		set ws-limit-modes-fields-used = TRUE
	endif
	if ws-order-flag = CUSTOMER
		set i50entry-show-costs = NO
	endif
	if get-param(3) = '-e'
		//entry mode has different parameters.
		set ws-show-kit-components = sys-show-kit-components
		set i50lines-deliver-on-behalf-flag = get-param(6)
		set ws-order-flag = get-param(7)
	endif
	if get-param(3) = '-e'
		get sales-order
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
	else
		get sales-order
			lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
			message "Problem locking sales order " so-order-no so-bo-suffix
			pause
			exit
		endon
	endif
	//
	do public-determine-if-public-mode-active
		parameter
			sales-order.*
			get-param(1)
		returning
			ws-public-mode-active
			ws-public-mode-prompt
			ws-public-mode-help
	//
	do save-off-initial-so-total-values
	//
	do ok-to-post-income-and-cost-flags
		returning	ws-ok-to-post-cost
					ws-ok-to-post-income
					ws-not-ok-to-post-cost-message
					ws-not-ok-to-post-income-message
		// returns currency on job
	//
	if sys-so-use-of-price-ref = 'C'
		I8GETPERY_PERIOD_YEAR(so-order-date,ws-index,ws-year)
	endif
		//
	//Need to determine bill-to etc
	//Get current on so-cust-code deb-master
	do setup-customer-detail
	// Calculate if price sequence 16 (RMS) is activated
	do calc-rms-price-seq-16-active
		returning ws-rms-price-seq-16-active
	//set up repair and used whse for rotable items
	set ws-orig-whse-bo-flag = SPACES
	IWTYPE_DETERMINE_WHSE_TYPE(so-whse-code,i50lines-whse-type)
	set i50lines-repair-whse = sys-tbl-alpha-1
	set i50lines-used-whse = sys-tbl-alpha-2
	set ws-orig-whse-bo-flag = sys-tbl-alpha-4[3]
	if ws-orig-whse-bo-flag = SPACES
		set ws-orig-whse-bo-flag = sys-backorder-flag
	endif
	set i5pricemod-whse-tax-flag = zstr(sys-tbl-sales-ly,1,0)
	set i5linecalc-whse-tax-flag = zstr(sys-tbl-sales-ly,1,0)
	//check the special customer type contracts table
	spl "so/m50extra" parameters are "-specprc"
		returning i5solicost-special-supplier-prices-used
		leave-files-open
	do i50entry-determine-order-type
		parameters are ws-order-type
	//
	IWTYPE_DETERMINE_WHSE_TYPE(so-whse-to,ws-to-whse-type)
	if i50entry-transfer-between-whse = YES
		IWTYPE_DETERMINE_WHSE_TYPE(so-whse-to,ws-whse-to)
		 do i8userwhse-determine-user-masking-on-system-codes
				parameter 'W' so-whse-code
				returning ws-transfer-user-access
			if ws-transfer-user-access = FALSE
				set i50entry-show-costs = NO
			endif
	endif
	//
	if get-param(3) = '-e'
		set ws-title = concat("Sales Order Entry   ", "Order No. : ",
				str(so-order-no), so-bo-suffix, "        Order Date : ",
				juliantodate(so-order-date))
	else
		set ws-title = concat("Sales Order Edit    ", "Order No. : ",
				str(so-order-no), so-bo-suffix, "        Order Date : ",
				juliantodate(so-order-date))
	endif
	if get-param(3) = '-e'
		set ws-process-mode = ENTRY
		if ws-limit-modes-fields-used
			do a300-get-order-lines
				search entry remove
				initial-mode is entry
		else
			do a50-rest-of-order
		endif
	elseif get-param(3) in { '-d' '-rmacharge' }
		set ws-process-mode = EDIT
		if ws-order-flag = CUSTOMER
			do a300-get-order-lines
				search correct entry remove find-stk order-conclusion
		else
			if get-param(8) = '-glcodingused'
				// -glcodingused is only passed when the 3rd param. is '-d' !!
				do a300-get-order-lines
					search entry remove correct md-job-cbs md-bulk-cbs md-serial
					md-container-details								//1.01
			elseif get-param(4) = '-pos5edit'
				//POS mode must be 5.
				do a300-get-order-lines entry correct remove find get-customer
					md-pos-options
					next prev next-scr prev-scr all-line-modes order-conclusion
			elseif so-order-source = I5SOURCE_BRANCH_ORDER_SENT
				do a300-get-order-lines search
			elseif so-order-type-code = I5SO_TYPE_REPAIR
				do a300-get-order-lines search find-stk correct md-serial
					order-conclusion md-line-notes md-atp md-other md-tax-details
			elseif ws-sopl-record-exists
				do a300-get-order-lines search find-stk correct md-serial
					order-conclusion md-kit-options
					md-enter-proform-details md-discount-mod
					md-line-notes md-atp md-other md-tax-details md-job-cbs md-bulk-cbs
			else
				do a300-get-order-lines
			endif
		endif
		do b300-calc-total-amounts-update-header
		do check-of-order-totals-have-changed
			returning lf-order-totals-have-changed
		if lf-order-totals-have-changed
			set lf-old-status = so-order-status
			do check-officer-limit
			if so-order-status = I5SO_ENTERED_CREDIT_HOLD
			and i50lines-whse-type = IWTYPEDEF_DISTRIB_LOC_PICK
				// Order has been loaded into the advanced warehouse. The
				// picking header record needs to be removed when the status
				// is changed back to 'Credit Hold'.
				get warehouse-order-picking-header lock
					on index order-no bo-suffix
					key is so-order-no so-bo-suffix
				on error
					if file-status() = ENOREC
					endif
				else
					delete warehouse-order-picking-header
				endon
			endif
		endif
	elseif get-param(3) = '-i'
		set ws-process-mode = EDIT
		if i50lines-whse-type = IWTYPEDEF_DISTRIB_LOC_PICK
			do a300-get-order-lines
				search md-price order-conclusion
		else
			if so-order-source = I5SOURCE_BRANCH_ORDER_SENT
				do a300-get-order-lines search
			else
				do a300-get-order-lines
					search md-price entry remove order-conclusion
			endif
		endif
		do b300-calc-total-amounts-update-header
		do check-of-order-totals-have-changed
			returning lf-order-totals-have-changed
		if lf-order-totals-have-changed
		or i50entry-sales-credit = YES
			do check-officer-limit
		endif
	elseif get-param(3) = '-de'
		set ws-process-mode = EDIT
		if so-order-source = I5SOURCE_BRANCH_ORDER_SENT
			do a300-get-order-lines search
		else
			do a300-get-order-lines search md-serial md-atp md-other
				find-stk md-full-stock md-line-notes md-tax-details
				md-public-mode md-job-cbs md-bulk-cbs
		endif
	elseif get-param(3) = '-r'
		do remove-order
	else
		message "Parameters not valid " get-param(3)
		exit
	endif
	if ws-process-mode = EDIT
	and so-order-status != I5SO_ORDER_SUSPENDED
		set ws-saved-order-no = so-order-no
		set ws-saved-bo-suffix = so-bo-suffix
		extract sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix 0
			next same so-order-no so-bo-suffix
			when sol-line-type = "WN"
		detail
			spl 'so/m50ordent'	parameters are '-wn'
					str(so-order-no) so-bo-suffix ws-order-type
			break
		endextract
	endif
	if (so-order-status in I5SOSTATII_OUTSTANDING_TRANSFERS_STATII
	or so-order-status = I5SO_FORWARD_TRANSFER)
	and so-bo-suffix = SPACES
		get system-table
			key is 'BN' so-whse-code
		on error
		else
			if sys-money-value != 0
			and sys-tbl-sales-ly != 0
			and so-ordered-total-cost != 0
			and so-ordered-total-cost < sys-money-value
				message "Note: Branch will be charged as order is less than " sys-money-value pic $$$$$.$$
			endif
		endon
	endif
endprocedure //main ------------------------------------------------------------

procedure save-off-initial-so-total-values
	set ws-original-ship-total = so-order-total-shipped-amount
	// shipped totals
	set ws-original-ship-total = so-order-total-shipped-amount
	set ws-original-shipped-cost = so-order-total-shipped-cost
	set ws-original-shipped-tax = so-order-total-shipped-tax
	//
	// ordered totals
	set ws-original-order-total = so-order-total-amount
	set ws-original-ordered-cost = so-ordered-total-cost
	set ws-original-ordered-tax = so-order-total-tax
	//
	// charges, packages, weight
	set ws-original-charges = so-order-total-charges
	set ws-original-pack-weight = so-order-weight
	set ws-original-order-packages = so-order-packages
endprocedure //save-off-initial-so-total-values ------------------------------

procedure check-of-order-totals-have-changed
	returning lr-order-totals-have-changed			type boolean
	//
	set lr-order-totals-have-changed = FALSE
	// shipped totals
	if ws-original-ship-total != so-order-total-shipped-amount
		set lr-order-totals-have-changed = TRUE
	endif
	if ws-original-shipped-cost != so-order-total-shipped-cost
		set lr-order-totals-have-changed = TRUE
	endif
	if ws-original-shipped-tax != so-order-total-shipped-tax
		set lr-order-totals-have-changed = TRUE
	endif
	//
	// ordered totals
	if ws-original-order-total != so-order-total-amount
		set lr-order-totals-have-changed = TRUE
	endif
	if ws-original-ordered-cost != so-ordered-total-cost
		set lr-order-totals-have-changed = TRUE
	endif
	if ws-original-ordered-tax != so-order-total-tax
		set lr-order-totals-have-changed = TRUE
	endif
	//
	// charges, packages, weight
	if ws-original-charges != so-order-total-charges
		set lr-order-totals-have-changed = TRUE
	endif
	if ws-original-pack-weight != so-order-weight
		set lr-order-totals-have-changed = TRUE
	endif
	if ws-original-order-packages != so-order-packages
		set lr-order-totals-have-changed = TRUE
	endif
	//
	do public-check-if-order-totals-have-changed
		parameters
			lr-order-totals-have-changed
			ws-original-ship-total
			ws-original-shipped-cost
			ws-original-shipped-tax
			ws-original-order-total
			ws-original-ordered-cost
			ws-original-ordered-tax
			ws-original-charges
			ws-original-pack-weight
			ws-original-order-packages
			sales-order.*
		returning
			lr-order-totals-have-changed
endprocedure //check-of-order-totals-have-changed ----------------------------

procedure public-check-if-order-totals-have-changed export
//////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//<DESC>
//	This procedure allows customisation of setting a flag to determine if an
//	order has changed.  This is then used to determine if you need to
//	check if the customer is over their credit limit.
//	The checking of the credit limit then uses the MFF of
//	sys-credit-check-ship-or-order = '0' or '1', to determine if the status
//	of the order is to go to Credit Hold.
//	The flag is currently checked to determine if a credit check needs to be
//	done after editing a sales order.
//	The current procedure checks if any of the following totals has changed.
//	If one of them has changed it will set the 'Has the order changed' flag
//	to TRUE.
//	Shipped total e.g. so-order-total-shipped-amount
//	Shipped cost e.g. so-order-total-shipped-cost
//	Shipped tax e.g. so-order-total-shipped-tax
//	Ordered total e.g. so-order-total-amount
//	Ordered cost e.g. so-ordered-total-cost
//	Ordered tax e.g. so-order-total-tax
//	Total Charges e.g. so-order-total-charges
//	Total Weight e.g. so-order-weight
//	Total Packages e.g. so-order-packages
//
////////////////////////////////////////////////////////////////////////////////
//<P1>		This holds the 'Has the order changed flag' that Pronto
//			has calculated.
//<P2>		The original shipped total before going into lines maintenance.
//<P3>		The original shipped cost before going into lines maintenance.
//<P3>		The original shipped tax before going into lines maintenance.
//<P4>		The original ordered total before going into lines maintenance.
//<P5>		The original ordered cost before going into lines maintenance.
//<P6>		The original ordered tax before going into lines maintenance.
//<P7>		The original total charges before going into lines maintenance.
//<P8>		The original total weight before going into lines maintenance.
//<P9>		The original total packages before going into lines maintenance.
//<P10>		Sales Order Object ( i.e. sales-order.*)
//
//<R1>		This returns the 'Has the order changed flag' to TRUE / FALSE
////////////////////////////////////////////////////////////////////////////////
	parameters are
		lp-order-totals-have-changed	type boolean
		lp-original-ship-total			like so-order-total-shipped-amount
		lp-original-shipped-cost		like so-order-total-shipped-cost
		lp-original-shipped-tax			like so-order-total-shipped-tax
		lp-original-order-total			like so-order-total-amount
		lp-original-ordered-cost		like so-ordered-total-cost
		lp-original-ordered-tax			like so-order-total-tax
		lp-original-charges				like so-order-total-charges
		lp-original-pack-weight			like so-order-weight
		lp-original-order-packages		like so-order-packages
		lp-sales-order.*				like sales-order.*
	returning
		lr-order-totals-have-changed	type boolean
	//
	// folowing sets done to stop warnings
	set lp-original-ship-total = lp-original-ship-total
	set lp-original-shipped-cost = lp-original-shipped-cost
	set lp-original-shipped-tax = lp-original-shipped-tax
	set lp-original-order-total = lp-original-order-total
	set lp-original-ordered-cost = lp-original-ordered-cost
	set lp-original-ordered-tax = lp-original-ordered-tax
	set lp-original-charges = lp-original-charges
	set lp-original-pack-weight = lp-original-pack-weight
	set lp-original-order-packages = lp-original-order-packages
	//
	// Make sure the returning flag is the same as the passed flag!!
	set lr-order-totals-have-changed = lp-order-totals-have-changed
endprocedure //public-check-if-order-totals-have-changed ---------------------

procedure check-specific-security
	returning
		lr-ok			type boolean
		//
	do i8secok-check-ok parameters
		sys-consolidation-division login-id() "SO" "M001"
		returning lr-ok
	if lr-ok
		exit
	endif
	do i8secok-check-ok parameters
		sys-consolidation-division login-id() "SO" "M002"
		returning lr-ok
	if lr-ok
		exit
	endif
	do i8secok-check-ok parameters
		sys-consolidation-division login-id() "SO" "M041"
		returning lr-ok
	if lr-ok
		exit
	endif
	do i8secok-check-ok parameters
		sys-consolidation-division login-id() "POS" "M023"
		returning lr-ok
	if lr-ok
		exit
	endif
	do i8secok-check-ok parameters
		sys-consolidation-division login-id() "PO" "M022"
		returning lr-ok
	if lr-ok
		exit
	endif
	do i8secok-check-ok parameters
		sys-consolidation-division login-id() "PO" "M015"
		returning lr-ok
	if lr-ok
		exit
	endif
	do i8secabt-check-abort parameters
		sys-consolidation-division login-id() "SO" "M053"
endprocedure //check-specific-security ----------------------------------

procedure check-contract-orders
	local field
		lf-customer-code					like so-cust-code
		lf-outstanding-contract-found		type boolean
		lf-cust-reference 					like so-cust-reference
	//
	window @23,50 to @23,80
		title is "Checking Contract Orders"
		no-hide
	get sales-order
		on index so-order-no so-bo-suffix
		key is ws-saved-order-no ws-saved-bo-suffix
	on error
	else
		set i50lines-licence-start-date = so-order-date
		//date of order being entered to compare for contracts
		set ws-proforma-order-no = 0
		set lf-customer-code = so-cust-code
		set lf-cust-reference = so-cust-reference
		display 'Searching' @23,60 IBMSSTYLE_SEARCHING
		extract sales-order
			on index so-order-status so-order-priority
			so-delivery-date so-order-no so-bo-suffix
			key is I5SO_CONTRACT_ORDER 0 0 0 SPACES
			next same so-order-status
			where so-cust-code = lf-customer-code
		detail
			do find-outstanding-contract-order
				parameter
					lf-customer-code
					lf-cust-reference
				returning
					lf-outstanding-contract-found
			if not lf-outstanding-contract-found
				break
			endif
			do select-contract-order
			break
		endextract
		if ws-proforma-order-no != 0
			if lf-outstanding-contract-found
				//Contract has been selected, set contract no.
				get sales-order lock
					on index so-order-no so-bo-suffix
					key is ws-saved-order-no ws-saved-bo-suffix
				on error
				else
					set so-cust-reference = sol-line-description
					update sales-order
				endon
			endif
			get sales-order
				on index so-order-no so-bo-suffix
				key is ws-proforma-order-no ws-proforma-bo-suffix
			on error
			else
				set i50lines-found-contract	= TRUE
				if so-order-total-amount != 0
				or so-order-total-charges != 0
					set i50lines-contracts-used = 2
					set ws-limit-contract-amount = so-order-total-amount
						- so-order-total-shipped-amount
					set ws-limit-contract-qty = so-order-total-charges
						- so-order-total-shipped-cost
				else
					set i50lines-contracts-used = 1
				endif
			endon
		else
			set i50lines-contracts-used = FALSE
		endif
	endon
endprocedure //check-contract-orders -----------------------------------------

procedure setup-customer-detail
	get deb-master
		on index accountcode
		key is so-cust-code
	on error
		initialise deb-master
			leaving accountcode
	endon
	set ws-agent-wears-debt = FALSE
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'TC' territory
	on error
		set ws-agent-sale = FALSE
	else
		if sys-tbl-alpha-4[1] = YES
			set ws-agent-sale = TRUE
			if sys-tbl-alpha-4[2] = 'A'
				set ws-agent-wears-debt = TRUE
			endif
		endif
	endon
	//
	do i50lines-set-i5pricemod-acnt-to-use-for-price-lookup
		returning ws-stock-identifiers
	//
	set i5soldisc-acnt-to-use-for-cgd = i5pricemod-acnt-to-use-for-price-lookup
	//
	get stock-conversion-procedure
		on index scp-accountcode scp-stock-code scp-sequence-no
		key is i5soldisc-acnt-to-use-for-cgd '*' 1
	on error
		set scp-stk-unit-desc = SPACES
	else
		if scp-stk-unit-desc not in { '/' '\' }
			set scp-stk-unit-desc = SPACES
		endif
	endon
	set i50lines-check-alt-unit-default = scp-stk-unit-desc
	if scp-stk-unit-desc = '\'
	and ( sys-so-conclusion-defaults = '1'
	or sys-so-pricing-method = 'C' )
		set i50lines-check-alt-unit-default = SPACES
		message 'Automatic pricing by alternative unit not available'
		pause
	endif
	//check if government rebate order,ie. price code is between AA & ZZ.
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'GR' so-price-code
	on error
		set i5pricemod-govern-rebate-order = NO
	else
		set i5pricemod-govern-rebate-order = YES
	endon
endprocedure //setup-bill-to-detail ---------------------------------------

procedure check-security-settings
	//Was credit-hold-release-status
	do i8secok-check-ok parameters
		sys-consolidation-division login-id()
		"SO" "S007"
		returning ws-SO-S007
	//show costs
	do i8costsecu-check-cost-security
endprocedure //check-secuiity-settings------------------------------------------

procedure special-point-of-sale-setup
	returning lr-abort-status		type boolean
	local field
		lf-pin-number-checked		type boolean
	set lr-abort-status = FALSE
	//Special point of sale stuff
	if get-param(2) = SPACES
		if getenv("CASHACNT") <> SPACES
			set so-cust-code = getenv("CASHACNT")
		else
			set so-cust-code = concat('CASH' cd-default-so-terr)
		endif
	else
		set so-cust-code = get-param(2)
	endif
	get deb-master
		on index accountcode
		key is so-cust-code
	on error
		abort 'Cash sale customer not on file.' so-cust-code
	else
		set dpn-pin-number = SPACES
		get deb-pin-numbers
			on index dpn-accountcode dpn-user-code
			key is so-cust-code SPACE
		on error
			// No pin number required for this customer
			set lf-pin-number-checked = TRUE
		else
			do get-customer-pin-number
				returning lf-pin-number-checked
		endon
		if not lf-pin-number-checked
			message "Invalid access code, can't create order for this account"
			// didn't use the abort statement here because it send a error
			// statement to the calling program, in this case to crmmaint
			// which shows misleading message to the user
			set lr-abort-status = TRUE
			exit
		endif
	endon
	//
	do clibserial-next-serial-number
		parameters
			"SO"
		returning
			so-order-no
	get sales-order lookup
	on error
	else
		abort 'Unable to allocate next '
				'sales order no., Please try again'
	endon
	set ws-order-type = 'N'
	set so-order-status = I5SO_BEING_ENTERED
	//
	//Get the cash draw for the defaults
	set cd-default-rep = SPACES
	set cd-default-whse = SPACES
	set cd-default-so-terr = SPACES
	do i5postermi-get-cash-draw-number
		returning cd-store-id cd-terminal
	initialise sales-order
		leaving so-order-no
			so-cust-code
			so-order-status
			so-curr-code
			so-cust-reference
	set job-code = SPACES
	if not (sys-so-header-defaults in {YES,'1','4','7'}
	and ws-order-type in { 'N' 'O' 'S' 'F' 'B' 'M'})
		set so-cust-reference = SPACES
	endif
	set so-order-date = today()
	if cd-default-rep = USE_DEBTOR_REP
		set so-rep-code = rep-code
	else
		set so-rep-code = cd-default-rep
	endif
	set so-user-id-code = login-id()
	get rep-master
		on index rep-code
		key is so-rep-code
	on error
	else
		if rep-login-id != SPACES
			set so-user-id-code = rep-login-id
		endif
	endon
	set so-order-source = I5SOURCE_POS_LANE_ORDER
	set so-whse-code = cd-default-whse
	do i5saletype-set-pos-default-sales-type-code
		returning ws-default-sales-type-code
	set so-territory-code = ws-default-sales-type-code
	set so-price-code = price-code
	set so-part-shipment-allowed = dr-part-shipment-allowed
	if sys-so-territory-default = "B"
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'WH' so-whse-code
		set so-cust-type = zstr(sys-tbl-sales-ytd,2,0)
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'CT' so-cust-type
		on error
			set sys-description = so-whse-code
			insert system-table
		endon
	else
		set so-cust-type = dr-cust-type
	endif
	insert sales-order
	get sales-order
	do i5chgstat-update-so-order-status
		parameters
			so-order-no
		   	so-bo-suffix
		   	so-order-status
		   	SPACES //inital creation
			TRUE
		returning
			ws-result-code
	set ws-saved-order-no = so-order-no
	set ws-saved-bo-suffix = so-bo-suffix
endprocedure //special-point-of-sale-setup -----------------------------------

procedure a50-rest-of-order
	local field
		lf-save-status			like so-order-status
		lf-invoice-no			like so-invoice-no
		lf-abort-status			type boolean
		lf-order-type			pic x
		lf-error-message		type string pic x(BMSDEF_PATHSIZE)
	//
	set ws-itiated-special-z = TRUE
	while TRUE
		if ws-order-flag = CUSTOMER
			do a300-get-order-lines
				search correct entry remove find-stk order-conclusion
				initial-mode is entry
		elseif sys-so-initial-line-mode = 'D'
		and so-order-source != I5SOURCE_BRANCH_ORDER_SENT
		and not LANE_ENTRY
			do a300-get-order-lines initial-mode is md-detail-entry
		elseif sys-so-initial-line-mode in { 'A' 'Z' }
		and so-order-source != I5SOURCE_BRANCH_ORDER_SENT
		and not LANE_ENTRY
			if ws-special-ordent-program <> SPACES
				set ws-itiated-special-z = FALSE
			endif
			do a300-get-order-lines initial-mode is entry
		else
			if LANE_ENTRY
				//Don't Allow detail entry mode for LANE_ENTRY
				if DISPLAY_ON_MONITOR
					report 'slave display'
						depth is 2
						length is 2
						direct to "slave"
						no-message
				endif
				do a300-get-order-lines
						entry find get-customer
							md-pos-options
							next prev
							next-scr prev-scr remove correct
							all-line-modes
							order-conclusion
						initial-mode is entry
			elseif so-order-source = I5SOURCE_BRANCH_ORDER_SENT
				do a300-get-order-lines search
			else
				do a300-get-order-lines initial-mode is entry
			endif
		endif
		if ws-del-hit = YES
			if sys-point-of-sale-mode-used = '5'
			and get_param(1) = '-cash'
				set i50lines-cal-display-totals = CURRENT_LINE_AND_NO_SEQ
				do b300-calc-total-amounts-update-header
				if ws-total-ordered-incl-charges = ZERO
				and ws-total-shipped-incl-charges = ZERO
				and ws-line-seq = ZERO
					spl 'so/m50extra'
						parameters are str(so-order-no) so-bo-suffix '-remove' SPACES '-noaccepts'
						returning lf-error-message
					if lf-error-message != SPACES
						message-box lf-error-message
							title param-text("Unable to cancel this order: <<P1>> <<P2>>" so-order-no, so-bo-suffix)
							message-buttons MSG_BOX_OK
							icon MSG_BOX_STOP
							tag 70
					endif
					break
				else
					set ws-cancel-order = NO
					do a120-do-you-really-want-to-cancel
					if ws-cancel-order = YES
						do remove-order
						break
					endif
				endif
			else
				do i50extras-determine-order-type
					returning lf-order-type
				if lf-order-type = 'T' //Coming from transfer order
				and so-order-status = I5SO_TRANSFER_HOLD_FOR_APPROVAL
					exit
				else
					do a120-do-you-really-want-to-cancel
					if ws-cancel-order = YES
						do remove-order
						break
					endif
				endif
			endif
		else
			set ws-cancel-order = NO
			do b300-calc-total-amounts-update-header
			//
			if get-param(1) = '-cash'
			and so-order-status = I5SO_BEING_ENTERED
				get sales-order lock
				set i50entry-save-order-status = so-order-status
				do i5chgstat-update-so-order-status
					parameters
						so-order-no
					   	so-bo-suffix
					   	I5SO_RDY_TO_PRINT_INVOICE
					   	i50entry-save-order-status
						FALSE
					returning
						ws-result-code
				spl 'pos/p50pos' parameters are '-consolidate'
					str(so-order-no) so-bo-suffix TRUE
				on error
				endon
				get sales-order  //consolidate may have changed status
				set lf-save-status = so-order-status
				do i5chgstat-update-so-order-status
					parameters
						so-order-no
					   	so-bo-suffix
					   	I5SO_RDY_TO_PRINT_INVOICE
					   	lf-save-status
						TRUE
					returning
						ws-result-code
				set ws-found-shipped = FALSE
				extract sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no SPACES 0
					next same so-order-no
					where sol-shipped-qty != 0
				detail
					set ws-found-shipped = TRUE
					break
				endextract
				do clibserial-next-sales-invoice-no
					parameters
						so-order-no
						so-bo-suffix
					returning
						lf-invoice-no
				get sales-order lock
					on index so-order-no so-bo-suffix
					key is so-order-no so-bo-suffix
				set so-invoice-no = lf-invoice-no
				update sales-order
				if ws-found-shipped
					if not i50lines-scanned-item
					and sol-backorder-qty != 0
						spl 'so/m5bosplit' parameters are '-one'
						str(so-order-no) so-bo-suffix 'Y'
					endif
					set so-order-status = I5SO_RDY_TO_PRINT_INVOICE
				else
					set so-order-status = I5SO_BACK_ORDER
				endif
				if get-param(5) = '-despatch'
					spl 'so/m5delfifo' parameters are "-carrier"
							str(so-order-no) so-bo-suffix
				endif
				if get-param(5) = '-order'
					spl 'so/m50finish' parameters
						str(so-order-no) so-bo-suffix
					on error
						break
					endon
					get sales-order // reset all status fields
				else
					spl 'deb/m1poscrec' parameters are "-cashpos"
						str(so-order-no) so-bo-suffix
					on error
						break
					endon
				endif
				//To be done after call to m1poscrec as need ship total
				//to be paid, even for items from another whse.
				set ws-saved-order-no = so-order-no
				set ws-saved-bo-suffix = so-bo-suffix
				//Only extract if need to.
				extract sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix 0
					next same so-order-no so-bo-suffix
					when sol-line-type = "WN"
				detail
					spl 'so/m50ordent'	parameters are '-wn'
							str(so-order-no) so-bo-suffix ws-order-type
					break
				endextract
				set so-order-no = ws-saved-order-no
				set so-bo-suffix = ws-saved-bo-suffix
				exit
			elseif get-param(1) = '-cash'
				// this code part might be redundant since if get-param(1)
				// do special-point-of-sale-setup is called before checking
				// the get-param(3).If called and the procedure failed need
				// to exit the process
				do special-point-of-sale-setup returning lf-abort-status
				if lf-abort-status
					exit
				endif
			endif
			if get-param(1) != '-cash'
				break
			endif
		endif
	endwhile
	if LANE_ENTRY
	and ws-cancel-order != YES
	and DISPLAY_ON_MONITOR
		report finished
	endif
endprocedure //a50-rest-of-order -----------------------------------------------

procedure a120-do-you-really-want-to-cancel
	set ws-cancel-order = NO
	message-box "Do you really want to cancel this order?"
		title "Confirm Cancel"
		message-buttons MSG_BOX_YES_NO
		default is MSG_BOX_NO
		icon is MSG_BOX_QUESTION
		tag 1
	if message-status() = MSG_BOX_YES
		set ws-cancel-order = YES
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is so-order-no so-bo-suffix
		set so-cust-reference = "NOORDEREDHIST"
		update sales-order lock
	endif
endprocedure //a120-do-you-really-want-to-cancel -----------------------------

procedure remove-order
	local field
		lf-error-message				type string pic x(BMSDEF_PATHSIZE)
	//
	if LANE_ENTRY
	and DISPLAY_ON_MONITOR
		report finished
	endif
	unlock all
	spl 'so/m50extra'
		parameters are str(so-order-no) so-bo-suffix '-remove'
		returning lf-error-message
	if lf-error-message != SPACES
		message-box lf-error-message
			title param-text("Unable to cancel this order: <<P1>> <<P2>>" so-order-no, so-bo-suffix)
			message-buttons MSG_BOX_OK
			icon MSG_BOX_STOP
			tag 70
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is so-order-no so-bo-suffix
		get deb-master
			on index accountcode
			key is so-cust-code
	endif
endprocedure //remove-order ------------------------------------------------------------

screen b160-maintain-ref-inv-no
	window @20,40 to @23,80
		title is "Maintain Invoice No./ Customer Reference"
	allow correct
	primary sales-order
before
	if i50entry-sales-credit = YES
	or i50entry-return-authorisation = YES
		display "Invoice No.  :" @21,41
	else
		display "Customer Ref.:" @21,41
	endif
detail
	accept so-cust-reference @21,56
		help "Please enter the correct reference for this order"
		uppercase
		no-clear
		when i50entry-sales-credit = NO
		and i50entry-return-authorisation = NO
	validations
		if so-cust-reference = SPACES
			get system-table
				on index sys-tbl-type sys-tbl-code
				key is 'CT' dr-cust-type
			on error
				//No customer type record exists.
			else
				if sys-tbl-alpha-3 = YES
					message 'This customer requires a reference number'
					reenter so-cust-reference
				endif
			endon
		elseif so-cust-reference > SPACES
		and sys-check-so-dupl-ref in {YES "A"}
			do check-all-orders-for-this-ref
		endif
	endvalidations
	accept so-invoice-no @21,56
		help "Please enter the correct invoice no. for this credit note"
		no-clear
		when (i50entry-sales-credit = YES
		or i50entry-return-authorisation = YES)
	validation
		if dr-clearflag in { "O" "W" "F" }
		and so-invoice-no <> SPACES
			set so-invoice-no = right-justify(so-invoice-no,sizeof(so-invoice-no))
			refresh so-invoice-no
		endif
	endvalidation
	confirm auto
	confirmed
		exit		// this will bypass the after
	endconfirm
after
	if i50entry-sales-credit = NO
	and i50entry-return-authorisation = NO
	and so-cust-reference = SPACES
	//Check to see if a reference is required
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'CT' dr-cust-type
		on error
			// No customer type record is setup.
		else
			if sys-tbl-alpha-3 = YES
				message 'This customer requires a reference number'
				back-to-detail
			endif
		endon
	endif
endscreen //b160-maintain-ref-inv-no -------------------------------------------

procedure check-all-orders-for-this-ref
local field
		lf-found-ref						type boolean
		lf-order-no							like so-order-no
		lf-bo-suffix						like so-bo-suffix
	//
	window @21,40 to @23,80
		title is "Duplicate References Check"
	display 'Checking for Duplicate References' @22,44
	//
	do clibso-check-duplicate-reference
		parameter
			so-order-no
			so-bo-suffix
			so-cust-reference
			so-cust-code
		returning
			lf-found-ref
			lf-order-no
			lf-bo-suffix
	if lf-found-ref
		message-box param-text("Warning: Duplicate customer reference on order <<P1>><<P2>>",lf-order-no,lf-bo-suffix)
			title 'Duplicate Customer Reference'
			message-buttons MSG_BOX_OK
			default MSG_BOX_OK
			icon MSG_BOX_INFORMATION
			tag 1
			optional
	endif
endprocedure //check-all-orders-for-this-ref -----------------------------------

//////////////////////////////////////////////////////////////
//Review order lines
//////////////////////////////////////////////////////////////

menu all-line-modes-menu
	window @5,31 to @17,51
detail
	// NOTE: after this menu is called recalc. the totals and redisplay them!
	//
	option 'Find Item Code' @6,33
		do b430-find-stk
		exit
	option 'Maintain Serials' @8,33
		if sol-line-type in { 'SN','WN','RR','KN' }
		or (sol-line-type = 'RR' and i50entry-normal-order = YES)
			get stock-master
			on error
				message-box param-text("Item code <<P1>> not valid", stock-code)
					title "Item Code Invalid"
					icon is MSG_BOX_STOP
					message-buttons MSG_BOX_OK
					tag 1415
			else
				if stk-serialized-flag != 'N'
				or (i50lines-whse-type = IWTYPEDEF_LOAN_DEMO_WHSE
				and sol-line-type != 'KN')
					do i50lines-get-serial-no-info md-serial
						parameter
							ws-sopl-record-exists
					get sales-order-line lock
					on error
						continue
					endon
					set i5soldisc-general-disc-rate = 0
				else
					message 'Item code is not serialised'
				endif
			endon
		else
			message 'Only normal stock lines can be serialised'
		endif
		exit
	option 'Proforma Detail' @10,33
		set i5linecalc-dont-zero-disc = TRUE
		do setup-select-of-proforma-lines
		exit
	option 'Discount Order' @12,33
		icon folder-icon
		if (sys-price-disc-entered not in { 'A' 'C' }
		or  (sys-price-disc-entered = 'A'
		and ws-is-user-a-credit-officer = YES))
		and so-order-type-code != I5SO_TYPE_TAX_ONLY
			get sales-order lock
			spl 'so/m50disc' parameters are '-disc'
				str(so-order-no) so-bo-suffix '-lines'
			on error
				message "Not installed, m50disc"
			endon
			get sales-order lock
			on error
			endon
		else
			message 'You are not authorised to change the discount'
		endif
		exit
	option 'E&xtra Options' @16,33
		icon folder-icon
		set ws-save-line = sol-line-seq
		do other-options
		position sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix ws-save-line
		exit
endmenu //all-line-modes-menu ------------------------------------------------

procedure get-avail-stk-and-stk-description
	returning	lr-available-stk			like whse-qty-on-hand
				lr-available-stk-text		pic x(14)
				lr-unit-of-available-stk	like sol-stk-unit-desc
				lr-stk-desc-1				like sol-line-description
				lr-stk-desc-2				like stk-desc-line-2
				lr-stk-desc-3				like stk-desc-line-3
				lr-stk-apn-number			like stk-apn-number
	local field
				lf-avail-dedicated			like whse-qty-on-hand
	//
	// This routine can be called before the sol-line-type has been set ( via up/down
	// arrow when entering stock-code so if it is SPACES then assume SN.
	if sol-line-type = SPACES
		set sol-line-type = 'SN'
	endif
	//
	if sol-line-type in { 'KN','SN','WN'}
	and so-order-type-code != I5SO_TYPE_PROFORMA
		set lr-stk-apn-number = stk-apn-number
		do i50lines-determine-available-stock
			parameters so-order-no so-bo-suffix sol-line-seq
				sol-line-type sol-ordered-qty
				i5pricemod-bill-to
				so-whse-code stock-code
				ws-van-id
				TRUE	//Indicative available stock.
				sol-stk-unit-desc
				sol-stk-unit-conversion
			returning
				lr-available-stk
				lf-avail-dedicated
				i50entry-dedicated-line
				sol-stk-unit-desc		// used to display avail stk
				sol-stk-unit-conversion	// used to display avail stk
		set lr-unit-of-available-stk = sol-stk-unit-desc
		//
		// ws-available-stk is used throughout the program so
		// to be sure not to set it.
		set ws-available-stk = lr-available-stk
		//
		if stk-stock-status not in {'L','Z'}
			I4PRINTDEC_FORMAT_DECIMALS(lr-available-stk,13
				,sys-money-value,lr-available-stk-text)
		else
			set lr-available-stk-text = SPACES
			set lr-available-stk = 0
			set lr-unit-of-available-stk = SPACES
		endif
	else
		set lr-available-stk-text = SPACES
		set lr-available-stk = 0
		set lr-unit-of-available-stk = SPACES
		set lr-stk-apn-number = SPACES
	endif
	//
	do get-stk-description
		returning
			lr-stk-desc-1 lr-stk-desc-2 lr-stk-desc-3
endprocedure //get-avail-stk-and-stk-description -----------------------------

procedure get-stk-description
	returning	lr-stk-desc-1				like sol-line-description
				lr-stk-desc-2				like stk-desc-line-2
				lr-stk-desc-3				like stk-desc-line-3
	local field
				lf-ok-to-continue			type boolean
	//
	if sol-line-type in {'SN' 'KN' 'WN' 'RR'}
		do i50stkenq-public-stk-check-procedure
			parameter FALSE stock-code so-order-no so-bo-suffix
			returning lf-ok-to-continue
		if not lf-ok-to-continue
			set lr-stk-desc-1 = 'Not Available'
			set lr-stk-desc-2 = SPACES
			set lr-stk-desc-3 = SPACES
		elseif sol-line-description != SPACES
			// overriden description line
			set lr-stk-desc-1 = sol-line-description
			set lr-stk-desc-2 = SPACES
			set lr-stk-desc-3 = SPACES
		else
			set lr-stk-desc-1 = stk-description
			set lr-stk-desc-2 = stk-desc-line-2
			set lr-stk-desc-3 = stk-desc-line-3
		endif
	else
		set lr-stk-desc-1 = sol-line-description
		if sol-line-type = "DN"
		and stock-code not in { 'Text', 'Terms', 'Memo', 'Note' }
			// Some Note/Memo lines store additional information in field stock-code.
			// ie: Contract Service Orders..
			set lr-stk-desc-2 = stock-code
		endif
	endif
endprocedure //get-stk-description -------------------------------------------

procedure get-line-desc
	returning
		lr-stk-status-desc 					pic x(30)
	//
	if sol-line-type = 'DN'
	and sol-chg-type = 'T'
		set lr-stk-status-desc = 'Sub Kit'
	elseif sol-line-type = 'DN'
		if sol-print-line = 'N'		// if line hidden then treat as a memo
			set lr-stk-status-desc = 'Memo'
		else
			set lr-stk-status-desc = 'Note'
		endif
	elseif sol-line-type = 'SC'
		set lr-stk-status-desc = 'Charge'
	elseif sol-line-type = 'SS'
		set lr-stk-status-desc = 'Special'
	elseif sol-line-type = 'RS'
		set lr-stk-status-desc = 'Asset Sale'
	elseif sol-line-type = 'RN'
		if so-order-source = I5SOURCE_SERVICE_CONTRACT_INVOICE
			set lr-stk-status-desc = 'Service'
		elseif so-order-source = I5SOURCE_RENTAL
			set lr-stk-status-desc = 'Rental'
		else
			set lr-stk-status-desc = 'Rental/Serv'
		endif
	elseif sol-line-type = 'ST'
		set lr-stk-status-desc = 'Sales Tax'
	elseif sol-line-type = 'KN'
		set lr-stk-status-desc = 'Kit'
	elseif sol-line-type in { 'SN','WN' }
	and sol-chg-type = 'D'
		set lr-stk-status-desc = 'Component'
	elseif sol-line-type = 'SN'
	and stk-condition-code = 'R'
		set lr-stk-status-desc = 'Rotate item'
	elseif sol-line-type = 'SN'
	and stk-condition-code = 'T'
		set lr-stk-status-desc = 'Discontinued'
	elseif sol-line-type = 'RR'
		set lr-stk-status-desc = 'Rotate Rtn'
	else
		do clib309-get-stock-status-desc
			parameter
				stk-stock-status
			returning
				lr-stk-status-desc
	endif
endprocedure //get-line-desc -------------------------------------------------

procedure get-the-pricing-uom
	returning
		lr-price-uom-desc				like sol-stk-unit-desc
	//
	if sol-line-type not in {'SC','DN','ST','SS'}
		if i50lines-price-conversion != 0
		or (sol-price-overide-flag in { I5SOSTATII_ALT_PRICE
					I5SOSTATII_ALT_OVER_PRICE}
		and sys-so-conclusion-defaults != '1'
		and sys-so-pricing-method != 'C' )
			set lr-price-uom-desc = sol-stk-unit-desc
		elseif sol-price-overide-flag = I5SOSTATII_STK_ALT_PRICE
		and sys-so-conclusion-defaults != '1'
		and sys-so-pricing-method != 'C'
			set lr-price-uom-desc = stk-alt-unit-desc
		elseif sol-price-overide-flag = "U"
		and sys-so-conclusion-defaults != '1'
		and sys-so-pricing-method != 'C'
		and sol-alt-price-uom != SPACES
			// Price using UOM in the GTIN table.
			set lr-price-uom-desc = sol-alt-price-uom
		elseif sol-price-uom = 1
		and sol-line-type in {'SN','WN','RR','KN'}
		and stk-alt-unit-desc <> SPACES
		and stk-alt-unit-desc = sol-stk-unit-desc
		and stk-alt-unit-desc <> stk-unit-desc
		and stk-conversion-factor <> 0
			set lr-price-uom-desc = stk-unit-desc
		else
			set lr-price-uom-desc = stk-unit-desc
		endif
	else
		set lr-price-uom-desc = SPACES
	endif
endprocedure //get-the-pricing-uom -------------------------------------------

procedure get-price-rule-desc
	returning	lr-option			pic x(30)
	//
	local field
				lf-option			pic x(30)
	//
	set lr-option = SPACES
	//
	if sol-line-type in { 'SN' 'WN' 'KN' 'RR' }
		if sol-price-rule != SPACES
			if sol-price-overide-flag in { SPACES, 'N' }
				// no overide flag has been set so lookup the price rules!
				do lookup-price-rule-description
					returning lr-option
			else
				do check-for-overide-flag-desc
					returning lr-option
			endif
			set lf-option = concat('-',lr-option)
			set lr-option = concat ( sol-price-rule,lf-option )
		else
			do check-for-overide-flag-desc
				returning lr-option
		endif
	else
		set lr-option = SPACES
	endif
	do public-override-price-rule-desc
		parameters
			sales-order-line.*
			lr-option
		returning
			lr-option
endprocedure //get-price-rule-desc -------------------------------------------

procedure check-for-overide-flag-desc
	returning	lr-option			pic x(30)
	//
	switch sol-price-overide-flag
	case 'Y'
		set lr-option = 'Manual Price Override'
	case I5SOSTATII_ALT_PRICE
		set lr-option = 'Alternate Unit Price'
	case I5SOSTATII_ALT_OVER_PRICE
		set lr-option = 'Alternate Manual Override'
	case I5SOSTATII_STK_ALT_PRICE
		set lr-option = 'Item Alternate Unit Price'
	case 'U'
		set lr-option = 'Tally Price'
	case 'C'
		set lr-option = 'Kit Component Price'
	case 'T'
		set lr-option = 'On Contract Price'
	else
		set lr-option = 'Manual Override'
	endswitch
endprocedure //check-for-overide-flag-desc -----------------------------------

procedure lookup-price-rule-description
	returning	lr-option			pic x(30)
	//
	local field
			lf-option1				pic x(15)
			lf-option2				pic x(15)
			lf-option3				pic x(15)
			lf-key1					like sys-tbl-alpha-2
			lf-key2					like sys-tbl-alpha-3
			lf-key3					like sys-tbl-alpha-1
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'BP' sol-price-rule
	on error
	else
		set lf-key1 = sys-tbl-alpha-2
		set lf-key2 = sys-tbl-alpha-3
		set lf-key3 = sys-tbl-alpha-1
	endon
	if num(sol-price-rule) < 20
		do i5priceopt-standard-options
			parameters sol-price-rule
			returning lr-option
	elseif sys-description <> SPACES
		// if the user has overridden the special pricing description then display this
		// instead of the conventional description.
		set lr-option = sys-description
	else
		do i5priceopt-setup-options
			parameters are lf-key1
			returning lf-option1
		if lf-key2 = SPACES
		and lf-key3 = SPACES
			set lr-option = concat(substring(lf-option1,1,str-len(lf-option1)),' Only')
		else
			do i5priceopt-setup-options
				parameters lf-key2
				returning lf-option2
			do i5priceopt-setup-options
				parameters lf-key3
				returning lf-option3
			if lf-key1 = SPACES
			and lf-key3 = SPACES
				set lr-option =
				concat(substring(lf-option2,1,str-len(lf-option2)),' Only')
			elseif lf-key1 = SPACES
			and lf-key2 = SPACES
				set lr-option =
				concat(substring(lf-option3,1,str-len(lf-option3)),' Only')
			elseif lf-key3 = SPACES
				set lr-option =
				concat(substring(lf-option1,1,str-len(lf-option1)),' by ', lf-option2)
			elseif lf-key2 = SPACES
				set lr-option =
				concat(substring(lf-option1,1,str-len(lf-option1)),' by ', lf-option3)
			elseif lf-key1 = SPACES
				set lr-option =
				concat(substring(lf-option2,1,str-len(lf-option2)),' by ', lf-option3)
			else
				set lr-option =
				concat(substring(lf-option1,1,str-len(lf-option1)),
				' by ', substring(lf-option2,1,str-len(lf-option2)),' by ', lf-option3)
			endif
		endif
	endif
endprocedure //lookup-price-rule-description ---------------------------------

procedure calc-the-gp-percent
	parameters
			lp-line-cost					like sol-line-cost
			lp-line-amt						like sol-shipped-amount
			lp-line-tax						like sol-shipped-sales-tax-amt
			lp-line-tax-rate				like sol-tax-rate
	returning
			lr-gp							pic s999v99
			lr-gp-string					pic x(8)
	local field
			lf-total-local-amt				like sol-shipped-amount
			lf-total-foreign-amt			like sol-shipped-amount
			lf-total-cost					like sol-line-cost
	//
	set lf-total-cost = lp-line-cost
	set lf-total-local-amt = lp-line-amt
	//
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_LINE
		// Values inc-tax so delete tax
		set lf-total-local-amt -= lp-line-tax
	elseif so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
	and so-price-code in I5SOSTATII_RETAIL_ONLY
		// Calc. line GP for order level tax with retail pricing
		// based on ex-tax amount, using line tax rate as line tax
		// has not been calculated.
		set lf-total-local-amt /= ((100 + lp-line-tax-rate) / 100)
	endif
	//
	if sys-stax-incl-in-sales-files = YES
		set lf-total-cost += lp-line-tax
	endif
	//
	if so-curr-code not in {SPACES, sys-local-currency-code}
		set lf-total-foreign-amt = lf-total-local-amt
		do clibcurrency-convert-foreign-to-local
			parameters
				so-curr-code
				lf-total-foreign-amt
				so-curr-final-exchange-rate
			returning
				lf-total-local-amt
	endif
	//
	I8GETGP_PERCENT(lf-total-local-amt,lf-total-cost,2,lr-gp-string,lr-gp)
endprocedure //calc-the-gp-percent ---------------------------------------------

procedure check-for-extra-pricing-flags
	parameters are
			lp-save-sol-item-price			like sol-item-price
			lp-sol-item-price				like sol-item-price
			lp-save-unit-desc				like sol-stk-unit-desc
			lp-sol-stk-unit-desc			like sol-stk-unit-desc
	//
	if sys-so-use-of-extra-item-rate = 'F'
	and sol-line-type in {'SN' 'SS'}
	and (screenmode() = entry
		or (screenmode() = correct
			and ( lp-save-sol-item-price != lp-sol-item-price
				or lp-save-unit-desc != lp-sol-stk-unit-desc) ))
		//
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'UF' concat(dr-freight-code, sol-stk-unit-desc)
		on error
			get system-table
				on index sys-tbl-type sys-tbl-code
				key is 'UF' dr-freight-code
			on error
				get system-table
					on index sys-tbl-type sys-tbl-code
					key is 'UF' SPACES
				on error
					set sys-tbl-sales-mtd = ZERO
					set sys-tbl-sales-ly = ZERO
				endon
			endon
		endon
		//
		if sys-tbl-sales-mtd = ZERO
		and sys-tbl-sales-ly = ZERO
			// This item has no extra freight amount setup, so
			// don't ask if they want to add freight!
		else
			if ws-process-mode = EDIT
				// ask per line in edit!.
				do do-they-really-want-freight
			else
				// when in original entry mode, it has been asked for once
				// at the start of the order, however if they have said no
				// at the order level, then ask by line!
			endif
			if ws-charge-extra-item = 'Y'
				set ws-charge-extra-item = 'N'
				if sys-tbl-sales-mtd != ZERO
					set sol-extra-item-rate = sys-tbl-sales-mtd
				elseif sys-tbl-sales-ly != ZERO
					if sol-stk-unit-conversion > 1
					and sol-price-overide-flag not in {I5SOSTATII_ALT_PRICE
							I5SOSTATII_ALT_OVER_PRICE}
						set sol-extra-item-rate = lp-sol-item-price
							* sol-stk-unit-conversion *
							sys-tbl-sales-ly / 100
					else
						set sol-extra-item-rate =
								lp-sol-item-price * sys-tbl-sales-ly / 100
					endif
				endif
			else
				// make sure it is turned off!
				set sol-extra-item-rate = 0
			endif
		endif
	endif
	//
	if sys-so-use-of-price-ref = 'S'
	and sol-line-type = 'SN'
	and sys-licence-type in { '4' '5'}
	and (screenmode() = entry
		or (screenmode() = correct
		and lp-save-sol-item-price != lp-sol-item-price)
		)
		//
		set sys-tbl-code = concat(substring(dr-pricing-category,1,2),
			substring(prc-discount-code,1,2))
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'L5' sys-tbl-code
		on error
			set sol-price-ref = ZERO
		else
			do get-liquor-subsidy-details
				parameters are
						lp-sol-item-price
		endon
	endif
endprocedure //check-for-extra-pricing-flags ---------------------------------

procedure get-liquor-subsidy-details
	parameters are
			lp-sol-item-price				like sol-item-price
	local field
		lf-no-subsidy					type boolean
		//
	//check that they have a valid license
	set lf-no-subsidy = TRUE
	extract deb-licences-and-permits
		on index accountcode licence-code
		key is accountcode SPACES
		next same accountcode
	detail
		if licence-type = SPACES
			set lf-no-subsidy = FALSE
			break
		endif
	endextract
	if not lf-no-subsidy
		// NOTE: sol-price-ref is stored after multiply by 100 so the
		//		decimals can go to 4 decimal places
		if sys-tbl-sales-ly != ZERO
			set sol-price-ref =
				0 - ((lp-sol-item-price * sys-tbl-sales-ly / 100) * 100)
		else
			set sol-price-ref = ZERO
		endif
	else
		set sol-price-ref = ZERO
	endif
endprocedure //get-liquor-subsidy-details ------------------------------

procedure display-totals
	local field
		lf-tax-exemption-found				pic x
		lf-tax-exemption-code				like sote-tax-exemption-code
	//
	// redisplay customer details as these can change.
	// when if ws-other-option-selected = 'G'	//POS- get-cash-customer
	display so-cust-code @2,12 foreground data
	display shortname @3,12 foreground data pic x(26)
	//
	// There is an option in the 'Other options screen that allows the
	// user to change the tax no. so always redisplay it.
	do clibtaxso-get-sales-order-tax-exemption-for-display
		parameters
			so-order-no
			so-bo-suffix
		returning
			lf-tax-exemption-found
			lf-tax-exemption-code
	display lf-tax-exemption-code @3,50 pic x(10) right foreground data
	//
	display ws-total-pack-weight @2,76 pic z(5)9.999 foreground data
	display ws-total-no-of-normal-stk-lines @3,76 pic z(8)9 foreground data
	//
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
		and so-price-code not in I5SOSTATII_RETAIL_ONLY
	then
		display (ws-total-ordered-incl-charges + ws-total-ordered-tax) @3,96 pic s(10)9.99 foreground data
		display ws-total-ordered-incl-charges @4,96 pic s(10)9.99 foreground data
		display ws-total-shipped-incl-charges + ws-total-shipped-tax @3,111 pic s(10)9.99 foreground data
		display ws-total-shipped-incl-charges @4,111 pic s(10)9.99 foreground data
	else
		display ws-total-ordered-incl-charges @3,96 pic s(10)9.99 foreground data
		display (ws-total-ordered-incl-charges - ws-total-ordered-tax) @4,96 pic s(10)9.99 foreground data
		display ws-total-shipped-incl-charges @3,111 pic s(10)9.99 foreground data
		display (ws-total-shipped-incl-charges - ws-total-shipped-tax) @4,111 pic s(10)9.99 foreground data
	endif
	//
	if i50entry-show-costs not in { YES 'B' }
		set ws-total-ordered-gp-string = SPACES
		set ws-total-shipped-gp-string = SPACES
	endif
	display ws-total-ordered-tax @5,96 pic s(10)9.99 foreground data
	display ws-total-ordered-gp-string @6,96 foreground data pic x(14) right
	//
	display ws-total-shipped-tax @5,111 pic s(10)9.99 foreground data
	display ws-total-shipped-gp-string @6,111 foreground data pic x(14) right
endprocedure //display-totals --------------------------------------------------

// #defines used to help proscreen!
#define CLEAR_AND_REFRESH_BB_FIELDS				\
		INITIALISE_BB_FIELDS					\
		REFRESH_ALL_BB_FIELDS

#define INITIALISE_BB_FIELDS					\
	set lf-bb-stk-status-desc = SPACES			\
	set lf-bb-line-notes-exists = SPACES		\
	set lf-bb-sol-print-line = SPACES			\
	set lf-bb-stk-desc-1 = SPACES				\
	set lf-bb-stk-desc-2 = SPACES				\
	set lf-bb-stk-desc-3 = SPACES				\
	set lf-bb-stk-apn-number = SPACES			\
	set lf-bb-available-stk-text = SPACES		\
	set lf-bb-unit-of-available-stk = SPACES	\
	set lf-bb-supplier-code = SPACES			\
	set lf-bb-supplier-shortname = SPACES		\
	set lf-bb-sol-item-group = SPACES			\
	set lf-bb-pg-desc = SPACES					\
	set lf-bb-sol-chg-type = SPACES				\
	set lf-bb-sol-ordered-qty = ZERO			\
	set lf-bb-sol-ordered-sales-tax-amt = ZERO	\
	set lf-bb-sol-ordered-disc-amt = ZERO		\
	set lf-bb-sol-ordered-line-amt = ZERO				\
	set lf-bb-sol-shipped-qty = ZERO			\
	set lf-bb-sol-shipped-sales-tax-amt = ZERO	\
	set lf-bb-sol-shipped-discount-amt = ZERO	\
	set lf-bb-sol-shipped-amount = ZERO			\
	set lf-bb-sol-backorder-qty = ZERO			\
	set lf-bb-sol-backorder-sales-tax-amt = ZERO\
	set lf-bb-sol-backorder-discount-amt = ZERO	\
	set lf-bb-sol-backorder-amount = ZERO		\
	set lf-bb-sol-stk-unit-desc = SPACES		\
	set lf-bb-sol-item-price = ZERO				\
	set lf-bb-price-uom-desc = SPACES			\
	set lf-bb-stk-pack-qty = ZERO				\
	set lf-bb-sol-stk-unit-conversion = ZERO	\
	set lf-bb-sol-price-uom = ZERO				\
	set lf-bb-sol-disc-rate = ZERO				\
	set lf-bb-solt-tax-code = '0'				\
	set lf-bb-sol-tax-rate = ZERO				\
	set lf-bb-sol-item-wholesale-price = ZERO	\
	set lf-bb-option = SPACES					\
	set lf-bb-sol-item-cost-string = SPACES		\
	set lf-bb-sol-ordered-cost-string = SPACES	\
	set lf-bb-sol-shipped-cost-string = SPACES	\
	set lf-bb-shipped-gp-string = SPACES		\
	set lf-bb-extra-line-info = SPACES

#define REFRESH_ALL_BB_FIELDS						\
	refresh lf-bb-stk-status-desc					\
	refresh lf-bb-line-notes-exists					\
	refresh lf-bb-sol-print-line					\
	refresh lf-bb-stk-desc-1						\
	refresh lf-bb-stk-desc-2						\
	refresh lf-bb-stk-desc-3						\
	refresh lf-bb-stk-apn-number					\
	refresh lf-bb-available-stk						\
	refresh lf-bb-unit-of-available-stk				\
	refresh lf-bb-supplier-code						\
	refresh lf-bb-sol-item-group					\
	refresh lf-bb-sol-chg-type						\
	refresh lf-bb-sol-ordered-qty					\
	refresh lf-bb-sol-ordered-sales-tax-amt			\
	refresh lf-bb-sol-ordered-disc-amt				\
	refresh lf-bb-sol-ordered-line-amt						\
	refresh lf-bb-sol-shipped-qty					\
	refresh lf-bb-sol-shipped-sales-tax-amt			\
	refresh lf-bb-sol-shipped-discount-amt			\
	refresh lf-bb-sol-shipped-amount				\
	refresh lf-bb-sol-backorder-qty					\
	refresh lf-bb-sol-backorder-sales-tax-amt		\
	refresh lf-bb-sol-backorder-discount-amt		\
	refresh lf-bb-sol-backorder-amount				\
	refresh lf-bb-sol-stk-unit-desc					\
	refresh lf-bb-sol-item-price					\
	refresh lf-bb-price-uom-desc					\
	refresh lf-bb-stk-pack-qty						\
	refresh lf-bb-sol-stk-unit-conversion			\
	refresh lf-bb-sol-price-uom						\
	refresh lf-bb-sol-disc-rate						\
	refresh lf-bb-solt-tax-code						\
	refresh lf-bb-sol-tax-rate						\
	refresh lf-bb-sol-item-wholesale-price			\
	refresh lf-bb-option							\
	refresh lf-bb-sol-item-cost-string				\
	refresh lf-bb-sol-ordered-cost-string			\
	refresh lf-bb-sol-shipped-cost-string			\
	refresh lf-bb-shipped-gp-string					\
	refresh lf-bb-extra-line-info

#define DISPLAY_AVAIL_STK_AND_STK_DESC					\
		do get-line-desc								\
			returning lf-bb-stk-status-desc				\
		refresh lf-bb-stk-status-desc					\
		do get-avail-stk-and-stk-description			\
			returning	lf-bb-available-stk				\
						lf-bb-available-stk-text		\
						lf-bb-unit-of-available-stk		\
						lf-bb-stk-desc-1				\
						lf-bb-stk-desc-2				\
						lf-bb-stk-desc-3				\
						lf-bb-stk-apn-number			\
			refresh	lf-bb-available-stk					\
			refresh	lf-bb-unit-of-available-stk			\
			refresh	lf-bb-stk-desc-1					\
			refresh	lf-bb-stk-desc-2					\
			refresh	lf-bb-stk-desc-3					\
			refresh	lf-bb-stk-apn-number

screen a300-get-order-lines
//
//	A- Amount	C- Confirm		D- Description		L- Line seq #	 N- Note
//	P- Price	Q- Qty			S- Item code		T- Text			 U- UOM
//	U1- Per		W- Whse 		X- Tax code			Z- Discount
//
//SN - Normal line	- entered only by the datagrid.
//					- corrected only in screen maintain-normal-line
//SS - Special line - entered only in screen maintain-special-line
//					- corrected only in screen maintain-special-line
//DN - Note line	- entered and corrected in separate screen.
//SC - Charge line	- entered and corrected in maintain-charge-line
//
local field
		lf-install-link-found				type boolean
		lf-reenter-needed					pic x(13)
		lf-reenter-message					pic x(12)
		lf-reenter-optional					type boolean
		lf-reenter							type boolean
		lf-action							pic x
		lf-voucher-ok						type boolean
		lf-counter							type boolean
		lf-field-ok							type boolean
		lf-tally-qty						like sol-shipped-qty
		lf-saved-qty						like str-ordered-qty
		lf-saved-sol-line-seq				like sol-line-seq
		lf-next-sol-line-seq				like sol-line-seq
		lf-ok-to-continue					type boolean
		lf-ok								type boolean
		lf-kits-ordered						like sol-ordered-qty
		lf-kits-shipped						like sol-shipped-qty
		lf-kits-backorder					like sol-backorder-qty
		lf-original-avail-stk				like ws-available-stk
		lf-available-stk					like ws-available-stk
		lf-adjust-qty						type boolean
		lf-shipped-diff						like sol-shipped-qty
		lf-backorder-diff					like sol-backorder-qty
		lf-adj-bom							pic s9(9)v9(8)
		lf-pricing-desc						pic x(10)
		lf-currency-amt-total				pic x(16)
		lf-ex-tax-amount					like sol-line-amount
		lf-total-value-title				pic x(20)
		lf-avail-dedicated					like whse-qty-on-hand
		lf-zero-price-ok					type boolean
		lf-price-uom-desc					pic x(4)
		lf-sol-line-description				like sol-line-description
		lf-sol-whse-code					like sol-whse-code
		lf-recalc-item-price				pic x
		lf-no-of-note-lines-added			pic 9(6)
		lf-line-completed-ok				type boolean
		lf-rms-multi-discount				pic x(5)
		lf-trade-disc-entered				type boolean
		lf-ok-to-recalc-and-refresh			type boolean
		lf-promo-exists						type boolean
		lf-off-invoice						type boolean
		lf-cost-to-use						like whse-cost-to-use-flag
		//
		// fields for the bottom display box
		lf-bb-sol-item-cost-string			like str-item-price
		lf-bb-sol-ordered-cost-string		like str-item-price
		lf-bb-sol-shipped-cost-string		like str-item-price
		lf-bb-pg-desc						like sys-description
		lf-bb-stk-pack-qty					like stk-pack-qty
		lf-bb-price-uom-desc				like sol-stk-unit-desc
		lf-bb-sol-ordered-qty				like sol-ordered-qty
		lf-bb-sol-ordered-sales-tax-amt		like sol-ordered-sales-tax-amt
		lf-bb-sol-ordered-disc-amt			like sol-ordered-disc-amt
		lf-bb-sol-ordered-line-amt			like sol-line-amount
		lf-bb-sol-shipped-qty				like sol-shipped-qty
		lf-bb-sol-shipped-sales-tax-amt		like sol-shipped-sales-tax-amt
		lf-bb-sol-shipped-discount-amt		like sol-shipped-discount-amt
		lf-bb-sol-shipped-amount			like sol-shipped-amount
		lf-bb-sol-backorder-qty				like sol-backorder-qty
		lf-bb-sol-backorder-sales-tax-amt	like sol-shipped-sales-tax-amt
		lf-bb-sol-backorder-discount-amt	like sol-shipped-discount-amt
		lf-bb-sol-backorder-amount			like sol-shipped-amount
		lf-bb-sol-stk-unit-desc				like sol-stk-unit-desc
		lf-bb-sol-item-price				like sol-item-price
		lf-bb-sol-stk-unit-conversion		like sol-stk-unit-conversion
		lf-bb-sol-price-uom					like sol-price-uom
		lf-bb-sol-disc-rate					like sol-disc-rate
		lf-bb-solt-tax-code					like solt-tax-code
		lf-bb-sol-tax-rate					like sol-tax-rate
		lf-bb-sol-item-wholesale-price		like sol-item-wholesale-price
		lf-bb-option						pic x(30)
		lf-bb-line-notes-exists				pic x
		lf-bb-sol-chg-type					pic x(10)
		lf-bb-sol-item-group				like sol-item-group
		lf-bb-supplier-code					like cre-accountcode
		lf-bb-supplier-shortname			like cr-shortname
		lf-bb-sol-print-line				like sol-print-line
		lf-bb-stk-status-desc 				pic x(15)
		lf-bb-available-stk					like whse-qty-on-hand
		lf-bb-available-stk-text			pic x(14)
		lf-bb-unit-of-available-stk			like sol-stk-unit-desc
		lf-bb-stk-desc-1					like sol-line-description
		lf-bb-stk-desc-2					like stk-desc-line-2
		lf-bb-stk-desc-3					like stk-desc-line-3
		lf-bb-stk-apn-number				like stk-apn-number
		lf-bb-shipped-gp-string				pic x(8)
		lf-bb-extra-line-info				like sol-line-description
		lf-saved-item-cost					like sol-item-cost
		lf-str-shipped-qty					pic x(10) type string
		lf-ex-tax-shipped-amount			like sol-shipped-amount
		lf-sol-found						type boolean
		lf-stk-qty-pic						pic x(10)
		lf-rounding							pic 99v9(5)
		lf-decimals							like sys-default-no-of-decimals
		lf-solt-record-changed				pic x
		lf-promo-discount-void-allowed		type boolean
		lf-found-stk-price					type boolean
		lf-comp-found						type boolean
		lf-valid-stock-code					type boolean
		lf-show-discount-rounding			type boolean
		lf-depreciation-code				like adrd-depreciation-code
		lf-location-code					like am-location-code
		lf-asset-group						like am-group
		lf-location-text					pic x(8) type string
		lf-group-text						pic x(8) type string
		lf-depreciation-text				pic x(8) type string
		lf-kit-price-override-falg 			type boolean
		lf-amount							like sol-item-price
		lf-amount-per						like sol-item-price
		lf-start-scs-seq-no					like sol-line-seq
		lf-end-scs-seq-no					like sol-line-seq
		lf-lines-alt-kit					like stock-code
		lf-preallocated-qty					like sol-shipped-qty
		lf-grid-order-title					pic x(20) type string
		lf-grid-ship-title					pic x(20) type string
		lf-line-total-title					pic x(20) type string
		lf-show-ex-tax						type boolean
		lf-exit								type boolean
		lf-ok-proceed						type boolean
		lf-new-line-seq						like sol-line-seq
	//
	window @1,1 to @31,124
		title is ws-title
	help-context 'index_CSH.htm' 90473
	//
	select
		*
		ws-accept-stk-code = stock-code
		str-item-price = fstr(sol-item-price,14,4)
		str-ordered-qty = str(sol-ordered-qty)
		lf-ex-tax-amount = sol-line-amount - sol-ordered-sales-tax-amt
	from
		 sales-order-line
	where
		(so-order-no = :so-order-no
		and so-bo-suffix = :so-bo-suffix)
		and
			( ws-show-kit-components != 'N'			// show all lines
			or ( ws-show-kit-components  = 'N'		// Don't show component lines
			and not ( ( sol-line-type = 'SN' and sol-chg-type = 'D' )	// defines a component line
			or ( sol-line-type = 'DN' and sol-chg-type = 'T' ) )  ) )
		and (stock-code not in I5SOSTATII_ROUNDING_STK_ITEMS
		or (stock-code = DISC_STK_CODE
		and lf-show-discount-rounding))
	for update
	datagrid occurs 9
	review-from-current
	//
	allowed find next prev next-scr prev-scr find-stk correct entry
		md-detail-entry remove md-serial order-conclusion md-kit-options
		md-enter-proform-details md-discount-mod md-line-notes md-atp md-other md-wp-ed
		md-tax-details md-job-cbs md-bulk-cbs
		md-public-mode
		md-container-details											//1.01
before
	get sales-order current lock
	on error ELOCKED
		message "Problem locking sales order " so-order-no so-bo-suffix
		exit
	endon
	//
	if i50entry-show-costs = YES
		set ws-item-costs-prompt = 'Item Cost:'
		set ws-ordered-costs-prompt = 'Order Cost:'
		set ws-shipped-costs-prompt = 'Ship Cost:'
		set ws-gp-prompt = 'Order GP%:'
	else
		set ws-item-costs-prompt = SPACES
		set ws-ordered-costs-prompt = SPACES
		set ws-shipped-costs-prompt = SPACES
		set ws-gp-prompt = SPACES
	endif
	//
	set ws-so-date-stamp-to-be-updated = NO
	set ws-find-stk = SPACES
	set ws-consys-stock-code = SPACES
	//
	set ws-so-order-total-shipped-amount = ZERO
	set	ws-so-order-total-charges = ZERO
	set	ws-so-order-packages = ZERO
	set ws-last-promo-so-order-no = ZERO
	set ws-last-promo-alert-message = SPACES
	set ws-last-so-date-stamp = ZERO
	set ws-last-so-time-stamp = ZERO
	//
	if so-curr-code in {SPACES sys-local-currency-code}
		set ws-item-price-help = "Enter the sell price"
		set ws-line-amount-help = "Enter the total amount for this charge or tax item"
	else
		set ws-item-price-help = "Enter the sell price in foreign currency"
		set ws-line-amount-help = "Enter the total amount in foreign currency for this item"
	endif
	//
	if so-order-status = I5SO_BEING_ENTERED
		if i50entry-forward-order = YES
			set i5sodesc-so-status-desc = 'Forward Order'
		elseif so-order-type-code = I5SO_TYPE_PROFORMA
			set i5sodesc-so-status-desc = 'Proforma'
		elseif i50entry-quotation = YES
			set i5sodesc-so-status-desc = 'Quotation'
		elseif i50entry-sales-credit = YES
			set i5sodesc-so-status-desc = 'Credit Note'
		elseif i50entry-ship-on-consignment = YES
			set i5sodesc-so-status-desc = 'On Consignment'
		elseif i50entry-transfer-between-whse = YES
			set i5sodesc-so-status-desc = 'Whse Transfer'
		elseif i50entry-return-authorisation = YES
			set i5sodesc-so-status-desc = 'Return Auth.'
		else
			do i5sodesc-get-status-desc
		endif
	else
		do i5sodesc-get-status-desc
	endif
	box @1,1 to @7,60.5
		title 'Order Details'
	// customer details display in the procedure display-totals
	display "Customer:" @2,2
	display "    Name:" @3,2
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'WH' so-whse-code
	on error
		set sys-description = '*** Lost Warehouse Name ***'
	endon
	display so-whse-code @4,12 data
		title "    Whse:"
	display sys-description @4,17 pic x(21)
	display i5sodesc-so-status-desc @5,12 pic x(20) foreground bold prompt
		title "  Status:"
	//
	if so-price-code in I5SOSTATII_RETAIL_PRICE_CODES
		set lf-pricing-desc = 'Retail'
	elseif so-price-code = 'I'
		set lf-pricing-desc = 'Internal'
	else
		set lf-pricing-desc = 'W/Sale'
	endif
	display lf-pricing-desc @2,50 right data
		title 'Pricing :'
	display "Tax Ex No:" @3,39
	//
	box @1,61 to @7,86.5
		title 'Order Totals'
	display "Pack Weight :" @2,62
	display "No. of items:" @3,62
	if so-curr-code in {SPACES sys-local-currency-code}
		set ws-box-currency-title = translate 'Line Values in Local'
		set lf-total-value-title =  translate 'Totals in Local'
		set ws-box-currency-pricing = 'Pricing'
		set lf-currency-amt-total = 'Tax'
	else
		set ws-box-currency-title = concat(translate 'Line Values in ', so-curr-code)
		set lf-total-value-title = concat (translate 'Totals in ', so-curr-code)
		set ws-box-currency-pricing = concat('Pricing (',strconcat(so-curr-code),')' )
		set lf-currency-amt-total = concat('Tax(',strconcat(so-curr-code),')' )
	endif
	box @1,87 to @7,126
		title lf-total-value-title
	display "Order" @2,96 pic x(14) right bold
	display "Ship" @2,111 pic x(14) right bold
	display if-then-else(so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER,
				'  Total:','Inc Tax:') @3,87
	display " Ex Tax:" @4,87
	display ws-tax-prompt @5,87 pic x(8) right
	display substring(ws-gp-prompt,7,10) @6,87 pic x(8) right
	//
	do determine-line-tax-display
		returning
			lf-grid-order-title
			lf-grid-ship-title
			lf-line-total-title
			lf-show-ex-tax
	//
	// ======================================================
	// Start display the box at the bottom of the screen
	// ======================================================
	box @18,1 to @24,95
		title 'Line Details'
	//
	box @24.6,1 to @30,65.5
		title ws-box-currency-title
	display "Quantity" @26,9 pic x(14) right bold
	display "Tax" @26,23 pic x(14) right bold
	display "Discount" @26,37 pic x(14) right bold
	display lf-line-total-title @26,51 pic x(14) right bold
	//
	box @24.6,66 to @30,95
		title ws-box-currency-cost
	//
	box @18,95.5 to @30,126
		title ws-box-currency-pricing
	// ======================================================
	// End display the box at the bottom of the screen
	// ======================================================
	//
	set i50lines-cal-display-totals = START_OF_LINES_AND_CHG_SEQ
	do b300-calc-total-amounts-update-header
	do display-totals
	set i5soldisc-trade-disc = 0
	set i5soldisc-general-disc-rate = 0
	set i5soldisc-cgd-cust-rate = 0
	set i5soldisc-cgd-cust-code-flag = FALSE
	if sys-cgd-flg in {YES 'M' 'L' 'S' 'T' 'U' 'X' 'Z' '1' '2' '3' '4'}
		get cust-group-disc
			key is i5soldisc-acnt-to-use-for-cgd '****' SPACES
		on error //Not Used - Leave flag as is
		else
			set i5soldisc-cgd-cust-code-flag = TRUE
			set i5soldisc-cgd-cust-rate = cgd-disc-value
				//Plus other two for 'U'
				+ cgd-disc-value2
				+ cgd-disc-value3
				+ cgd-disc-value4
		endon
	endif
	//
	if ws-process-mode = ENTRY
	and sys-cgd-flg = 'T'
	and not lf-trade-disc-entered
		// Procedure needs to be here so that discount can be
		// set prior and then applied to proforma orders etc.
		do ask-for-trade-discount entry once
		set lf-trade-disc-entered = TRUE
	else
		set i5soldisc-trade-disc = 0
	endif
	accept i5soldisc-trade-disc suppress
		read-only
		default i5soldisc-trade-disc
		title 'Trade Disc:'
		when i5soldisc-trade-disc != 0
	//
	if screenmode() in {show}
		// Do not position record
	else
		position stock-warehouse-detail
			on index whse-code stock-code
			key so-whse-code SPACES
		set ws-first-read-on-whse-file = TRUE
	endif
	//
	if ws-process-mode = ENTRY
	and sys-so-initial-line-mode in { 'A' 'Z' }
	and ws-itiated-special-z = FALSE
		set ws-itiated-special-z = TRUE
		if pattern(ws-special-ordent-program,'so/m50consys') > 0
			if sol-line-seq = ZERO
			and ws-line-seq <> ZERO
				set sol-line-seq = ws-line-seq
			endif
			spl ws-special-ordent-program
				parameters
					str(so-order-no)
					so-bo-suffix
					sol-line-seq
					substring(ws-special-param,1,1)
					substring(ws-special-param,2,2)
					ws-order-type
					SPACE
					'SO'	// document type
				returning ws-consys-stock-code
					sol-line-seq
			on error
				message "Can't find " ws-special-ordent-program
				set reenter-needed = 1
			endon
		else
			do public-z-allow-entry-of-a-line
					parameter
						sales-order.*
						sol-line-seq
						ws-order-type
					returning
						lf-ok-to-continue
		endif
		//
		set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
		do b300-calc-total-amounts-update-header
		do display-totals
		//
	elseif ws-process-mode = ENTRY
	and sys-proforma-style in { '1' '2' }
	and ws-proforma-order-no != 0	 // there is a proforma order
	and not ws-proforma-first-time-through
	and not i50lines-contracts-used
		set ws-proforma-first-time-through = TRUE
		set i5linecalc-dont-zero-disc = TRUE
		do setup-select-of-proforma-lines
		position sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix ZERO
		set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
		do b300-calc-total-amounts-update-header
		do display-totals
	endif
	//
	set i50lines-scanned-item = FALSE
	set ws-correct-po = FALSE
	do i50cusnote-check-notes-exist
	//
	if sys-service-used <> NO
		do check-for-install-link
			parameters are str(so-order-no)
			returning lf-install-link-found
	endif
	//
	if sys-so-use-of-extra-item-rate = 'F'
	and ws-process-mode = ENTRY
	and not ws-freight-question-asked
		do public-freight-pre-check
			parameters
				sales-order-line.*
				ws-freight-question-asked
				ws-charge-extra-item
			returning
				ws-freight-question-asked
				ws-charge-extra-item
				lf-ok-proceed
		if lf-ok-proceed
			do do-they-really-want-freight
		endif
	endif
	//
	if ws-process-mode = ENTRY
		if sys-so-initial-line-mode in { 'A' 'Z' }
		and ws-itiated-special-z = FALSE
			refresh review
		elseif i50lines-whse-type = IWTYPEDEF_VAN_WHSE
		and ws-van-id = SPACES
		and i50entry-sales-credit != YES
			do get-location-up-front entry once
				returning  ws-van-id
		endif
	endif
	set ws-note-type = SPACES
	set ws-note-N = 'QT'
	set ws-memo-M = 'QX'
	set ws-select-note-text-D = 'QX'
	set ws-select-note-term-W = 'QT'
	do public-set-note-line-lookup-tables
		parameters
			ws-note-N
			ws-memo-M
			ws-select-note-text-D
			ws-select-note-term-W
		returning
			ws-note-N
			ws-memo-M
			ws-select-note-text-D
			ws-select-note-term-W
	do public-show-discount-rounding
		returning
			lf-show-discount-rounding
	//
	if so-order-type-code = I5SO_TYPE_ASSET_CAPITAL
	and so-price-code <> "I"
		// for asset capital,it must be "I" else posting is incorrect
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is so-order-no so-bo-suffix
		set so-price-code = "I"
		update sales-order
	endif
	set i5pricemod-price-flag-override = FALSE
detail
	set i50entry-old-update-whse = SPACES
	if sol-line-type in { 'SN','KN','WN','RR' }
	and screenmode() not in { entry md-detail-entry }
		get stock-master
			on index stock-code
		on error
			set stk-stock-status = 'S'
			set lf-valid-stock-code = FALSE
		else
			set lf-valid-stock-code = TRUE
		endon
	else
		// need to initialise stock-master values!
		initialise stock-master leaving stock-code
		get stock-master lookup
			on index stock-code
			key is stock-code
		on error ENOREC
			set lf-valid-stock-code = FALSE
		else
			set lf-valid-stock-code = TRUE
		endon
	endif
	if lf-valid-stock-code
		do i4getprice-get-stock-price-record
			parameter stock-code so-whse-code so-cust-type
			returning lf-found-stk-price
						prc-region-code
		if not lf-found-stk-price and stock-code <> SPACES
			initialise stock-price leaving
				stock-code prc-region-code
		endif
	endif
	// this field used to determine if other whses selected!!!
	set i50lines-other-whses-selected = NO
	//
	set i50lines-qty-screen-displayed = FALSE
	//
	if screenmode() in {entry md-detail-entry}
		do commit-auto-transaction
		//NOTE: This hook is only avail. for entry mode only.
		//It returns a ok flag indicate if ok to preform with the entry mode.
		do public-allow-pre-line-entry
			parameter
				sales-order.*
				sol-line-seq
			returning
				lf-ok
		if not lf-ok
			continue
		endif
	endif
	//
	if screenmode() = remove
		// Allow additional condition check before line removal,
		// e.g. any promotion discount assoicated with the line.
		do commit-auto-transaction
		//
		do public-allow-pre-line-remove
			parameter
				sales-order.*
				sol-line-seq
			returning
				lf-ok
		if not lf-ok
			continue
		endif
	endif
	//
	if so-order-source = I5SOURCE_LAUNDRY_RENTAL
	and screenmode() != search
		message "WARNING: Laundry Rental order.  Best to maintain it via Rental Contract"
		continue
	elseif sol-line-type = 'SW'
	and screenmode() in { correct entry md-detail-entry remove md-serial md-kit-options
						  md-enter-proform-details md-discount-mod md-atp md-other }
		message "SW lines (Warranty system) can not be maintained"
		continue
	elseif sol-line-type = 'DN'
	and screenmode() in {correct remove}
	and sol-chg-type in {'A' 'O'}
		message 'Tally note lines cannot be maintained. Use the stock line above'
		continue
	elseif sol-line-type = 'SS'
		if sol-disc-rule = PROMOTION_DISCOUNT
		and screenmode() in {correct remove md-discount-mod}
			if (sol-line-amount > ZERO or
			so-order-status in I5SOSTATII_SO_CREDIT_NOTE_STATII )
			and screenmode() = remove
				//refund
				do tlibpromo-public-determine-refund-promo-discount-removal
					parameter
						deb-master.*
						sales-order.*
						sales-order-line.*
						so-rep-code				//ws-operator in POS
						so-whse-code			//cd-store-id in POS
						ZERO					//cd-terminal in POS
						ZERO					//ws-orig-order-no in POS
						SPACES					//ws-orig-bo-suffix in POS
					returning
						lf-promo-discount-void-allowed
			else
				set lf-promo-discount-void-allowed = FALSE
			endif
			//
			if not lf-promo-discount-void-allowed
			and screenmode() = remove
				if so-bo-suffix != SPACES
					message 'Promotion Discount Line cannot be removed from suffix order.' pause
					continue
				endif
				get sales-order-line-promo
					on index solpr-order-no solpr-order-suffix solpr-record-type
						solpr-discount-line-seq solpr-sol-line-seq solpr-promo-id solpr-promo-element
					key is so-order-no so-bo-suffix 'P' sol-line-seq
				on error ENOREC
				else
					message-box param-text("The promotion <<P1>> : <<P2>> will be removed from this order.<<BR>>Do you want to continue?",solpr-promo-id,solpr-promo-element)
						title "Remove promotion from order"
						message-buttons MSG_BOX_YES_NO
						default MSG_BOX_YES
						icon MSG_BOX_QUESTION
						tag 3
					if message-status() != MSG_BOX_YES
						//They did not pick continue
						continue
					endif
					get sales-order-promo-exclude
						on index so-order-no so-bo-suffix ph-promo-id pl-promo-element
						key is so-order-no so-bo-suffix solpr-promo-id solpr-promo-element
					on error ENOREC
						insert sales-order-promo-exclude
						//Go through the coupons attached to this order
						select * from promo-coupon-order
							where prcpo-order-no = :so-order-no
							and prcpo-bo-suffix = :so-bo-suffix
							for update
						detail
							get promo-coupon
								on index ph-promo-id pl-promo-element prcp-coupon-code
								key ph-promo-id pl-promo-element prcpo-coupon-code
							on error ENOREC
							else
								//The coupon code is for the removing promotion.
								//Remove linked coupon order records
								delete promo-coupon-order
							endon
						endselect
						//
						// Force promotion to be re-run for the whole order. This will set the promo ignore flag on temp file for the removed promotion.
						do tlibpromo-set-force-rerun
							parameter TRUE
						do tlibpromo-reset-and-preload
							parameter
								sales-order.*
								sales-order.*
								TRIGGER_AFTER_INSERT
						do b300-calc-total-amounts-update-header
						do display-totals
						set ordlog-type = I8OLOG_REMOVAL_OF_ORDER_LINE
						set ordlog-old-info = strconcat("Promo: ",solpr-promo-id,"-",solpr-promo-element)
						set ordlog-new-info = SPACES
						set ordlog-old-value = ZERO
						set ordlog-new-value = ZERO
						set ordlog-change-value = ZERO
						set ordlog-ordered-change-value = ZERO
						set ordlog-ordered-tax-chg-value = ZERO
						set ordlog-item-wholesale-price = ZERO
						set ordlog-line-type = sol-line-type
						set ordlog-disc-rate = ZERO
						do a9000-write-audit-file
						continue // SS line will also be removed from the promo engine once it set to be ignored - no need to continue deleting here
					endon
				endon
			elseif screenmode() = correct
				//these lines are inserted by tlibpromo (Promotion Engine)
				message 'Promotion Discount Line cannot be maintained.' pause
				continue
			endif
		elseif stock-code = "DISCOUNT"
		and screenmode() = correct
			message 'Sales Order Discount Line cannot be maintained.' pause
			continue
		endif
	endif
	//
	set ws-old-item-wholesale-price = sol-item-wholesale-price
	set ws-entered-stock-code = stock-code
	//
	if ws-confirm not in { 'F' 'I'}
		set ws-confirm = YES
	endif
	if sys-price-disc-entered = "W"
	and sol-line-type not in {"SC" "SS" "SC" "DN" "ST"}
		set ws-confirm = "W"
	endif
	//
	if screenmode() = remove
	and so-order-status != I5SO_BEING_ENTERED
	and so-order-type-code = I5SO_TYPE_DIRECT_SHIP
	and sol-line-type in {'SN' 'SS'}
		message 'WARNING: Direct ship purchase order line must be reviewed'
	endif
	//
	if screenmode() = entry
		// no need to clear and refresh fields, peter does it!!
		INITIALISE_BB_FIELDS
		set ws-mode-type = 'E'
	elseif screenmode() = md-detail-entry
		set ws-mode-type = 'D'
	elseif screenmode() in {correct md-price}
		set ws-mode-type = 'C'
		do i50lines-save-the-order-line-values
	elseif screenmode() = remove
		set ws-mode-type = 'R'
	else
		set ws-mode-type = SPACES
	endif
	//
	if screenmode() in { remove correct }
		if sol-line-type in { 'SN' 'SS' 'DN' }
		and sol-chg-type in { 'V' 'U' }
			// must be a cut type manufacture and usage,
			// need to call the m50cut program.
			spl 'so/m50cut' parameters
				'-delete' str(so-order-no) so-bo-suffix
						str(integer(sol-line-seq))
			on error
			else
				set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
				do b300-calc-total-amounts-update-header
				do display-totals
				continue
			endon
		endif
	endif
	//
	if sol-line-type in {'WN' 'SN'}
	and stk-issue-control-code = 'A'
		if screenmode() = correct
		and sol-chg-type = 'A'
			set ws-saved-line-seq = sol-line-seq
			spl 'so/m50lengths' parameters are
				str(so-order-no) so-bo-suffix str(sol-line-seq)
				ws-order-type '-edit'
			on error
			endon
			get sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix ws-saved-line-seq
			on error
			else
				if sol-item-price = 0
				and so-order-type-code != I5SO_TYPE_TAX_ONLY
				and (i50entry-transfer-between-whse = NO
					or (i50entry-transfer-between-whse = YES
					and sys-charge-for-inter-transfers in
						{ 'P' 'O' 'D' 'C' '1' '2' '3' '4' } ))//allow price
					do i50lines-check-zero-price
						parameters are sol-item-price TRUE
						returning lf-zero-price-ok
					if not lf-zero-price-ok
						message-box 'WARNING: Item price is zero'
							title 'Zero Price'
							message-buttons MSG_BOX_OK
							icon is MSG_BOX_WARNING
							optional tag 4
					endif
				else
					//Delete zero price note if exists
					do i50lines-delete-zero-price-note
				endif
			endon
			//
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
			reselect
			refresh review
			continue
		elseif screenmode() = remove
			set ws-saved-line-seq = sol-line-seq
			spl 'so/m50lengths' parameters are
				str(so-order-no) so-bo-suffix str(sol-line-seq)
				ws-order-type '-remove'
			on error
			endon
			//
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
			if stk-serialized-flag = 'L'
				// Delete sales picking location and assoicated stock-fifo-
				// location records.
				spl "so/m5serial" parameters are "-lot"
					so-order-no so-bo-suffix
					ws-saved-line-seq i50entry-sales-credit
					'notused' 'R'
					stock-code	// 8th parameter
			endif
			// Cancel any further processing as removal has already been
			// handled by m50lengths.spl specifically for array entry type item.
			continue
		endif
	endif
	//
	if screenmode() = remove
	and sol-line-type in { 'SN','KN'}
		get stock-master
		on error
			set stk-stock-status = 'Z'
		endon
		if sol-chg-type = 'D'
			message 'You can only delete the kit item, not the component code'
			continue
		endif
		get sales-order-line-purchase
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix sol-line-seq
		on error
			// ok to proceed
		else
			message 'This product is linked to purchase order'
			pause
		endon
		// Check for SO/WO link
		extract sales-order-work-link
			on index sowl-so-order-no sowl-so-bo-suffix sowl-sol-line-seq
				sowl-work-order sowl-wor-seq-no
			key is so-order-no SPACES ZERO SPACES ZERO
			next same sowl-so-order-no
			when sowl-sol-line-seq = sol-line-seq
		detail
			message 'This product is linked to work order' sowl-work-order
			pause
			//only need to find 1
			break
		endextract
	elseif screenmode() = correct
	and sol-line-type = 'KN'
	and stk-stock-status <> 'K'
	and sol-chg-type = 'M'
		//This was created via m50cut, .: cannot correct,
		// must remove and re-enter via m50cut
		message "Can't correct this type of kit, remove reenter via special entry m50cut"
		continue
	endif
	//
	if screenmode() in {correct md-price}
	and sol-line-type in {'SS' 'SN'}
		// This is used as a comparison to confirm a price change has occured.
		set i50entry-sol-item-price = sol-item-price
	endif
	//
	if screenmode() = correct
		set ws-saved-line-seq = sol-line-seq
		if sol-line-type = 'RR'
			message "You can not correct a rotable repair warehouse line item"
			continue
		endif
		if sol-line-type = 'SN'
		and sol-chg-type != 'D'		// ignore components
		and (i50entry-normal-order = YES
		or i50entry-forward-order = YES )
			get stock-master
			on error
				set stk-issue-control-code = SPACES
				set stk-packaging-flag = SPACES
				set stk-licences-rebate-flag = SPACES
				set stk-outside-supplier-flag = SPACES
				set stk-measurement-flag = SPACES
			endon
			if stk-licences-rebate-flag = 'L'
			and sys-licence-type = '1'			// chemical
				message "Can't correct a line that requires licence, to change remove and reenter "
				continue
			endif
		endif
	endif
	//
	if screenmode() in {md-detail-entry,entry,correct}
		set i5pricemod-price-conversion = 0
		set i5linecalc-dont-zero-disc = TRUE
	else
		set i5linecalc-dont-zero-disc = FALSE
	endif
	//
	if I5TENDTRK_GIFT_VOUCHER_PROD
	and screenmode() in {md-discount-mod md-other}
		message 'This facility not available for vouchers'
		continue
	elseif screenmode() in {md-detail-entry correct }
		if I5TENDTRK_GIFT_VOUCHER_PROD
			message 'Cannot correct a voucher. Please remove and reenter'
			continue
		elseif sol-line-type in {"DN" "SN" }
		and sol-chg-type in {"A" "O"}
			message "Cannot resequence tally lines"
			continue
		endif
	endif
	//
	if screenmode() in { entry, md-detail-entry }
		//
		// Saving off the 'next unique' line sequence for entry can get a
		// little hairy with the amount of functionality in lines - so lets
		// double check it, rather than risk a dup record error on entry.
		//
		if ws-line-seq = 0
			set ws-line-seq = 1.00
		endif
		do verify-next-unique-so-line-seq
			parameter ws-line-seq
			returning ws-line-seq
		if ws-line-seq > sol-line-seq
		or fraction(sol-line-seq)  // this resets line seq if note line removed.
			// Next proposed line already exists... so lets bump it up.
			set sol-line-seq = ws-line-seq
		endif
		//
		set ws-saved-line-seq = sol-line-seq	// save current position
		set ws-this-line = sol-line-seq
		set ws-scanned-qty = 0
	endif
	//
	accept sol-line-seq @8,2 pic z(2)9.zz
		help "This is a sequence number which determines the line position"
		show-value
		default ws-line-seq
		when screenmode() in { search, correct, md-detail-entry }
		lookup not in sales-order-line
			key is so-order-no so-bo-suffix sol-line-seq
		on error
			message 'Sequence number is already in use'
			reenter optional
		endon
	on left-arrow
		reenter optional
	endon
	on up-arrow
		reenter optional
	endon
	on down-arrow
		reenter optional
	endon
	on right-arrow
		reenter optional
	endon
	validation
		if ws-saved-line-seq != sol-line-seq
		and screenmode() = correct
			// line-seq validation must compare old & new seq-no's before fire error messages.
			// otherwise error message will shoot every time we pass by.
			if ws-sopl-record-exists
				message 'Cannot change line seq no as a sales-order-picking-location record exists!'
				continue
			elseif sol-line-type = 'SN'
			and sol-chg-type = 'D'
				message "Cannot change the sequence number for components of a kit"
				continue
			elseif sol-line-type = 'DN'
			and sol-chg-type = 'T'
				message "Cannot change the sequence number for sub kits"
				continue
			endif
			//
			if sol-line-type = 'KN'
				//it's a kit so resequence it and it's components
				spl "so/m50seqline" parameters are '-kitseq' str(so-order-no)
					so-bo-suffix fstr(ws-saved-line-seq,4,2)
					fstr(sol-line-seq,4,2)
					so-bo-suffix
				get sales-order-line last
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix
				set ws-line-seq = sol-line-seq + 1
				refresh review
				continue
			elseif sol-line-type = 'SN'
			and I5PIECES_PRODUCT
			and fraction(sol-line-seq) != ZERO
				message-box "The sequence number of tally item cannot contain decimal place"
					title "Enter Sequence Number"
					message-buttons MSG_BOX_OK
					icon MSG_BOX_WARNING
					tag 120
				reenter optional
			else
				do i50lines-check-we-arenot-splitting-kit
				if sol-line-seq >= ws-line-seq
					set ws-line-seq = integer(sol-line-seq) + 1
				endif
				if I5PIECES_PRODUCT
					//Re-sequence tally detail lines and tally note lines
					push sales-order-line
					set lf-new-line-seq = sol-line-seq
					transaction begin
					select *
						from sales-order-line-extra-detail
						where so-order-no = :so-order-no
						and so-bo-suffix = :so-bo-suffix
						and soled-type = :stk-measurement-flag
						and sol-line-seq >= :ws-saved-line-seq
						and sol-line-seq < (:ws-saved-line-seq + 1)
						for-update
					detail
						set sol-line-seq = lf-new-line-seq + fraction(sol-line-seq)
						update sales-order-line-extra-detail
					endselect
					select *
						from sales-order-line
						where so-order-no = :so-order-no
						and so-bo-suffix = :so-bo-suffix
						and sol-line-seq between (:ws-saved-line-seq + 0.01)
										and (:ws-saved-line-seq + 0.99)
						for-update
					detail
						set sol-line-seq = lf-new-line-seq + fraction(sol-line-seq)
						update sales-order-line
					endselect
					transaction commit
					pop sales-order-line
				endif
				refresh review
				continue
			endif
		elseif screenmode() = md-detail-entry
		and ws-saved-line-seq != sol-line-seq
			//should test for position in between kit&components
			set ws-saved-line-seq = sol-line-seq
			set i50lines-kit-entry-mode = YES
			do i50lines-check-we-arenot-splitting-kit same
			if i50lines-kit-entry-mode = 'E'
				//error encountered
				set i50lines-kit-entry-mode = SPACES
				continue
			else
				set i50lines-kit-entry-mode = SPACES
				//everything is ok to just continue.
			endif
		endif
	endvalidation
	//
	if sol-print-line = "J"
	and screenmode() = correct
		do correct-job-lines
		do b300-calc-total-amounts-update-header
		do display-totals
	endif
	//
	if (ws-was-prev-line-a-note = YES
	and screenmode() in {entry,md-detail-entry})
		set stock-code = 'N'
		set ws-confirm = YES
	endif
	//
	if sys-so-use-of-price-ref = 'C'
	and i5pricemod-cus-type-prom-flag in { 'C' 'S' }
	and screenmode() in {entry md-detail-entry correct}
		if screenmode() = correct
			set ws-catalog-no = sol-price-ref * 100
		endif
		do accept-catalog-no
	endif
	//
	if ws-consys-stock-code <> SPACES
		set stock-code = ws-consys-stock-code
		set ws-consys-stock-code = SPACES
	endif
	set ws-original-code = SPACES
	//
	do determine-line-type-description
		parameters so-order-source sol-line-type stock-code sol-print-line
		returning ws-accept-stk-code
	//
	set i50lines-use-prior-sale-flag = FALSE
	set i50lines-use-prior-sale-disc-flag = FALSE
	accept ws-accept-stk-code @8,4
		help "Quit,Spec,Chgs,Notes,Tax,Bal,Instr,Addr,Ref,Kit,seriaL,E-Supp,Prc,?=HELP"
		title 'Item Code'
		default stock-code
		upper_case
		show-value
		when screenmode() in {entry,md-detail-entry}
		and not (BMSDEF_IS_ALTERNATE_ITEM)
	on up-arrow
		if screenmode() in {entry,md-detail-entry}
			set stock-code = ws-accept-stk-code
			set agol-whse-code = whse-code
			if ws-first-read-on-whse-file = true
				//Need this position here to handle situation where user
				//hasnt entered any lines first up and have spl'd somewhere
				set ws-first-read-on-whse-file = false
				position stock-warehouse-detail
					on index whse-code stock-code
					key so-whse-code stock-code
			endif
			get stock-warehouse-detail
				on index whse-code stock-code
				previous
			on error
				message 'At start of file'
			else
				if whse-code <> agol-whse-code
					message 'At start of file.'
					set whse-code = agol-whse-code
					get stock-warehouse-detail
						on index whse-code stock-code
						key is whse-code SPACES
					on error
					endon
				else
					get stock-master
						on index stock-code
						key is stock-code
					on error
					else
						set ws-accept-stk-code = stock-code
						refresh ws-accept-stk-code
						DISPLAY_AVAIL_STK_AND_STK_DESC
					endon
				endif
			endon
			reenter optional
		endif
	endon
	on down-arrow
		if screenmode() in { entry, md-detail-entry }
			set stock-code = ws-accept-stk-code
			if ws-first-read-on-whse-file = true
				//Need this position here to handle situation where user
				//hasnt entered any lines first up and have spl'd somewhere
				set ws-first-read-on-whse-file = false
				position stock-warehouse-detail
					on index whse-code stock-code
					key so-whse-code stock-code
			endif
			get stock-warehouse-detail
				on index whse-code stock-code
				next same whse-code
			on error
				message 'At end of file'
			else
				get stock-master
					on index stock-code
					key is stock-code
				on error
				else
					set ws-accept-stk-code = stock-code
					refresh ws-accept-stk-code
					DISPLAY_AVAIL_STK_AND_STK_DESC
				endon
			endon
			reenter optional
		endif
	endon
	on help-key
		set stock-code = ws-accept-stk-code
		if screenmode() in { entry, md-detail-entry }
			get stock-master
				on index stock-code
			on error
				initialise stock-master
					leaving stock-code
			endon
			if ws-catalog-no = ZERO
				set i50stkenq-order-flag = ws-order-flag
				set i50stkenq-mode-type = ws-mode-type
				do i50stk-stock-enquiry
			else
				do enquire-by-catalog
			endif
			if stock-code != SPACES
				set ws-accept-stk-code = stock-code
			endif
			get stock-warehouse-detail
				on index whse-code stock-code
				key so-whse-code ws-accept-stk-code
			on error
				initialise stock-warehouse-detail
					leaving stock-code whse-code
			endon
			DISPLAY_AVAIL_STK_AND_STK_DESC
			reenter optional
		endif
	endon
	validation
		set lf-saved-sol-line-seq = sol-line-seq
		if ws-accept-stk-code = '@'
			// been in blob editor, so just go back to accept stock-code
			do i50lines-maint-notes-via-blob-editor same
				returning lf-no-of-note-lines-added
			set ws-accept-stk-code = SPACES
			if lf-no-of-note-lines-added = 0
				if screenmode() = md-detail-entry
					set stock-code = SPACES
					reenter sol-line-seq
				else
					refresh sol-line-seq
					set stock-code = SPACES
					reenter optional
				endif
			elseif ws-line-seq > lf-saved-sol-line-seq
				// extract lines added
				refresh data
				set stock-code = SPACES
				continue-entry
			else
				refresh sol-line-seq
				set stock-code = SPACES
				reenter optional
			endif
		elseif ws-accept-stk-code != 'N' // not a note line!
			set ws-was-prev-line-a-note = NO
		endif
		do public-allow-entry-of-a-line
			parameter
				sales-order.*
				ws-accept-stk-code
				sol-line-seq
			returning
				lf-ok-to-recalc-and-refresh
		if lf-ok-to-recalc-and-refresh
			save sales-order-line
			do b300-calc-total-amounts-update-header
			do display-totals
			restore sales-order-line
			get sales-order-line
			on error
			endon
			//need to do a refresh
			//as a refresh review doesn't work
			refresh
			//
			refresh review
			continue-entry
		endif
		//
		do accept-stock same
		if sol-line-seq > lf-saved-sol-line-seq
		and ws-accept-stk-code <> "Y"
			// this means we probable entered order for item by size and colour
			set lf-next-sol-line-seq = sol-line-seq
			set lf-start-scs-seq-no = lf-saved-sol-line-seq
			set lf-end-scs-seq-no = lf-next-sol-line-seq
			if pattern(ws-special-ordent-program,"m50cut")
				set lf-saved-sol-line-seq += 0.01
			endif
			while lf-saved-sol-line-seq < lf-next-sol-line-seq
				position sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix lf-saved-sol-line-seq
				if pattern(ws-special-ordent-program,"m50cut")
					get sales-order-line
						on index so-order-no so-bo-suffix sol-line-seq
						next same so-order-no so-bo-suffix
					on error
						break
					else
						refresh data
					endon
				else
					get sales-order-line
					refresh review
				endif
				if pattern(ws-special-ordent-program,"m50cut")
					set lf-saved-sol-line-seq += 0.01
				else
					set lf-saved-sol-line-seq += 1
				endif
				get sales-order-line
				on error ENOREC, ENDOFFILE
					// No actual line inserted at the original line seq number
					// (may have used different seq. numbers  e.g. cutting
					// program uses 1.01, 1.02 etc)
					// Will just have to skip past this line..
				else
					refresh review
				endon
				set lf-saved-sol-line-seq += 1
			endwhile
			//
			// Check if selected SCS items have suggested alternatives
			if sys-so-companion-items = YES
				extract sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix	lf-start-scs-seq-no
					next same so-order-no so-bo-suffix
					when sol-line-seq < lf-end-scs-seq-no
				detail
					do check-alt-scs-items
						parameters
							sol-line-seq
							stock-code
				endextract
			endif
			//
			set sol-line-seq = lf-next-sol-line-seq
			continue-entry		// ie next entry is on a new line on review
		endif
		refresh ws-accept-stk-code
		if so-order-status = I5SO_ORDER_SUSPENDED
			set ws-del-hit = NO
			do check-for-van-whse
			exit
		endif
		// Values for reenter-needed
		// 0 - ok to continue
		// 1 - reenter of item code
		// 2 - exit, ie quit, finish etc
		// 3 - refresh sol-line-seq and reenter item code
		// 4 - do a   continue
		if reenter-needed = 1
			reenter optional
		elseif reenter-needed = 2
			do check-for-van-whse
			exit
		elseif reenter-needed = 3
			refresh sol-line-seq
			reenter optional
		elseif reenter-needed = 4
			continue
		else
			//just continue entering rest of sales order line
			DISPLAY_AVAIL_STK_AND_STK_DESC
		endif
		do i50stkenq-public-stk-check-procedure
			parameter is TRUE stock-code so-order-no so-bo-suffix
			returning lf-ok-to-continue
		if not lf-ok-to-continue
			reenter optional
		endif
		set ws-first-read-on-whse-file = false
		//
		// display more details in the bottom of the screen!
		do bb-get-print-line-and-chg-type
			returning	lf-bb-sol-print-line
						lf-bb-sol-chg-type
		refresh lf-bb-sol-print-line
		refresh lf-bb-sol-chg-type
		do bb-get-supplier-details
			returning	lf-bb-supplier-code
						lf-bb-supplier-shortname
		refresh lf-bb-supplier-code
		do bb-get-product-group-details
			returning	lf-bb-pg-desc
						lf-bb-sol-item-group
		refresh lf-bb-sol-item-group
		// end of bottom box displays!
		//
		do bb-get-cost-related-fields
			returning	lf-bb-sol-item-cost-string
						lf-bb-sol-ordered-cost-string
						lf-bb-sol-shipped-cost-string
						lf-bb-shipped-gp-string
		refresh lf-bb-sol-item-cost-string
		refresh lf-bb-sol-ordered-cost-string
		refresh lf-bb-sol-shipped-cost-string
		refresh lf-bb-shipped-gp-string
	endvalidation
	//
	if screenmode() in {entry md-detail-entry}
		if sol-line-type = 'SN'
		and stk-stock-status = 'K'
		and ws-mode-type = SPACES
			set ws-mode-type = 'E'
		endif
		set i50entry-stock-warehouse-locked = FALSE
		if sys-whse-detail-stream-update != YES
		and sol-line-type = "SN"
		and i50entry-sales-credit = NO
		and ws-orig-whse-bo-flag >= '2'
		and stk-stock-status = 'S'
		and sys-line-timeout not in {SPACES '0'}
			do i50strupd-lock-stock-warehouse-detail
				parameters stock-code so-whse-code
				returning i50entry-stock-warehouse-locked
			if not i50entry-stock-warehouse-locked
				message "Cannot lock stock warehouse detail "
					stock-code
					so-whse-code
					" (" file-status() ")"
				reenter ws-accept-stk-code optional
			else
				DISPLAY_AVAIL_STK_AND_STK_DESC
			endif
		endif
		//
		do determine-line-type-description
			parameters so-order-source sol-line-type stock-code sol-print-line
			returning ws-accept-stk-code
		refresh ws-accept-stk-code
		set ws-accept-stk-code = stock-code		// restore ws-accept-stk-code!
	endif
	//
	if I5TENDTRK_GIFT_VOUCHER_PROD
		if screenmode() = entry
			do i5tendtrk-update-voucher-sell
				parameters are stock-code so-order-no so-bo-suffix
									sol-line-seq 0 cd-store-id
				returning lf-voucher-ok
			if lf-voucher-ok
				set i50lines-scanned-item = TRUE
				set str-item-price = fstr(ttt-value,14,2)
				set sol-item-price = ttt-value
			else
				reenter ws-accept-stk-code optional
			endif
		endif
	endif
	//
	if screenmode() in {entry md-detail-entry correct}
		if sol-line-type = 'SN'
		and stk-outside-supplier-flag = 'O'
			do get-outside-supplier
		else
			set ws-out-supplier = SPACES
			set ws-group-start = ZERO
		endif
	endif
	//
	if sol-line-type = 'DN'
	or sol-line-type <> 'SC' and screen-mode() = md-price
	or sol-line-type = 'SN' and stk-stock-status = 'K' and screen-mode() = md-detail-entry
		//don't go into the box
	elseif screenmode() <> search
	and ( ws-mode-type in {'D','C'} or sol-line-type in { 'SC','SS','ST','RN','RS' } )
		if sol-chg-type <> 'D'	or
			(sol-chg-type = 'D' and sol-line-type = 'SC')
			if sol-line-type = 'SC'
				if screenmode = md-price
					do maintain-charge-line correct
						returning lf-line-completed-ok
				else
					do maintain-charge-line same
						returning lf-line-completed-ok
				endif
			elseif sol-line-type in { 'RN' 'RS' 'SN' 'WN' }
				if screenmode() = md-detail-entry
					set ws-no-change-on-disc-rate = FALSE
					do maintain-normal-line entry
						returning lf-line-completed-ok
				else
					do maintain-normal-line correct
						returning lf-line-completed-ok
				endif
			elseif sol-line-type = 'KN'
				do maintain-normal-line correct
					returning lf-line-completed-ok
			elseif sol-line-type = 'SS'
				do maintain-special-line same
					returning lf-line-completed-ok
			elseif sol-line-type = 'ST'
				do maintain-tax-line correct
					returning lf-line-completed-ok
			endif
			if not lf-line-completed-ok
				if screenmode() in { entry, md-detail-entry }
					refresh sol-line-seq
					reenter ws-accept-stk-code
				elseif screenmode() = correct
					//Had to make it a continue, because if they had
					//changed anything in the box,then hit delete &
					//then hit F4,then the changes made in the box
					//were updated. So do not use any refresh statements!
					continue
				endif
			else
				do determine-line-type-description
					parameters	so-order-source
								sol-line-type
								stock-code
								sol-print-line
					returning	ws-accept-stk-code
				refresh ws-accept-stk-code
			endif
		else
			// everything ok just go through rest of detail!
		endif
	endif
	//
	if screenmode() = entry
	and sol-line-type in { 'SN' 'SS' }
	and sol-disc-rate > 100 // handle the reject this item case
		message 'Item sale to this account not permitted(cgd>100)'
		set ws-accept-stk-code = stock-code
		reenter ws-accept-stk-code optional
	endif
	//
	set i50lines-price-conversion = 0
	if screenmode() = entry
		set str-ordered-qty = str(0)
		if i50lines-scanned-item
			do set-qty-to-one-and-update-line same
		endif
		set ws-scanned-qty = 0
	endif
	set ws-validation-required = FALSE
	set i50lines-ordered-qty-changed = FALSE
	do i50lines-format-str-ordered-qty
	set lf-saved-qty = str-ordered-qty
	if sol-line-type = 'DN'
	and num(str-ordered-qty) = 0
		set str-ordered-qty = SPACES
	endif
	//
	if screenmode() in { entry }
		// display item details in the bottom box!
		do bb-get-qty-related-fields
			returning	lf-bb-sol-ordered-qty
						lf-bb-sol-stk-unit-desc
						lf-bb-stk-pack-qty
						lf-bb-sol-stk-unit-conversion
						lf-bb-sol-price-uom
						lf-bb-sol-shipped-qty
						lf-bb-sol-backorder-qty
			refresh lf-bb-sol-ordered-qty
			refresh lf-bb-sol-stk-unit-desc
			refresh lf-bb-stk-pack-qty
			refresh lf-bb-sol-stk-unit-conversion
			refresh lf-bb-sol-price-uom
			refresh lf-bb-sol-shipped-qty
			refresh lf-bb-sol-backorder-qty
	endif
	//
	accept str-ordered-qty @8,6 right pic x(10)
		help "Order Qty,A-Alternate codes,P-Price enquiry,V-Available to promise (ATP),/-Alternate unit,\-Alternate unit & price,=-List and show alternate available stock"
		title 'Order Qty.'
		default str-ordered-qty
		uppercase
		when
			(
				(sol-line-type in { 'SN', 'KN', 'WN' }
				and not i50lines-scanned-item)
				and ( screenmode() in { entry, search }
					or ( screenmode() = md-price
						and i50lines-whse-type != IWTYPEDEF_DISTRIB_LOC_PICK
						and not (sol-line-type in {'SN' 'DN'}
						and sol-chg-type in { 'D' 'T'}) )
					or ( screen-mode = md-detail-entry
						and sol-line-type = 'SN' and stk-stock-status = 'K' )
					)
			)
			or
				// This forces the Qty field to be displayed but not accepted.
				( sol-line-type in { 'SS', 'RS', 'RR' } and screenmode() = search )
	time-out is i50lines-time-out
	on error
		if screenmode() in { entry, md-detail-entry }
			clear data
			refresh sol-line-seq
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			reenter ws-accept-stk-code
		else
			reenter str-ordered-qty
		endif
	endon
	before-accept
		if screenmode() in {md-detail-entry,entry}
			if I5PIECES_PRODUCT
				do i5pieces-get-tally-info
					parameters are stock-code stk-description
						stk-measurement-flag
					returning lf-field-ok lf-tally-qty
				if lf-field-ok
					set str-ordered-qty = str(lf-tally-qty)
				endif
			else
				do public-tally-item
					parameter
						stock-master.*
						sales-order-line.*
						ws-mode-type
					returning
						lf-field-ok
						lf-tally-qty
				if lf-field-ok
					set str-ordered-qty = str(lf-tally-qty)
				endif
			endif
		endif
	end-before-accept
	on help-key
		if ws-order-flag = CUSTOMER
			message 'Enter the quantity you wish to order'
		else
			//1.00 start [>
			if stock-code = "300000" and i50linec-calculate
				open tmp-stock-location temporary create
				on error
					open tmp-stock-location temporary create
					on error
						message 'cannot open temporary file'
					else
					endon
				else
				endon
				do insert-tmp-stock-location
				//message " line number 4284"//dineth
				do i50linec-lot-allocation
				refresh data
				re-enter optional
			else
			//1.00 end <]
				if ws-orig-whse-bo-flag in { "2" "3" }
				and sol-line-type != 'KN'
				and stk-stock-status != 'K'
					set i50lines-ordered-build-from-allocated = true
					do i50lines-stock-balance-and-select
					set i50lines-ordered-build-from-allocated = false
					if i50lines-used-whse-select-mode
						set str-ordered-qty = str(sol-ordered-qty)
						set ws-validation-required = TRUE
						set i50lines-ordered-qty-changed = TRUE
						refresh str-ordered-qty
					else
						reenter optional
					endif
				else
					do i50lines-stock-balance-and-select search ws-continue-mode
						md-lead-time next-scr-orders prev-scr-orders md-wo-po-switch md-atp-stock-quantities
					reenter optional
				endif
			endif																						//1.00
		endif
	endon
	validation
		//message " 4313 " num(str-ordered-qty) //dineth 
		//message " 4314 stock-code " stock-code //dineth
		//1.00 start [>
		if num(str-ordered-qty) = 0
			//if stock-code = "300000"//dineth
				//message "stock-code :" stock-code//dineth
			//else//dineth
				//message "stock-code inside the else:" stock-code//dineth
			//endif //dineth
			if stock-code = "300000"
			and i50linec-calculate
				//message " 4318 " //dineth 
				open tmp-stock-location temporary create
				on error
					open tmp-stock-location temporary create
					on error
						message 'cannot open temporary file'
					else
					endon
				else
				endon
				do insert-tmp-stock-location
				//message " line number 4327"//dineth
				do i50linec-lot-allocation
				refresh data
				re-enter optional
			endif
			//message "4335 : end of the if"//dineth
		endif
		//1.00 end <]

		if integer(num(str-ordered-qty)) > max-value(sol-ordered-qty)
			message 'WARNING. Qty exceeds maximum allowed ' max-value(sol-ordered-qty) pause
			reenter optional
		endif

		//message "4344 :"//dineth
		if lf-saved-qty = str-ordered-qty
		and screenmode() = md-price
			//No checking, as qty hasn't changed. Mode only available for
			//Edit/Reprint option - orders at status of 70 or 80 only.
			//Qty already changed on warehouse record, so if we validate it
			//again, it'll be subtracting the qty twice.
		else
			// if the quantity has changed, this means that the
			// prior sale quantity has been overridden.
			set ws-validation-required = TRUE
			set i50lines-ordered-qty-changed = TRUE
		endif
		//message "4357 :"//dineth
	endvalidation
	//
	if ws-validation-required
		set str-ordered-qty = left-justify(str-ordered-qty)
		//message "4362 :A"//dineth
		if str-ordered-qty = 'A'
			set ws-saved-stock-code = stock-code
			repeat
				do i50lines-review-substitute-stk-items
			until stock-code <> ws-saved-stock-code
			endrepeat
			if stock-code = SPACES
			//nothing selected so stay with original
			//item code entered.
				set stock-code = ws-saved-stock-code
			endif
			set ws-accept-stk-code = stock-code
			reenter ws-accept-stk-code optional
		endif
		//
		if (uppercase(str-ordered-qty) = 'V')
			do m50lines-drill-into-atp-calc
			reenter str-ordered-qty
		endif
		//
		//message "4383 :P"//dineth
		if str-ordered-qty = 'P'
		and screenmode() = entry
		and sol-line-type = 'SN'
			save sales-order-line
			spl 'stk/m4sprcenq' parameters are so-cust-code stock-code
				leave-files-open
			restore sales-order-line
			reenter str-ordered-qty
		endif
		if num(str-ordered-qty) < 0
		and sys-so-allow-negative-qty = NO
		and i50entry-normal-order = YES
		and i50lines-whse-type in IWTYPEDEF_NORMAL_WHSE_TYPE
		and not (so-order-source = I5SOURCE_SERVICE_REPAIR
				or so-order-type-code = I5SO_TYPE_JOB_ISSUE)
			message "Cannot enter negative quantities"
			reenter str-ordered-qty
		endif
		set i50lines-reenter-needed = NO
		// Indicate to so/m50kitent.spl that may be invoked from i50lines-check-
		// review-order down the track if a kit item is entered that the call is
		// from a300-get-order-lines. In which case, it needs to apportion
		// all components' costs including shortshipped components. Other cases
		// are not tested.
		//message "4408 :"//dineth
		set i50lines-from-so-entry = TRUE
		set lf-original-avail-stk = ws-available-stk
		if sys-so-use-of-price-ref = "C"
		and sol-price-overide-flag not in {YES I5SOSTATII_ALT_OVER_PRICE}
			set sol-price-ref = ws-catalog-no / 100
		endif
		//
		// Routine i50lines-check-review-order-qty sets field i50lines-action-flag
		set i50lines-alt-kit = SPACES
		do i50lines-check-review-order-qty same
		if i50lines-alt-kit != SPACES
			set ws-accept-stk-code = i50lines-alt-kit
			set stock-code = ws-accept-stk-code
			get stock-master
				on index stock-code
				key is stock-code
			set sol-line-type = 'SN'
			refresh ws-accept-stk-code
			message-box param-text("Alternate Kit has selected. <<P1>>. Please re-enter kit.", stock-code)
				title is "Alternate Kit"
				message-buttons MSG_BOX_OK
				default is MSG_BOX_OK
				icon is MSG_BOX_INFORMATION
				tag 1
			reenter str-ordered-qty optional
		endif
		//message "4435 :"//dineth
		set i50lines-from-so-entry = FALSE
		set ws-accept-stk-code = stock-code
		if sol-line-type = "KN"
			if sol-item-price > 0
				do i5pricemod-pricing-module
					parameter
						FALSE
				do check-if-promo-exists
					returning lf-promo-exists
						lf-off-invoice
				if lf-promo-exists
					do insert-discounts-into-retail-promo
				endif
			endif
		endif
		refresh ws-accept-stk-code
		if i5pricemod-price-used <> ZERO
			set sol-price-rule = i5pricemod-price-rule[i5pricemod-price-used]
		endif
		if i50lines-reenter-needed = YES
			reenter ws-accept-stk-code
		endif
		if so-order-type-code = I5SO_TYPE_DIRECT_SHIP
		and sol-line-type = 'SN'
			spl "so/m50extra" parameters are "-qtycheck"
					stock-code str-ordered-qty str(sol-stk-unit-conversion)
					sol-stk-unit-desc
					so-whse-code
				returning lf-reenter-needed
				leave-files-open
			set lf-reenter-message = substring(lf-reenter-needed,2,13)
			if substring(lf-reenter-needed,1,1) = 'A'
				message "Can't enter negative quantities for direct ship order."
				reenter optional
			elseif substring(lf-reenter-needed,1,1) = 'B'
				message "Error converting qty to supplier's UOM. Next valid qty is: " lf-reenter-message
				reenter optional
			elseif substring(lf-reenter-needed,1,1) = 'C'
				message "Warning: Order quantity not multiple of supplier qty.  Next valid qty: " lf-reenter-message
			elseif substring(lf-reenter-needed,1,1) = 'D'
				message "Warning: Order quantity less than economic qty " lf-reenter-message
			endif
			if screenmode() = correct
			and so-order-status > I5SO_BEING_ENTERED
				message 'WARNING: Direct Ship order - correct purchase order'
				set ws-correct-po = TRUE
			endif
		endif
		//message "4484 :"//dineth
		if i5pricemod-adjust-qty
			message "Ordered quantity doesn't meet the requirements of the price rule"
			reenter
		endif
		if substring(i50lines-action-flag,2,2) = "A"
			DISPLAY_AVAIL_STK_AND_STK_DESC
		endif
		if substring(i50lines-action-flag,2,2) = "Z"
			DISPLAY_AVAIL_STK_AND_STK_DESC
			do i50lines-format-str-ordered-qty
			refresh str-ordered-qty
			set ws-accept-stk-code = stock-code
			refresh ws-accept-stk-code
		endif
		if substring(i50lines-action-flag,1,1) = "O"
			reenter optional
		elseif substring(i50lines-action-flag,1,1) = "S"
			set ws-accept-stk-code = stock-code
			reenter ws-accept-stk-code optional
		endif
		if substring(i50lines-action-flag,2,2) = "Q"
			do i50lines-format-str-ordered-qty
			refresh str-ordered-qty
		endif
		if substring(i50lines-action-flag,1,1) = "C"
			// delete has been hit from the kit entry!
			initialise sales-order-line
				leaving so-order-no so-bo-suffix sol-line-seq
						stock-code
			initialise stock-master
				leaving stock-code
			set lf-price-uom-desc = SPACES
			refresh data
			CLEAR_AND_REFRESH_BB_FIELDS
			set ws-accept-stk-code = stock-code
			reenter ws-accept-stk-code optional
		elseif substring(i50lines-action-flag,1,1) = "R"
			// Refresh review & issue a continue-entry command
			if sol-line-type = "KN"
				// Check if the kit item has any component.
				get bill-of-materials-header
					on index stock-code
					key stock-code
				on error ENOREC
					set lf-comp-found = FALSE
				else
					set lf-comp-found = TRUE
				endon
			endif
			if sol-line-type = "KN"
			and (ws-order-type in { "N" "T" "O" } and i50entry-forward-order = NO)
			and (ws-orig-whse-bo-flag in { "2" "3" }
				or i50lines-P-comp-found)				// Component is entered during kitentry.
			and i50lines-saved-stk-qty-flag not in { "E" "M" "B" }
			and lf-comp-found
				// Recalculate kit line from components.
				transaction begin
				do clib403-kit-calculation-lines
					parameters
						stock-code
						so-whse-code
						so-order-no
						so-bo-suffix
						sol-line-seq
						sol-ordered-qty
					returning
						ws-available-stk
				//need to adjust quantities because inventory levels has changed
				//since the user first entered the kit
				if sys-avail-stk-calc-for-sale in { "3" "4" }
					// Do not consider BO Qty
					set lf-available-stk = ws-available-stk	+ sol-shipped-qty
				else
					set lf-available-stk = ws-available-stk + sol-shipped-qty
												+ sol-backorder-qty
				endif
				if lf-original-avail-stk <> lf-available-stk
					set lf-adjust-qty = TRUE
				else
					set lf-adjust-qty = FALSE
				endif
				if lf-adjust-qty
					if lf-available-stk > sol-ordered-qty
						set lf-available-stk = sol-ordered-qty
					elseif lf-available-stk < ZERO
						set lf-available-stk = ZERO
					elseif lf-available-stk < sol-ordered-qty
					and so-part-shipment-allowed <> YES
					and ws-orig-whse-bo-flag = "3"
						set lf-adjust-qty = FALSE
					endif
				endif
				if lf-adjust-qty
					save sales-order-line
					extract sales-order-line lock
						on index so-order-no so-bo-suffix sol-line-seq
						key is so-order-no so-bo-suffix ws-this-line
						next same so-order-no so-bo-suffix
					detail
						get stock-master
							on index stock-code
							key is stock-code
						on error ENOREC EENDFILE //could be memo line, etc
							initialise stock-master
								leaving stock-code
							continue
						endon
						if sol-line-seq = ws-this-line //adjust main kit
							//force recalc amounts by i50entry-qty<>shipped-qty
							if ws-mode-type = 'E'
								//In entry mode, set i50entry-qty otherwise
								//this will be passed through to linecalc as
								//zero. This causes the shipped sales tax on
								//the kit parent to calculate to zero.
								set i50entry-qty = lf-available-stk
							endif
							do i50entry-do-line-calc same
							set sol-shipped-amount = i50entry-line-amt
							set sol-shipped-discount-amt = i50entry-disc-amt
							set sol-shipped-sales-tax-amt = i50entry-stax-amt
							//change quantities
							set lf-kits-ordered = sol-ordered-qty
							set lf-backorder-diff = sol-backorder-qty
							set lf-shipped-diff = lf-available-stk
													- sol-shipped-qty
							set sol-backorder-qty -= lf-shipped-diff
							if sol-backorder-qty < ZERO
								set sol-backorder-qty = ZERO
							endif
							set lf-backorder-diff -= sol-backorder-qty
							set sol-shipped-qty = lf-available-stk
							set lf-kits-shipped = sol-shipped-qty
							set lf-kits-backorder = sol-backorder-qty
						elseif stk-stock-status <> "K" //adjust components
							set lf-adj-bom = sol-ordered-qty / lf-kits-ordered
							set sol-shipped-qty = lf-kits-shipped * lf-adj-bom
							set sol-backorder-qty = lf-kits-backorder * lf-adj-bom
							do i50entry-calc-shipped-totals same //recalc amts
						endif
						// Re-calculate line cost.
						do i50entry-get-conversion-factor
						do clib406-calc-line-cost
							parameters
								sol-item-cost
								sol-ordered-qty
								sol-shipped-qty
								sol-line-type
								sol-stk-unit-conversion
								sol-stk-unit-desc
								stk-price-per
							returning
								sol-ordered-line-cost
								sol-line-cost
						update sales-order-line
						if stk-stock-status not in { "L" "Z" "K" }
							//adjust inventory levels
							do i4strupd-stream-update
								parameters stock-code so-whse-code
								str(so-order-no) so-bo-suffix sol-line-seq
								I4STRDEF_WHSE_BACK_ORDERS
								(0 - (lf-backorder-diff * lf-adj-bom))
							do i4strupd-stream-update
								parameters stock-code so-whse-code
								str(so-order-no) so-bo-suffix sol-line-seq
								I4STRDEF_WHSE_CURRENT_ORDERS
								(lf-shipped-diff * lf-adj-bom)
						endif
					endextract
					// Re-calculate order amounts displayed in the order header after
					// shipped and backorder quantities of the kit item and components
					// are adjusted.
					do b300-calc-total-amounts-update-header
					do display-totals
					transaction commit
					restore sales-order-line
				else //nothing to do
					transaction rollback
				endif
				//restore currency
				get stock-master
					on index stock-code
					key is stock-code
				get sales-order lock
					on index so-order-no so-bo-suffix
					key is so-order-no so-bo-suffix
				set lf-sol-found = TRUE
				get sales-order-line lock
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix ws-this-line
				on error ENOREC EENDFILE
					set lf-sol-found = FALSE
				endon
				if lf-adjust-qty and lf-sol-found
					do show-adjusted-quantity same
						parameters are
							sol-shipped-qty sol-backorder-qty
				elseif not lf-adjust-qty
				and i50lines-P-comp-found
				and lf-original-avail-stk < sol-ordered-qty
					message-box 'WARNING: Quantity ordered exceeds available stock'
						title "Stock Warning"
						message-buttons MSG_BOX_OK
						icon is MSG_BOX_WARNING
						optional
						tag 3
				endif
			else
				get sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix ws-this-line
					on error
					endon
			endif
			do check-overide-line-program same
			if sol-line-type = "KN"
				do a310-check-line-gp same
				do check-and-warn-min-gp same
			endif
			//
			refresh data
			refresh review
			continue-entry
		endif
		if sys-whse-detail-stream-update = YES
		and stk-stock-status not in { "K" "L" "Z" }
		and sol-line-type in { "SN" "WN" "RR" }
			do lines-place-stock-reservation
				parameters so-order-no so-bo-suffix sol-line-seq stock-code
					sol-stk-unit-conversion so-whse-code sol-ordered-qty
					sol-line-type i5pricemod-bill-to ws-van-id so-whse-to
					i50entry-transfer-between-whse
					sol-stk-unit-desc
				returning lf-reenter
			if lf-reenter
				reenter
			endif
		endif
		if screenmode() in { entry }
			// display item details in the bottom box!
			do bb-get-qty-related-fields
				returning	lf-bb-sol-ordered-qty
							lf-bb-sol-stk-unit-desc
							lf-bb-stk-pack-qty
							lf-bb-sol-stk-unit-conversion
							lf-bb-sol-price-uom
							lf-bb-sol-shipped-qty
							lf-bb-sol-backorder-qty
			refresh lf-bb-sol-ordered-qty
			refresh lf-bb-sol-stk-unit-desc
			refresh lf-bb-stk-pack-qty
			refresh lf-bb-sol-stk-unit-conversion
			refresh lf-bb-sol-price-uom
			refresh lf-bb-sol-shipped-qty
			refresh lf-bb-sol-backorder-qty
		endif
	endif		// end of 'if' for validation on str-ordered-qty
	//
	display str-ordered-qty @8,6 right pic x(10)
	//
	accept sol-stk-unit-desc @8,10 pic x(6)
		title 'Unit Qty'
		read-only
		default sol-stk-unit-desc
		when sol-line-type not in {'SC','DN','ST'}
	//
	// not ws-ok-to-post-income - means a job order!
	if (not ws-ok-to-post-income and sol-line-type in {"SS" "SC" "ST"})
	or (ws-zero-price and screenmode() = entry		// normal situation!
		and sol-line-type not in {"SS" "SC" "ST"})	// setup for entry only!
		//Project issue - no price. Costs only
		if sol-price-overide-flag != "U"
			set sol-price-overide-flag = YES
		endif
		if sys-so-pricing-method = 'C'
			set sol-disc-rate = 0
			set sol-extra-item-disc-amt = 0
		endif
		set sol-disc-rate = 0
		set sol-item-price = 0
		set sol-price-rule = SPACES
	endif
	//
	if screenmode() = entry
		if so-order-type-code = I5SO_TYPE_TAX_ONLY
		and sol-line-type != 'ST'
			set sol-item-price = ZERO
			set sol-price-rule = SPACES
			set sol-disc-rate = ZERO
		endif
		if i50lines-price-conversion != 0
			set sol-item-price =  sol-item-price * i50lines-price-conversion
			if i50lines-use-prior-sale-flag
				set i50lines-prior-sale-item-price *= i50lines-price-conversion
			endif
		endif
		// Fields saved so that if the user overrides price and then resets price to original
		// value all while in entry mode, the rule and discount can be reset also...
		set ws-saved-price-rule = sol-price-rule
		set ws-saved-disc-rate = sol-disc-rate
	endif
	//
	if sol-line-type in { 'DN', 'SC', 'ST' }
		set str-item-price = SPACES
	else
		if ws-limit-modes-fields-used
			set str-item-price = SPACES
		else
			set str-item-price = fstr(sol-item-price,14,4)
		endif
	endif
	if i50lines-use-prior-sale-flag
		set i50lines-default-price =
			fstr(i50lines-prior-sale-item-price,14,4)
		if i50lines-use-prior-sale-disc-flag
			set sol-disc-rate = i50lines-prior-sale-disc-rate
		endif
	else
		if ws-limit-modes-fields-used
			set i50lines-default-price = SPACES
		else
			set i50lines-default-price = str-item-price
		endif
		set i50lines-prior-sale-qty = ZERO
		set i50lines-prior-sale-item-price = ZERO
	endif
	//
	// prohibit the creation of transfer orders for manufactured item
	// if there is insufficient avail qty from the from-whse of the same
	// factory if MRP is used
 	if screenmode() in {md-detail-entry,entry,correct}
	and stk-stock-status = 'M'
	and sys-mcp-used-flag in { '2' '3' }
	and i50entry-transfer-between-whse = yes
		do check-manufactured-transfer
			returning lf-reenter
		if lf-reenter
			reenter str-ordered-qty
		endif
	endif
	//
	accept str-item-price @8,12 pic x(15) right
		help "Enter the Sell price or R%,M%,C%,W%,G% or hit [HELP]"
		default i50lines-default-price
		title 'Item Price'
		show-value
		uppercase
		when
		(
		(
			(
				(
					screenmode() = entry
					and stk-stock-status != 'K'
					and sol-line-type in {'SN' 'WN'}
					and not i50lines-scanned-item
					and
					(	sys-price-disc-entered in {'K',YES, "D" "W"}
						or  (sys-price-disc-entered = 'A'
								and ws-is-user-a-credit-officer = YES)
						or  (sys-price-disc-entered = 'C'
							and sol-line-type = 'SN'
							and stk-stock-status in { 'L' 'Z' }
							and sol-item-price = 0 )
					)
				)
				and ws-order-flag != CUSTOMER
				and ws-ok-to-post-income	// NOT a job order! ie normal
				and (
						i50entry-transfer-between-whse = NO
						or (i50entry-transfer-between-whse = YES
						and sys-charge-for-inter-transfers in
							{'P' 'O' 'D' 'C' '1' '2' '3' '4'})	//allow price
					)
				and (
						i50entry-forward-transfer = NO
						or (i50entry-forward-transfer = YES
						and sys-charge-for-inter-transfers in
							{'P' 'O' 'D' 'C' '1' '2' '3' '4'})	//allow price
					)
			)
			or (
					screenmode() = md-price and ws-order-flag != CUSTOMER
					and sol-line-type in {'SN' 'WN' 'SS'} and not IS_KIT
				)
		)
			and not i50lines-found-contract
			and not ws-limit-modes-fields-used
			and not (i50entry-transfer-between-whse = YES
			and ws-transfer-user-access = FALSE)
		)
		or
			( screenmode() = search and sol-line-type not in { 'DN' 'SC' 'ST'})
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			set ws-confirm = SPACES
			clear data
			refresh sol-line-seq
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			reenter ws-accept-stk-code
		else
			reenter str-item-price
		endif
	endon
	on help-key
		//This is an enquiry screen coming from the price setting program.
		//It should not change the stock code at this point in time.
		push stock-master
		push stock-warehouse-detail
		do i50lines-product-enquiry
		pop stock-warehouse-detail
		pop stock-master
		reenter optional
	endon
	validation
		do validate-item-price same
			returning
				lf-reenter-optional
				lf-reenter
		if lf-reenter-optional
			reenter str-item-price optional
		endif
		if lf-reenter
			reenter str-item-price
		endif
		if screenmode = entry
			// check entered item price against the default item price!
			if ltrim(str-item-price) = ltrim(i50lines-default-price)
				set sol-price-rule = ws-saved-price-rule
				if not i50lines-use-prior-sale-disc-flag
					set sol-disc-rate = ws-saved-disc-rate
				endif
			else
				set sol-price-rule = SPACES
			endif
		endif
		if sol-ordered-qty * sol-item-price > max-value(sol-line-amount)
			message 'WARNING. Qty * Price exceeds maximum allowed ' max-value(sol-line-amount) pause
			reenter optional
		endif
	endvalidation
	//
	// this is done outside the validation as you can have alternate
	// setup without having to stop and ask for item price!
	if i50lines-price-conversion != 0
		if sys-so-pricing-method != 'C'		  //not contract pricing
		and sol-stk-unit-desc != SPACES		  //unit is defined
		and ((sol-stk-unit-desc = stk-alt-unit-desc //alternate unit used
		or sol-stk-unit-conversion not in {0,1})
		or (sol-stk-unit-conversion  = 1
		and i50lines-alt-unit-qty != ZERO))
		and stk-conversion-factor != 1		  //has a conv. factor.
			if sol-price-overide-flag != "U"
				set sol-price-overide-flag = I5SOSTATII_ALT_PRICE
			endif
		else
			set sol-item-price /= i50lines-price-conversion
		endif
		set i50lines-price-conversion = 0
	endif
	//
	// Contract price calc's must be done here as we need to know if using alt
	// unit price..
	if i50lines-contracts-used
	and i50lines-found-contract
	and ws-contract-price != 0
 	and screenmode() in {md-detail-entry entry}
		set sol-item-price = ws-contract-price
		set sol-disc-rate = ws-contract-disc-rate
		if sol-item-price <> i5pricemod-item-price
			set sol-price-rule = SPACES
		endif
		if sol-price-overide-flag in { I5SOSTATII_ALT_PRICE
					I5SOSTATII_ALT_OVER_PRICE}
			set sol-item-price *= sol-stk-unit-conversion
		endif
		if not ws-limit-modes-fields-used
			set str-item-price = fstr(sol-item-price,14,4)
			refresh str-item-price
		endif
	endif
	//
	if screenmode() in { entry }
		// display item details in the bottom box!
		do bb-get-price-related-fields
			returning	lf-bb-sol-item-price
						lf-bb-price-uom-desc
						lf-bb-sol-disc-rate
						lf-bb-sol-item-wholesale-price
						lf-bb-option
		refresh lf-bb-sol-item-price
		refresh lf-bb-price-uom-desc
		refresh lf-bb-sol-disc-rate
		refresh lf-bb-sol-item-wholesale-price
		refresh lf-bb-option
	endif
	do get-the-pricing-uom
		returning
			lf-price-uom-desc
	accept lf-price-uom-desc @8,14 pic x(6)
		title 'Unit Price'
		read-only
		default lf-price-uom-desc
		when sol-line-type not in {'SC','DN','ST'}
	accept sol-price-uom @8,16
		title 'Per'
		read-only
		default sol-price-uom
		when sol-line-type not in {'SC','DN','ST'}
	//
	if screenmode() = entry
		if sys-cgd-flg in { 'M' 'L' }
		and sol-line-type = 'SN'
		and i5pricemod-is-disc-to-be-used = YES
		and not i50lines-use-prior-sale-disc-flag
		and ws-ok-to-post-income
			do i50entry-get-multiple-discounts entry once
			if i50entry-reenter-needed = TRUE
				if sys-price-disc-entered in {YES 'K' "D" "W"}
					reenter str-item-price optional
				else
					reenter str-ordered-qty optional
				endif
			endif
			set sol-disc-rate = i50entry-mult-disc-rate
		endif
		if (sol-line-type in {'SN' 'WN'}
		and sys-price-disc-entered in {YES 'K' 'D' "W" "E"}
		// XXXXXXXXX not all of sys-cgd-flg are in the m50quote program!!
		and sys-cgd-flg in {YES 'Z' 'X' 'O' 'S' 'T' '1' '2' '3' '4'})
			//just in case the predetermined discount is overrided
			set i50entry-sol-disc-rate = sol-disc-rate
		endif
		if sol-line-type = 'SN'
		and sol-print-line <> 'J'
			do check-for-extra-pricing-flags same
				parameters zero sol-item-price SPACES sol-stk-unit-desc
		endif
	endif
	//
	if ws-limit-modes-fields-used
		set sol-item-price = ZERO
		set sol-price-rule = SPACES
	endif
	//
	accept sol-disc-rate @8,18 pic z(3).zzz%
		help "Enter the discount rate applicable to this line item"
		show-value
		default sol-disc-rate
		when (
				screenmode() = entry
				and sol-line-type in {'SN' 'WN'}
				and not i50lines-scanned-item
				and sys-price-disc-entered in { YES 'K' 'D' "W" "E"}
				and i50entry-transfer-between-whse != YES
				and i50entry-forward-transfer = NO
				and sys-cgd-flg in {YES 'Z' 'X' 'O' 'S' 'T' 'U'
							'1' '2' '3' '4'}
				and ws-ok-to-post-income
				and ws-order-flag not in { CUSTOMER BRANCH }
				and not ws-limit-modes-fields-used
			)
			or ( screenmode() = md-price and sol-line-type in {'SN' 'SS'} and not IS_KIT)
			or ( screenmode() = search and sol-line-type != 'DN' )
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			if sol-disc-rate > 100
				message "Discount cannot be more than 100%"
				reenter sol-disc-rate
			else
				clear data
				refresh sol-line-seq
				do i50strupd-perform-global-unlock
					parameters so-order-no so-bo-suffix sol-line-seq
						TRUE	//Timed out.
						i50entry-stock-warehouse-locked
						stock-code so-whse-to i50entry-transfer-between-whse
						TRUE	//Remove any stock reservation.
					returning i50entry-stock-warehouse-locked
				reenter ws-accept-stk-code
			endif
		else
			reenter sol-disc-rate
		endif
	endon
	validation
		if screenmode() in { entry }
			// display item details in the bottom box!
			set lf-bb-sol-disc-rate = sol-disc-rate
			refresh lf-bb-sol-disc-rate
		endif
	endvalidation
	//
	if screenmode() = entry
	and sol-line-type = 'SN'
	and stk-stock-status not in {'L','Z'}
		if i50entry-sales-credit = YES
		or i50entry-return-authorisation = YES
			do i50lines-ask-if-it-affects-stock
			if sol-update-whse = 'N'
			and get-param(5) != '-pos'
				// Entry of credit order line that does not affect warehouse
				// quantities via so/m50ordent.spl.
				set sol-item-cost = ZERO
				set sol-line-cost = ZERO
			endif
		endif
	endif
	//
	if screenmode() = entry or (screenmode() =  md-price and not IS_KIT)
		// calculate the line amounts/costs
		do i50entry-calc-order-totals
		if sol-line-amount > max-value(sol-line-amount)
			message 'WARNING. Qty * Price exceeds maximum allowed ' max-value(sol-line-amount) pause
			reenter str-item-price
		endif
		do i50entry-calc-shipped-totals
		if sol-line-type in { 'SN','SS','KN' }
			set i50entry-qty = sol-shipped-qty
			do i50entry-get-conversion-factor
			push stock-master
			if sol-line-type = 'SS'
				set stk-price-per = sol-price-uom
			endif
			do clib406-calc-line-cost
				parameters
					sol-item-cost
					sol-ordered-qty
					sol-shipped-qty
					sol-line-type
					sol-stk-unit-conversion
					sol-stk-unit-desc
					stk-price-per
				returning
					sol-ordered-line-cost
					sol-line-cost
			pop stock-master
		endif
		//////////////////////////////////////////////////////////////////////
		// Need to populate SOLT here so that we can display
		// tax code and rate on screen
		//////////////////////////////////////////////////////////////////////
		do clibtaxso-populate-sales-order-line-tax-and-get-rate
			parameter
				sales-order.*
				sales-order-line.*
			returning
				sol-tax-rate
		//
		// display item details in the bottom box!
		do bb-get-tax-related-fields
			returning	lf-bb-solt-tax-code
						lf-bb-sol-tax-rate
		refresh lf-bb-solt-tax-code
		refresh lf-bb-sol-tax-rate
		//
		do bb-get-sol-line-amt-related-fields
			returning	lf-bb-sol-ordered-sales-tax-amt
						lf-bb-sol-ordered-disc-amt
						lf-bb-sol-ordered-line-amt
						lf-bb-sol-shipped-sales-tax-amt
						lf-bb-sol-shipped-discount-amt
						lf-bb-sol-shipped-amount
						lf-bb-sol-backorder-sales-tax-amt
						lf-bb-sol-backorder-discount-amt
						lf-bb-sol-backorder-amount
		refresh lf-bb-sol-ordered-sales-tax-amt
		refresh lf-bb-sol-ordered-disc-amt
		refresh lf-bb-sol-ordered-line-amt
		refresh lf-bb-sol-shipped-sales-tax-amt
		refresh lf-bb-sol-shipped-discount-amt
		refresh lf-bb-sol-shipped-amount
		refresh lf-bb-sol-backorder-sales-tax-amt
		refresh lf-bb-sol-backorder-discount-amt
		refresh lf-bb-sol-backorder-amount
		//
		do bb-get-cost-related-fields
			returning	lf-bb-sol-item-cost-string
						lf-bb-sol-ordered-cost-string
						lf-bb-sol-shipped-cost-string
						lf-bb-shipped-gp-string
		refresh lf-bb-sol-item-cost-string
		refresh lf-bb-sol-ordered-cost-string
		refresh lf-bb-sol-shipped-cost-string
		refresh lf-bb-shipped-gp-string
	endif
	//
	display sol-line-amount @8,22
		title lf-grid-order-title
	//
	if sol-line-type = 'DN'
		if screenmode in { entry correct md-detail-entry }
			if stock-code = 'M'
				set ws-note-title = 'Memo Maintenance'
			else
				set ws-note-title = 'Notes Maintenance'
			endif
			if screenmode() = correct
				if sys-length-of-so-note = '5'
					do i50lines-correct-note-line-5 same
				else
					do i50lines-correct-note-line-3 same
				endif
			else
				if sys-length-of-so-note = '5'
					do i50lines-maintain-note-line-5 same
				else
					do i50lines-maintain-note-line-3 same
				endif
			endif
			if exit-status() = 3
				// Text code has been entered, so lines already
				// exist! This is only available in entry mode!
				refresh data
				continue-entry
			elseif exit-status() = 2
				// delete has been hit!
				if screenmode() in { entry md-detail-entry }
//					refresh sol-line-seq
					set stock-code = 'N'
					set ws-accept-stk-code = stock-code
					reenter ws-accept-stk-code
				elseif screenmode() = correct
					//	just go back to the modes selection
					continue
				endif
			else
				// Need to set the stock-code for notes!
				if stock-code = 'M'
				or sol-print-line = 'N'	// If line is hidden treat as a Memo
					set stock-code = 'Memo'
				else
					set stock-code = 'Note'
				endif
				//print flag or description may have changed.
				refresh sol-print-line
			endif
		endif
	endif
	if screenmode() = entry
		if sol-line-type = 'DN'
		and stock-code = 'Note'	// i.e not a memo, text, terms. Its a NOTE line
			set ws-was-prev-line-a-note = YES
		else
			set ws-was-prev-line-a-note = NO
		endif
	endif
	//
	if BMSDEF_IS_ALT_OR_SUBSD_ITEM
		do get-stk-description
			returning lf-sol-line-description
	elseif sol-line-type in { 'SN' 'KN' 'WN' }
	and sol-line-description = " ",
		set lf-sol-line-description = stk-description
	else
		set lf-sol-line-description = sol-line-description
	endif
	accept lf-sol-line-description @8,28 pic x(35)
    	title is "Line Desc"
    	default lf-sol-line-description
    	read-only
	//
	if screenmode() = correct
	or sol-line-type = 'DN'
		//this is done to stop lines not adding up to header totals
		set ws-confirm = 'Y'
	elseif screenmode() = entry
	and ws-confirm = SPACES
		set ws-confirm = YES
	endif
	//
	accept ws-confirm @8,24 pic xxxx
		help "Y-confirm,(N)ot confirmed,(R)eview line or press [HELP]"
		allow YES NO 'R' 'L' 'S' 'W' 'H' 'A' 'P' 'M' 'D' 'Z' 'T' 'I' 'F' 'E'
			'G' 'K' 'Q' 'O'
		uppercase
		title 'OK?'
		default is ws-confirm
		when screenmode() = entry	// only valid for entry on datagrid!
		and sol-line-type = 'SN'	// only ask for confirm for normal lines
		and sol-chg-type != 'D'		// do not ask for components of kits!
		and sys-so-header-defaults not = '6'
		and not i50lines-scanned-item
	time-out is i50lines-time-out
	on error
		if ws-confirm not in
			{YES NO 'R' 'L' 'S' 'W' 'H' 'A' 'P' 'M' 'D' 'Z' 'T' 'I' 'F' 'E'
				'G' 'K' 'Q' 'O'}
			message 'Invalid option selected, reenter. ', ws-confirm
			reenter ws-confirm
		elseif screenmode() = entry
			set ws-confirm = SPACES
			clear data
			refresh sol-line-seq
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			set ws-mode-type = 'E'
			reenter ws-accept-stk-code
		else
			reenter ws-confirm
		endif
	endon
	on help-key
		do help-for-confirm
			parameter 'entry'
			returning ws-confirm
		reenter ws-confirm optional
	endon
	//trap all arrow key and reenter
	on up-arrow
		reenter ws-confirm optional
	endon
	on down-arrow
		reenter ws-confirm optional
	end
	on right-arrow
		reenter ws-confirm optional
	end
	on left-arrow
		reenter ws-confirm optional
	end
	validation
		// The accept of ws-confirm now only allowed in 'entry' mode!!!!
		if ws-order-flag = CUSTOMER
		and ws-confirm not in {'Y' 'N' 'H'}
			message 'Not available'
			reenter optional
		elseif ws-confirm = 'R'
			if sol-line-type = 'WN'
			or i50lines-other-whses-selected = YES
				message "You can't review this line as it relates to another warehouse"
				reenter optional
			endif
			set ws-no-change-on-disc-rate = TRUE
			do maintain-normal-line same
				returning lf-line-completed-ok
			if not lf-line-completed-ok
				clear data
				set ws-confirm = 'Y'
				refresh sol-line-seq
				reenter ws-accept-stk-code
			else
				refresh data
			endif
		elseif ws-confirm = 'S'
			if sol-line-type = 'WN'
			or i50lines-other-whses-selected = YES
				message "WARNING: Can't use substitute items as it relates to another warehouse"
			elseif ws-orig-whse-bo-flag = '3'
				message 'Substitute item code not available at this point'
			elseif sol-line-type <> 'SN'
				message 'Substitutes only available for normal item codes'
			else
				set sol-substitute-flag = "@"
				do maintain-normal-line same
					returning lf-line-completed-ok
				if not lf-line-completed-ok
					set sol-chg-type = SPACES
					clear data
					refresh sol-line-seq
					reenter ws-accept-stk-code
				else
					refresh data
				endif
			endif
			set ws-confirm = 'Y'
			reenter ws-confirm optional
		elseif ws-confirm = 'W'
			//Go straight to asking what they want to do - no balances screen
			set i50lines-saved-available-stk = 0
			//Note the other warehouse function only works for
			//the quantity on back order
			if sol-line-type = 'WN'
			or i50lines-other-whses-selected = YES
				message 'Other Warehouses have already been selected'
				set ws-confirm = 'Y'
				reenter ws-confirm optional
			elseif sol-line-type != 'SN'
				message 'This option is only available to normal stocked items'
				set ws-confirm = 'Y'
				reenter ws-confirm optional
			elseif sol-disc-rate <> i5pricemod-discount
			and sol-price-overide-flag in { NO SPACES }
			and i5pricemod-price-used != 0
			and i5pricemod-price-rule[i5pricemod-price-used] not = '06'
				message "Warning: The discount rate may be reset "
					"when selecting a different warehouse."
			endif
			do i50lines-stock-balance-and-select
			//
			set i50entry-qty = sol-shipped-qty
			do i50entry-get-conversion-factor
			do clib406-calc-line-cost
				parameters
					sol-item-cost
					sol-ordered-qty
					sol-shipped-qty
					sol-line-type
					sol-stk-unit-conversion
					sol-stk-unit-desc
					stk-price-per
				returning
					sol-ordered-line-cost
					sol-line-cost
			do i50entry-calc-shipped-totals same
			if i50lines-reenter-stk-qty-flag = 'Q'
				set i50lines-reenter-stk-qty-flag = SPACES
				set ws-confirm = 'Y'
				reenter str-ordered-qty optional
			else
				if sol-line-type = 'WN'
					// another whse has been selected, so just continue!
				else
					// it is still an 'SN', so must have backed out of screen!
					set ws-confirm = 'Y'
					reenter ws-confirm optional
				endif
			endif
		elseif ws-confirm in { 'N', 'L' }
			if ws-confirm = 'L'
				do i50lines-determine-available-stock
					parameters so-order-no so-bo-suffix sol-line-seq
						sol-line-type sol-ordered-qty i5pricemod-bill-to
						so-whse-code stock-code
						ws-van-id TRUE	//Indicative available stock.
						sol-stk-unit-desc
						sol-stk-unit-conversion
					returning ws-available-stk
						lf-avail-dedicated
						i50entry-dedicated-line
						sol-stk-unit-desc		// used to display available
						sol-stk-unit-conversion	// used to display available
				spl 'so/m50extra'
					parameters are str(so-order-no) so-bo-suffix '-lost'
					stock-code so-cust-code fstr(sol-ordered-qty,8,2)
					fstr(so-order-date,10,0)
					fstr(ws-available-stk,9,4)
			endif
			if ws-confirm = 'N'
				get stock-specification-chemical
					on index stock-code
					key is stock-code
				on error
				else
					if ssc-poisons-schedule-code = 'S7'
						spl 'so/m5s7notes'
							parameters are str(so-order-no) so-bo-suffix
							sol-line-seq stock-code '-del'
					endif
				endon
				// For normal entry, when entering a new line,
				// the i5linecalc-dont-ZERO-disc is always set to TRUE
				// For full detail entry, if ws-confirm is set to N,
				// the i5linecalc-dont-ZERO-disc should be set to TRUE
				// as it is effectively entering a new line
				if screenmode() in { md-detail-entry }
					set i5linecalc-dont-zero-disc = TRUE
				endif
			endif
			if sol-line-type = 'WN'
			or i50lines-other-whses-selected = YES
				extract sales-order-line-notes lock
					on index so-order-no so-bo-suffix sol-line-seq
						soln-type soln-seq-no
					key is so-order-no so-bo-suffix sol-line-seq "~W"
					next same so-order-no so-bo-suffix
						sol-line-seq soln-type
				detail
					delete sales-order-line-notes
				endextract
			endif
			if sol-line-type = "SN"
				do i50strupd-remove-ZERO-stock-warehouse-detail
					parameters
						stock-code
						so-whse-to
						i50entry-transfer-between-whse
				do commit-auto-transaction
			endif
			clear data
			set ws-confirm = 'Y'
			refresh sol-line-seq
			reenter ws-accept-stk-code optional
		elseif ws-confirm = 'H'
			set sol-print-line = 'N'
			message 'Line flagged as hidden.'
		elseif ws-confirm = 'F'
			set sol-print-line = 'F'
			message  "Line flagged as: F - Factory to Supply Item"
		elseif ws-confirm = 'G'
			if i50entry-sales-credit = YES
				set sol-print-line = 'G'
				set ws-mode-type = 'D'
				set ws-confirm = 'R'
				set i50lines-always-affect-stock = TRUE
				do maintain-normal-line same
					returning lf-line-completed-ok
				if not lf-line-completed-ok
					clear data
					refresh sol-line-seq
					reenter ws-accept-stk-code
				endif
			else
				message 'This option is only available for rebate credit notes'
				set ws-confirm = 'Y'
				reenter ws-confirm
			endif
		elseif ws-confirm = 'I'
			set sol-print-line = 'I'
			message "Set the print flag for this line to I, this Item is be sourced Internally"
		elseif ws-confirm = 'K'
			if stk-stock-status in { 'L' 'Z' }
			or sol-shipped-qty != 0
			or sys-raise-po-from-so in {'0' '1' }
				message "This option is not available for shipped or non stocked items"
				reenter ws-confirm
			else
				set sol-print-line = 'K'
				message 'Treat this item as an Indent item.'
			endif
		elseif ws-confirm = 'T'
			if (sol-line-type = 'WN'
			or i50lines-other-whses-selected = YES)
			and sys-supply-from-other-whse not in { 'S' 'N'}
				message 'Can only take when shipping direct from other warehouse'
				set ws-confirm = 'Y'
				reenter ws-confirm optional
			elseif sol-backorder-qty != 0
				message 'Can only mark lines as taken, if zero on backorder'
				set ws-confirm = 'Y'
				reenter ws-confirm optional
			elseif i50lines-whse-type = IWTYPEDEF_DISTRIB_LOC_PICK
			and get-param(1) != '-cash'
				// -cash is from POS, where the SO status is changed to ready
				// to update.
				message concat('Invalid option selected for type 3 '
						'(WMS controlled) warehouse, reenter.')
				reenter ws-confirm
			endif
			set sol-print-line = 'T'
			message 'Item flagged as Taken!'
		elseif ws-confirm = 'M'
			set sol-print-line = 'M' // add to manufacturing order
			do public-allow-manuf-packing-maintenance
				parameter
					sales-order.*
					sol-line-seq
			message 'Item flagged as Manufactured item!'
		elseif ws-confirm = 'P'
			if sys-price-disc-entered in {'K',YES, "D" "W"}
			or  (sys-price-disc-entered = 'A'
				and ws-is-user-a-credit-officer = YES)
			or  (sys-price-disc-entered = 'C'
					and sol-line-type = 'SN'
					and stk-stock-status in { 'L' 'Z' }
					and sol-item-price = 0 )
				set ws-confirm = 'Y'
				reenter str-item-price
			else
				message 'You are not authorised to change the price'
				pause
				set ws-confirm = 'Y'
				reenter ws-confirm optional
			endif
		elseif ws-confirm = 'D'
			do get-line-delivery-address
			set sol-whse-code = na-type
		elseif ws-confirm = 'E'
			set ws-confirm = 'Y'
			if so-order-type-code = I5SO_TYPE_DIRECT_SHIP
				//Splitting of orders not handled for these orders.
				message "Different expected delivery dates not allowed for direct ship orders."
				reenter ws-confirm optional
			else
				do get-delivery-date
			endif
		elseif ws-confirm = 'A'
			do alternate-accept same
			if ws-numeric-field = 1
				reenter ws-accept-stk-code optional
			elseif ws-numeric-field = 2
				refresh ws-accept-stk-code
				reenter str-ordered-qty optional
			endif
		elseif ws-confirm = 'Q'
			if sol-backorder-qty = ZERO
				message 'Supplier quote only valid for backorder quantity'
				reenter
			endif
		elseif ws-confirm = 'Z'
			do ask-for-short-ship-reason entry once
		elseif ws-confirm = 'O'		//Other Notes
			get stock-master
				on index stock-code
				key is stock-code
			on error
				set stk-issue-control-code = SPACES
				set stk-packaging-flag = SPACES
				set stk-licences-rebate-flag = SPACES
				set stk-outside-supplier-flag = SPACES
				set stk-measurement-flag = SPACES
			endon
			do ask-type-of-note-line
		endif
	endvalidation
	if i50lines-alt-unit-qty != 0
		// ie. alternate unit used
		set sol-extra-item-disc-amt = i50lines-alt-unit-qty
	endif
	//
	accept sol-print-line @8,32 pic x(10)
		read-only
		show-value
		default sol-print-line
	//
	set lf-sol-whse-code = sol-whse-code
	if sol-line-type = 'WN'
	and sol-whse-code = "****"
		set lf-sol-whse-code = "Mult"
	endif
	accept lf-sol-whse-code @8,34 pic x(10)
		title 'Other Whse'
		read-only
		default sol-whse-code
		when sol-line-type = 'WN'
	accept sol-line-type @8,36 pic x(4)
		title 'Line Type'
		read-only
		default sol-line-type
	if not lf-show-ex-tax
		set lf-ex-tax-amount = ZERO
	else
		set lf-ex-tax-amount = sol-line-amount - sol-ordered-sales-tax-amt
	endif
	accept lf-ex-tax-amount @8,38 pic -(10)z.zz
    	title is concat("Ord Ex ",lf-currency-amt-total)
		read-only
		default lf-ex-tax-amount
		when sol-line-type <> 'DN'
	//
	accept sol-chg-type @8,40 pic x(4)
		title 'Charge Type'
		read-only
		default sol-chg-type
	//
	do calc-rms-multi-discounts
		returning lf-rms-multi-discount
	accept lf-rms-multi-discount @8,42 pic x(4)
		title 'RMS Disc'
		read-only
		default lf-rms-multi-discount
	if sol-line-type <> 'DN'
		set lf-str-shipped-qty = str(sol-shipped-qty)
		display lf-str-shipped-qty @8, 44 right
			title 'Ship Qty.'
	else
		display SPACES @8, 44 right
			title 'Ship Qty.'
	endif
	display sol-shipped-amount @8, 46
		title lf-grid-ship-title
	if sol-line-type <> 'DN'
	and lf-show-ex-tax
		set lf-ex-tax-shipped-amount = sol-shipped-amount - sol-shipped-sales-tax-amt
	else
		set lf-ex-tax-shipped-amount = ZERO
	endif
	display lf-ex-tax-shipped-amount @8,48 pic -(10)z.zz
		title is concat("Ship Ex ",lf-currency-amt-total)
	//
	if sol-line-type not in { 'SC' 'DN' }
	and lf-show-ex-tax
		if sol-ordered-qty = ZERO
			set lf-amount = ZEROS
			set lf-amount-per = ZEROS
		else
			set lf-amount = (sol-line-amount - sol-ordered-sales-tax-amt) / sol-ordered-qty
			set lf-amount-per = (sol-line-amount - sol-ordered-sales-tax-amt) / sol-ordered-qty * sol-price-uom
		endif
	else
		set lf-amount = ZERO
		set lf-amount-per = ZERO
	endif
	display lf-amount @8,50 pic -(10)z.zz
		title is concat("Order Unit Ex ",lf-currency-amt-total)
	display lf-amount-per @8,52 pic -(10)z.zz
		title is concat("Order Unit Per Ex ",lf-currency-amt-total)
	//
	// ==================== START OF BOTTOM BOX Displays! ====================
	//
	if screenmode() not in { next-scr, prev-scr }
		// set up all the defaults!
		do get-line-desc
			returning lf-bb-stk-status-desc
		//
		do get-avail-stk-and-stk-description
			returning	lf-bb-available-stk
						lf-bb-available-stk-text
						lf-bb-unit-of-available-stk
						lf-bb-stk-desc-1
						lf-bb-stk-desc-2
						lf-bb-stk-desc-3
						lf-bb-stk-apn-number
		//
		do bb-get-print-line-and-chg-type
			returning	lf-bb-sol-print-line
						lf-bb-sol-chg-type
		//
		do bb-get-supplier-details
			returning	lf-bb-supplier-code
						lf-bb-supplier-shortname
		do bb-get-product-group-details
			returning	lf-bb-pg-desc
						lf-bb-sol-item-group
		//
		do bb-get-line-notes-exists
			returning	lf-bb-line-notes-exists
		//
		do bb-get-qty-related-fields
			returning	lf-bb-sol-ordered-qty
						lf-bb-sol-stk-unit-desc
						lf-bb-stk-pack-qty
						lf-bb-sol-stk-unit-conversion
						lf-bb-sol-price-uom
						lf-bb-sol-shipped-qty
						lf-bb-sol-backorder-qty
		do bb-get-price-related-fields
			returning	lf-bb-sol-item-price
						lf-bb-price-uom-desc
						lf-bb-sol-disc-rate
						lf-bb-sol-item-wholesale-price
						lf-bb-option
		do bb-get-tax-related-fields
			returning	lf-bb-solt-tax-code
						lf-bb-sol-tax-rate
		do bb-get-sol-line-amt-related-fields
			returning	lf-bb-sol-ordered-sales-tax-amt
						lf-bb-sol-ordered-disc-amt
						lf-bb-sol-ordered-line-amt
						lf-bb-sol-shipped-sales-tax-amt
						lf-bb-sol-shipped-discount-amt
						lf-bb-sol-shipped-amount
						lf-bb-sol-backorder-sales-tax-amt
						lf-bb-sol-backorder-discount-amt
						lf-bb-sol-backorder-amount
		do bb-get-cost-related-fields
			returning	lf-bb-sol-item-cost-string
						lf-bb-sol-ordered-cost-string
						lf-bb-sol-shipped-cost-string
						lf-bb-shipped-gp-string
		do bb-get-extra-line-info
			returning	lf-bb-extra-line-info
	endif
	//
	accept lf-bb-stk-status-desc @19,8 bold
		title "Type :"
		read-only
		default lf-bb-stk-status-desc
	accept lf-bb-sol-print-line @19,35
		title "Print Flag:"
		read-only
		default lf-bb-sol-print-line
	accept lf-bb-line-notes-exists @19,57.8
		prompt 'Attached Line Notes:'
		default lf-bb-line-notes-exists
		read-only
	accept lf-bb-stk-desc-1 @20,8 pic x(51)
		title 'Desc :'
		read-only
		default lf-bb-stk-desc-1
	accept lf-bb-stk-desc-2 @21,8 pic x(51)
		read-only
		default lf-bb-stk-desc-2
	accept lf-bb-stk-desc-3 @22,8 pic x(51)
		read-only
		default lf-bb-stk-desc-3
	//
	accept lf-bb-extra-line-info @23,8 pic x(51)
		title "Info:"
		read-only
		default lf-bb-extra-line-info
	//
	accept lf-bb-stk-apn-number @22,74
		title "GTIN :"
		read-only
		default lf-bb-stk-apn-number
	//
	do clibstk-item-rounding
		parameters
			stk-unit-desc
		returning
			lf-rounding
			lf-decimals
	switch on lf-decimals
	case 4
		set lf-stk-qty-pic = "-(9)9.9999"
	case 3
		set lf-stk-qty-pic = "-(10)9.999"
	case 2
		set lf-stk-qty-pic = "-(11)9.99"
	case 1
		set lf-stk-qty-pic = "-(12)9.9"
	else
		set lf-stk-qty-pic = "-(14)9"
	endswitch
	//
	accept lf-bb-available-stk @23,74 PIC_FOR_LARGE_QTY bold right
		title "Avail. Stock:"
		read-only
		default lf-bb-available-stk
	accept lf-bb-unit-of-available-stk @23,90
		read-only
		default lf-bb-unit-of-available-stk
	accept lf-bb-supplier-code @19,74 pic x(10) right
		title 'Supplier:'
		read-only
		default lf-bb-supplier-code
	accept lf-bb-supplier-shortname suppress
		read-only
		default lf-bb-supplier-shortname
	accept lf-bb-sol-item-group @20,74 pic x(10) right
		title 'Group:'
		read-only
		default lf-bb-sol-item-group
	accept lf-bb-pg-desc suppress
		read-only
		default lf-bb-pg-desc
	accept lf-bb-sol-chg-type @21,74 pic x(10) right
		title "Charge Type :"
		read-only
		default lf-bb-sol-chg-type
	accept lf-bb-sol-ordered-qty @27,9 pic -(8)9t9999
		title 'Order:'
		read-only
		default lf-bb-sol-ordered-qty
	accept lf-bb-sol-ordered-sales-tax-amt @27,23 pic -(10)9.99
		read-only
		default lf-bb-sol-ordered-sales-tax-amt
	accept lf-bb-sol-ordered-disc-amt @27,37 pic -(10)9.99
		read-only
		default lf-bb-sol-ordered-disc-amt
	accept lf-bb-sol-ordered-line-amt @27,51 pic s(10)9.99
		read-only
		default lf-bb-sol-ordered-line-amt
	accept lf-bb-sol-shipped-qty @28,9 pic -(8)9t9999
		title 'Ship :'
		read-only
		default lf-bb-sol-shipped-qty
	accept lf-bb-sol-shipped-sales-tax-amt @28,23 pic -(10)9.99
		read-only
		default lf-bb-sol-shipped-sales-tax-amt
	accept lf-bb-sol-shipped-discount-amt @28,37 pic -(10)9.99
		read-only
		default lf-bb-sol-shipped-discount-amt
	accept lf-bb-sol-shipped-amount @28,51 pic -(10)9.99
		read-only
		default lf-bb-sol-shipped-amount
	accept lf-bb-sol-backorder-qty @29,9 pic -(8)9t9999
		title 'Back Ord:'
		read-only
		default lf-bb-sol-backorder-qty
	accept lf-bb-sol-backorder-sales-tax-amt @29,23 pic -(10)9.99
		read-only
		default lf-bb-sol-backorder-sales-tax-amt
	accept lf-bb-sol-backorder-discount-amt @29,37 pic -(10)9.99
		read-only
		default lf-bb-sol-backorder-discount-amt
	accept lf-bb-sol-backorder-amount @29,51 pic -(10)9.99
		read-only
		default lf-bb-sol-backorder-amount
	accept lf-bb-sol-stk-unit-desc @19,109 pic x(18) right
		title "Qty UOM  :"
		read-only
		default lf-bb-sol-stk-unit-desc
	accept lf-bb-sol-item-price @20,109 pic s(12)9.9(4)
		title "Price    :"
		read-only
		default lf-bb-sol-item-price
	accept lf-bb-price-uom-desc @21,109 pic x(18) right
		title "Price UOM:"
		read-only
		default lf-bb-price-uom-desc
	accept lf-bb-stk-pack-qty @22,109 pic z(15).zz
		title "Pack     :"
		read-only
		default lf-bb-stk-pack-qty
	accept lf-bb-sol-stk-unit-conversion @23,109 pic z(12)9tzzzz
		title "Conv.    :"
		read-only
		default lf-bb-sol-stk-unit-conversion
	accept lf-bb-sol-price-uom @24,109 pic z(17)9
		title "Per      :"
		read-only
		default lf-bb-sol-price-uom
	accept lf-bb-sol-disc-rate @25,109 pic z(12)9.999%
		title "Discount %:"
		read-only
		default lf-bb-sol-disc-rate
	accept lf-bb-solt-tax-code @26,109 pic x(8)
		title ws-tax-prompt
		read-only
		default lf-bb-solt-tax-code
	accept lf-bb-sol-tax-rate @26,118 pic z(3)vz(4)%
		read-only
		default lf-bb-sol-tax-rate
	accept lf-bb-sol-item-wholesale-price @27,109 pic -(12)z.zzzz
		title "Wholesale:"
		read-only
		default lf-bb-sol-item-wholesale-price
	accept lf-bb-option @28,109
		title "Price Source:"
		read-only
		default lf-bb-option
	accept lf-bb-sol-item-cost-string @26,80 pic x(14) right
		title ws-item-costs-prompt
		read-only
		default lf-bb-sol-item-cost-string
		when i50entry-show-costs in { YES "B" }
	accept lf-bb-sol-ordered-cost-string @27,80 pic x(14) right
		title ws-ordered-costs-prompt
		read-only
		default lf-bb-sol-ordered-cost-string
		when i50entry-show-costs in { YES "B" }
	accept lf-bb-sol-shipped-cost-string @28,80 pic x(14) right
		title ws-shipped-costs-prompt
		read-only
		default lf-bb-sol-shipped-cost-string
		when i50entry-show-costs in { YES "B" }
	accept lf-bb-shipped-gp-string @29,80 pic x(14) right
		title ws-gp-prompt
		read-only
		default lf-bb-shipped-gp-string
		when i50entry-show-costs in { YES "B" }
	//
	//
	// ==================== END OF BOTTOM BOX Displays! ====================
	//
	//
	accept sol-user-only-alpha4-1 suppress
	accept sol-user-only-alpha4-2 suppress
	accept sol-user-only-date1 suppress
	accept sol-user-only-num1 suppress
	accept sol-user-only-num2 suppress
	accept sol-rep-code suppress
	//
	confirm
		default NO when screenmode() = remove
	before
		if screenmode() in {entry md-detail-entry }
			do public-allow-pre-confirm-of-line-entry
				parameter
					sales-order.*
					sales-order-line.*
				returning
					lf-ok
			if not lf-ok
				reenter ws-accept-stk-code
			endif
		endif
		if screenmode() = md-price
		and sol-line-type in {"SN" "SS" "WN"} and not IS_KIT
		and sol-item-price != i5linecalc-item-price
			//This is indicative of the situation where the price has been
			//updated but not re-calculated.  This will occur when the F4
			//is pressed from either the item price or the discount accept
			//statement.
			do i50entry-calc-order-totals
			do i50entry-calc-shipped-totals
			if sol-line-type in { 'SN','SS','KN' }
				set i50entry-qty = sol-shipped-qty
				do i50entry-get-conversion-factor
				push stock-master
				if sol-line-type = 'SS'
					set stk-price-per = sol-price-uom
				endif
				do clib406-calc-line-cost
					parameters
						sol-item-cost
						sol-ordered-qty
						sol-shipped-qty
						sol-line-type
						sol-stk-unit-conversion
						sol-stk-unit-desc
						stk-price-per
					returning
						sol-ordered-line-cost
						sol-line-cost
				pop stock-master
			endif
		endif
		if so-order-type-code = I5SO_TYPE_ASSET_CAPITAL
		and screenmode() = entry
			do get-asset-info entry once
				returning
					lf-location-code
					lf-asset-group
					lf-depreciation-code
		endif
		do before-confirm-of-a300-lines same
			returning lf-action
		if lf-action in { "1" "3" }
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					FALSE	//Not a time out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
		endif
		if lf-action = '1'
			continue
		elseif lf-action = '2'
			refresh review
		elseif lf-action = '3'
			refresh review
			continue
		endif
	confirmed
		set i5pricemod-price-flag-override = FALSE
		if screenmode() in { entry md-detail-entry correct remove }
		or (screenmode() = md-price and not IS_KIT)
			do confirm-of-a300-lines same
				parameter lf-install-link-found
				returning lf-action
			if lf-action = '1'
				continue
			elseif lf-action = '2'
				refresh review
			elseif lf-action = '3'
				refresh data
			elseif lf-action = '4'
				reenter ws-accept-stk-code optional
			elseif lf-action = '5'
				do check-for-van-whse
				exit
			endif
			if screen-mode() = md-detail-entry
				if sys-so-companion-items = YES
					do check-alt-scs-items
						parameters
							sol-line-seq
							stock-code
						returning
							lf-lines-alt-kit
					if lf-lines-alt-kit != SPACES
						set ws-accept-stk-code = lf-lines-alt-kit
						set stock-code = ws-accept-stk-code
						get stock-master
							on index stock-code
							key is stock-code
						set sol-line-type = 'SN'
						refresh ws-accept-stk-code
						message-box param-text("Alternate Kit has selected. <<P1>>. Please re-enter kit.", stock-code)
							title is "Alternate Kit"
							message-buttons MSG_BOX_OK
							default is MSG_BOX_OK
							icon is MSG_BOX_INFORMATION
						reenter str-ordered-qty optional
					endif
				endif
			endif
			if screen-mode() = entry
			and I5TENDTRK_GIFT_VOUCHER_PROD
				//Insert the Reference Number Line.
				save sales-order-line
				for lf-counter = 1 to 50
					initialise sales-order-line
						leaving so-order-no so-bo-suffix sol-line-seq
					set sol-line-seq += 0.01
					set sol-line-description = concat('Reference No: ',ttt-reference-no)
					set sol-line-type = 'DN'
					set sol-print-line = 'Y'
					insert sales-order-line
					on error
						//continue trying to insert reference
					else
						break
					endon
				endfor
				restore sales-order-line
				set i50lines-scanned-item = FALSE
			endif
		elseif screenmode() = order-conclusion
			set ws-del-hit = NO
			do test-to-do-alert
			if ws-ok
				do lock-promo-for-other-whse
					parameters
						so-order-no
						so-bo-suffix
				//
				set lf-exit = FALSE
				do check-for-promo-alerts
					returning lf-exit
				if not lf-exit
					do check-for-van-whse
					exit
				endif
			endif
		elseif screen-mode() = all-line-modes
			do all-line-modes-menu
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
			refresh review
		elseif screenmode() = md-serial
			if sol-line-type in { 'SN','WN','RR','KN' }
			or (sol-line-type = 'RR' and i50entry-normal-order = YES)
				get stock-master
				on error
					message-box param-text("Item code <<P1>> not valid", stock-code)
						title "Item Code Invalid"
						icon is MSG_BOX_STOP
						message-buttons MSG_BOX_OK
						tag 1416
				else
					if stk-serialized-flag not in {NO SPACES}
					or (i50lines-whse-type = IWTYPEDEF_LOAN_DEMO_WHSE
					and sol-line-type != 'KN')
						// This will also change the item cost for serialized
						// item to the actual cost if actual costing is used.
						set lf-saved-item-cost = sol-item-cost
						do i50lines-get-serial-no-info same
							parameter
								ws-sopl-record-exists
						get sales-order-line lock
						on error
						//	continue
						endon
						//
						do clib407-get-cost-method
							parameters
								stock-code
								so-whse-code
								sys-cost-to-use
							returning
								lf-cost-to-use
						//
						if lf-cost-to-use = 'T'			// Actual costing
						and stk-serialized-flag in { 'Y' }
						and (so-price-code in { SPACES '0' '1' '2' '3' '4' }
							or so-price-code in I5SOSTATII_RETAIL_ONLY)
						and sol-line-type = 'SN'
						and sol-ordered-qty > ZERO
						and ((so-order-status in {I5SO_BEING_ENTERED I5SO_TRANSFER_ENTERED}
								and sol-price-overide-flag in { 'N' SPACE })
							or (sol-chg-type = 'D'	// Cost of kit component changes
								and sol-line-type = 'SN'))
						and lf-saved-item-cost != sol-item-cost // Cost changes
							// Recalculate item price based on the actual cost
							// of the serialized item during sales order entry
							if sol-price-overide-flag in { 'N' SPACE }
								// Recalculate item price if the item price has not
								// been override.
								// Don't reset the cost to average cost but use
								// the actual cost for price recalculation.
								set i5pricemod-no-cost-reset = TRUE
								if i50entry-transfer-between-whse = YES
									do i50tp-determine-transfer-price
								else
									do i5pricemod-pricing-module
										parameter
											FALSE
								endif
								set i5pricemod-no-cost-reset = FALSE
								set sol-item-price = i5pricemod-item-price
								do i50entry-calc-order-totals same
								do i50entry-calc-shipped-totals same
								update sales-order-line
							endif
							// Check if the item is a kit component.
							if (sol-chg-type = 'D'
							and sol-line-type = 'SN')
								// Actual cost of serialised component changes.
								// Recalculate item cost and line cost of the
								// kit item.
								do i50lines-recalculate-kit-parent-cost
									parameter sol-line-seq
							endif
							get sales-order-line lock	// Retain lock
						endif
						//
						set i50lines-cal-display-totals
							= CURRENT_LINE_AND_CHG_SEQ
						do b300-calc-total-amounts-update-header
						set i5soldisc-general-disc-rate = 0
						do display-totals
					else
						message 'Item code is not serialised'
					endif
				endon
				refresh review
			else
				message 'Only normal stock lines can be serialised or lot tracked'
			endif
		elseif screenmode() = find-stk
			do b430-find-stk
			// This refresh data is needed here just in case the user has set a different
			// sort order on a column within the datagrid.
			refresh data
		elseif screenmode() = md-wp-ed
			if sol-line-type != 'DN'
				// if the current line is not be DN, then initialise
				// the stock-code
				set stock-code = SPACES
			endif
			do i50lines-maint-notes-via-blob-editor same
				returning lf-no-of-note-lines-added
		elseif screenmode() = md-tax-details
			if (so-order-status < I5SO_RDY_TO_PRINT_INVOICE
				or so-order-status in { I5SO_CONSIGNMENT_RDY_TO_PRINT
										I5SO_CNOTE_RDY_TO_PRINT })
			and sol-line-type in { "SN" "SC" "SS" "ST" "RN" "RR" "WN" "RS" }
			and sol-chg-type <> 'D'	// Kit component
			and sol-disc-rule != PROMOTION_DISCOUNT
				spl "so/m50taxdetails"
					parameters
						"-solt-maint"
						so-order-no
						so-bo-suffix
						sol-line-seq
					returning
						lf-solt-record-changed
				if lf-solt-record-changed = YES
					// Re-get sales order line record because
					// change of tax may have changed record
					get sales-order-line
					do i50lines-recalc-line-from-price-disc
						parameter
							SPACES
					set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
					do b300-calc-total-amounts-update-header
					do display-totals
				endif
			else
				spl "so/m50taxdetails"
					parameters
						"-solt-enq"
						so-order-no
						so-bo-suffix
						sol-line-seq
					returning
						lf-solt-record-changed	// Not used here
			endif
		elseif screenmode() = md-enter-proform-details
			set i5linecalc-dont-zero-disc = TRUE
			do setup-select-of-proforma-lines
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
			reselect	// Needs to be executed in case procedure inserts a sales-order-line
		elseif screenmode() = md-atp // Available To Promise (ATP)
			get sales-order
				on index so-order-no so-bo-suffix
				key is so-order-no so-bo-suffix
			on error
				message "You are not current on a line."
			else
				get sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix sol-line-seq
				on error
					message "You are not current on a line."
				else
					do m50lines-drill-into-atp-calc
				endon
			endon
			refresh review
		elseif screenmode() = md-other
			set ws-save-line = sol-line-seq
			do other-options
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
			refresh prompts	// done to reset cost titles if toggled
			position sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix ws-save-line
			reselect	// Needs to be executed in case any procedure inserts a sales-order-line
			refresh review
		elseif screen-mode() = md-discount-mod
			if so-order-status > I5SO_PICKING_PRINTED
				message "This order has progressed too far to apply a discount."
				exit
			elseif so-order-type-code != I5SO_TYPE_TAX_ONLY
				do ask-type-of-discount-processing
				do b300-calc-total-amounts-update-header
				do display-totals
				refresh data
			else
				message 'You are not authorised to change the discount'
			endif
		elseif screenmode() = md-public-mode
			do process-public-screenmode
				returning
					ws-public-mode-refresh-flag
			if ws-public-mode-refresh-flag > SPACES
				//Recalc totals - lines may have been added/removed
				do b300-calc-total-amounts-update-header
				do display-totals
			endif
			switch on ws-public-mode-refresh-flag
			case "R"
				refresh review
			case "S"
				refresh
			case "D"
				refresh data
			case "P"
				refresh prompts
			endswitch
		elseif screenmode() in { md-kit-options md-price }
			if IS_KIT
				push sales-order-line
				do check-if-kit-price-override-record-exists
					returning
						lf-kit-price-override-falg
				pop sales-order-line
				//
				if get-param(3) = '-i'
				and i50lines-whse-type = IWTYPEDEF_DISTRIB_LOC_PICK
					spl "so/m50kitchg" parameters are '-kitchg'
						str(so-order-no)  so-bo-suffix fstr(sol-line-seq,5,2)
						sol-line-type "-CP"
				else
					spl "so/m50kitchg" parameters are '-kitchg'
						str(so-order-no)  so-bo-suffix fstr(sol-line-seq,5,2)
						sol-line-type
				endif
				//
				if lf-kit-price-override-falg = FALSE
					//Before the SPL to so/m50kitchg program there wasn't a kit price override.
					//After the SPL check agian to see if the kit price has been changed.
					push sales-order-line
					do check-if-kit-price-override-record-exists
						returning
							lf-kit-price-override-falg
					if lf-kit-price-override-falg
						//Kit price has been changed in the so/m50kitchg.
						//Set the falg and run the promo engine to recalculate promo price (i.e. to remove the promo discount after the price was manualy changed).
						do tlibpromo-set-force-promo-engine-to-run
							parameter
								TRUE
						do tlibpromo-promo-engine
							parameter
								sales-order-line.*
								sales-order-line.*
								TRIGGER_AFTER_UPDATE
						do tlibpromo-set-force-promo-engine-to-run
							parameter
								FALSE
					endif
					pop sales-order-line
				endif
				//
				set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
				do b300-calc-total-amounts-update-header
				do display-totals
				if sol-line-type = "KN"
					if sol-item-price > 0
						do i5pricemod-pricing-module
							parameter
								FALSE
						do check-if-promo-exists
							returning lf-promo-exists
							lf-off-invoice
						if lf-promo-exists
							do insert-discounts-into-retail-promo
						endif
					endif
				endif
			endif
			refresh review
		elseif screenmode() = md-line-notes
			get stock-master
				on index stock-code
				key is stock-code
			on error
				set stk-issue-control-code = SPACES
				set stk-packaging-flag = SPACES
				set stk-licences-rebate-flag = SPACES
				set stk-outside-supplier-flag = SPACES
				set stk-measurement-flag = SPACES
			endon
			do ask-type-of-note-line-inc-combined
			refresh review
		elseif screenmode() = md-job-cbs
			do assign-cbs-sequence
				parameter so-order-no so-bo-suffix sol-line-seq
		elseif screenmode() = md-bulk-cbs
			do bulk-assign-cbs-sequence
				parameter so-order-no so-bo-suffix
//1.01 begin [>
		elseif screenmode() = md-container-details
			do container-details
//1.01 end <]
		endif
		//
		if screenmode() in {correct md-price}
			set i5soldisc-general-disc-rate = 0
		endif
		do mult-disc-exchange-items same	// pass through the modes
		if screen-mode() = remove
			if sol-line-type in { 'SC' 'ST' }
				// NOTE: line amt for charges and tax
				set sol-line-amount = 0
				set sol-shipped-sales-tax-amt = 0
				set sol-ordered-sales-tax-amt = 0
			endif
			set sol-shipped-qty = 0
			set sol-ordered-qty = 0
			set ws-entered-stock-code = stock-code
			CLEAR_AND_REFRESH_BB_FIELDS
		elseif screen-mode() = get-customer
			if so-order-source in {I5SOURCE_POS_LANE_ORDER I5SOURCE_INTERNAL_POS}
				do get-cash-customer once
				do display-totals
			else
				message "Get customer option only available for POS"
			endif
		elseif screen-mode() = md-pos-options
			//Only accessible when point-of-sale-mode-used = '5'
			if so-order-source in {I5SOURCE_POS_LANE_ORDER I5SOURCE_INTERNAL_POS}
				do pos5-options-menu once
				do display-totals
			else
				message "POS options only available for POS"
			endif
		elseif i50lines-contracts-used
			if screen-mode() = entry
				set i50entry-sol-ordered-qty = ZERO
				set i50entry-sol-line-amount = ZERO
				set i50entry-sol-shipped-qty = ZERO
			endif
		endif
		if sol-line-type in {'SN' 'WN'}
		and screen-mode() in {correct remove entry md-detail-entry md-enter-proform-details }
		and i50lines-contracts-used
			do reduce-contract-qty same
		endif
		//
		if sol-line-type = "WN"
		or i50lines-other-whses-selected = YES
		and screenmode() in {entry md-detail-entry}
			if i5pricemod-price-used != 0
			and i5pricemod-price-rule[i5pricemod-price-used] = '06'
			and sol-price-overide-flag not in {I5SOSTATII_ALT_PRICE
											I5SOSTATII_ALT_OVER_PRICE
											I5SOSTATII_STK_ALT_PRICE}
				set lf-recalc-item-price = NO
			else
				set lf-recalc-item-price = YES
			endif
			do public-allow-recalc-item-price
				parameter
					sales-order.*
					lf-recalc-item-price
				returning
					lf-recalc-item-price
			push sales-order-line
			do m50lines-build-other-whse-from-notes same
				parameters are lf-recalc-item-price
			pop sales-order-line
		endif
		//
		if screenmode() = entry
		and sys-so-use-of-price-ref = 'C'
		and sol-line-type in {'SN' 'WN' 'KN'}
		and sol-price-ref != ZERO
			spl 'so/m50premium'
				parameters are str(so-order-no) so-bo-suffix str(sol-line-seq)
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
		endif
		do check-overide-line-program same
		//
		if screenmode() = remove
			if I5PIECES_PRODUCT
				save sales-order-line
				do i5pieces-remove-tally-note-lines
					parameters are
						so-order-no
						so-bo-suffix
						sol-line-seq
				do i5pieces-remove-tally-detail-lines
					parameters are
						stk-measurement-flag
						so-order-no
						so-bo-suffix
						sol-line-seq
				restore sales-order-line
			else
				do public-tally-item
					parameter
						stock-master.*
						sales-order-line.*
						ws-mode-type
					returning
						lf-field-ok
						sol-ordered-qty
			endif
			//inter company links to be removed here
			do clibiclog-delete-iclink-for-so
				parameters
					so-order-no
					so-bo-suffix
					sol-line-seq
					sys-consolidation-division
		endif
		if screenmode() in {md-detail-entry,entry,correct}
		and I5PIECES_PRODUCT
		and i5pieces-pieces[1] != 0
			save sales-order-line
			do i5pieces-remove-tally-note-lines
				parameters are
					so-order-no
					so-bo-suffix
					sol-line-seq
			do i5pieces-remove-tally-detail-lines
				parameters are
					stk-measurement-flag
					so-order-no
					so-bo-suffix
					sol-line-seq
			restore sales-order-line
			message-box "Do you want to display the Pieces as a note line?"
				title is "Display Pieces"
				message-buttons MSG_BOX_YES_NO
				default is MSG_BOX_YES
				icon is MSG_BOX_QUESTION
				optional
				tag 2
			if message-status() = MSG_BOX_YES
				save sales-order-line
				do i5pieces-write-extra-tally-details
					parameters are
						stk-measurement-flag
						so-order-no
						so-bo-suffix
						sol-line-seq
				restore sales-order-line
				do i5pieces-build-tally-note-lines
					parameters are stk-measurement-flag
						so-order-no
						so-bo-suffix
						sol-line-seq
			else
				save sales-order-line
				do i5pieces-write-extra-tally-details
					parameters are
						stk-measurement-flag
						so-order-no
						so-bo-suffix
						sol-line-seq
				restore sales-order-line
			endif
		endif
		if so-order-type-code = I5SO_TYPE_ASSET_CAPITAL
		and screenmode() = entry
		and (lf-depreciation-code != SPACES
			or lf-location-code != SPACES
			or lf-asset-group != SPACES)
			initialize sales-order-line-notes
				leaving so-order-no so-bo-suffix sol-line-seq
			set soln-type = '~Z'
			set soln-seq-no = 1
			set lf-location-text = concat("Loc:",lf-location-code)
			set lf-group-text = concat("Grp:",lf-asset-group)
			set lf-depreciation-text = concat("Dpr:",lf-depreciation-code)
			string soln-text inserting lf-location-text at 1
			string soln-text inserting lf-group-text at 9
			string soln-text inserting lf-depreciation-text at 17
			insert sales-order-line-notes
		endif
		// Check to ensure lot/serial preallocation matches
		// shipped quantity and if not, enforce manual correction.
		// under preallocation is OK but not over preallocation.
		if screenmode() = correct
		and stk-serialized-flag not in { NO SPACES }
			get sales-order-picking-location lookup
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix sol-line-seq
			on error ENOREC
				// it's OK, no pre-allocation
			else
				select lf-preallocated-qty = sum(sol-picked-qty)
					from sales-order-picking-location
					where so-order-no = :so-order-no
					and so-bo-suffix = :so-bo-suffix
					and sol-line-seq = :sol-line-seq
				detail
				endselect
				if lf-preallocated-qty != sol-shipped-qty
					do i50lines-get-serial-no-info same
						parameter
							ws-sopl-record-exists
				endif
			endon
		endif
		do i50strupd-perform-global-unlock
			parameters so-order-no so-bo-suffix sol-line-seq
				FALSE	//Not a time out.
				i50entry-stock-warehouse-locked
				stock-code so-whse-to i50entry-transfer-between-whse
				TRUE	//Remove any stock reservation.
			returning i50entry-stock-warehouse-locked
	not-confirmed
		set i5pricemod-price-flag-override = FALSE
		if screenmode() in { entry, md-detail-entry}
		and sol-line-type = 'SN'
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					FALSE	//Not a time out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
		endif
		do not-confirmed-a300-lines same
		if screenmode() != correct
			CLEAR_AND_REFRESH_BB_FIELDS
		endif
	endconfirm
after
	//this section is not passed through if an exit command is issued
	//it is however passed through if a DEL is hit on the command line
	do test-to-do-alert
	if not ws-ok
		back-to-detail
	endif
	//
	do lock-promo-for-other-whse
		parameters
			so-order-no
			so-bo-suffix
	//
	do check-for-promo-alerts
		returning
			lf-exit
	if lf-exit
		back-to-detail			//user has chosen on promo alert warning to continue processing line entry
	endif
	set ws-del-hit = YES
	if screenmode() in { entry md-detail-entry }
		do i50strupd-perform-global-unlock
			parameters so-order-no so-bo-suffix sol-line-seq
				FALSE	//Not a time out.
				i50entry-stock-warehouse-locked
				stock-code so-whse-to i50entry-transfer-between-whse
				TRUE	//Remove any stock reservation.
			returning i50entry-stock-warehouse-locked
	endif
endscreen //a300-get-order-lines -----------------------------------------------

procedure check-for-van-whse
	// only need to do this once for the order!
	if i50lines-whse-type = IWTYPEDEF_VAN_WHSE
	or (i50entry-transfer-between-whse = YES
			and ws-whse-to = IWTYPEDEF_VAN_WHSE )
		//
		// this will process all lines of the order!
		spl "so/m5serial" parameters are "-maint-for-van"
			so-order-no so-bo-suffix
			sol-line-seq i50entry-sales-credit
			'-alldespatch' 'modetype-not-used'
			ws-van-id	// this is the van location
		get sales-order lock
	endif
endprocedure //check-for-van-whse --------------------------------------------

procedure calc-rms-price-seq-16-active
	returning
		lr-rms-price-seq-16-active	type boolean
	local field
		lf-i						pic 99
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'BP' 'PRICES'
	on error
		set lr-rms-price-seq-16-active = FALSE
	else
		if sys-description = spaces
		or sys-so-pricing-method not in {'A' 'B'}
			set lr-rms-price-seq-16-active = FALSE
		else
			for lf-i = 1 to 20
				if substring(sys-description,(lf-i + lf-i - 1),(lf-i + lf-i)) = "16"
					set lr-rms-price-seq-16-active = TRUE
					break
				endif
			endfor
		endif
	endon
endprocedure // calc-rms-price-seq-16-active ----------------------------------

procedure calc-rms-multi-discounts
	returning
		lr-rms-multi-discount			pic x(5)
	local field
		lf-show-in-invoice				pic x
	//
	if ws-rms-price-seq-16-active
		extract sales-order-line-retail-promo
			on index so-order-no so-bo-suffix sol-line-seq solrp-promotion
			key so-order-no so-bo-suffix sol-line-seq ZERO
			next same so-order-no so-bo-suffix sol-line-seq
		detail
			get system-table
				on index sys-tbl-type sys-tbl-code
				key 'RB' solrp-disc-code
			on error
			else
				set lf-show-in-invoice = substring(sys-tbl-alpha-2,1,1)
				if lf-show-in-invoice = "Y"
					set lr-rms-multi-discount = "Multi"
					break
				endif
			endon
		endextract
	endif
endprocedure // calc-rms-multi-discounts --------------------------------------

procedure bb-get-supplier-details
	returning	lr-bb-supplier-code				like cre-accountcode
				lr-bb-supplier-shortname		like cr-shortname
	//
	if sol-line-type = 'SS'
		set lr-bb-supplier-code = stock-code
	else
		set lr-bb-supplier-code = SPACES
	endif
	//
	if (sol-line-type = 'SS'
		and sys-raise-po-from-so in { '2' '3' '4' '5' }
		and sol-print-line != 'J'
		and lr-bb-supplier-code != SPACES)
	or sol-line-type in { 'SN', 'KN', 'WN', 'RR' }
		do public-get-supplier-name
			parameter	sol-line-type
						lr-bb-supplier-code
						stock-code
			returning	lr-bb-supplier-code
						lr-bb-supplier-shortname
	else
		set lr-bb-supplier-shortname = SPACES
	endif
	do public-get-sales-order-supplier
		parameter	lr-bb-supplier-code
					lr-bb-supplier-shortname
					sales-order-line.*
		returning	lr-bb-supplier-code
					lr-bb-supplier-shortname
endprocedure //bb-get-supplier-details ---------------------------------------

procedure bb-get-product-group-details
	returning	lr-bb-pg-desc					like sys-description
				lr-bb-sol-item-group			like sol-item-group
	//
	if sol-line-type in { 'SS' , 'RN' }
	and sol-print-line != 'J'
		set sys-tbl-code = sol-item-group
	elseif sol-line-type in { 'SN', 'KN', 'WN', 'RR' }
		set sys-tbl-code = stock-group
	else
		set sys-tbl-code = SPACES
	endif
	set lr-bb-sol-item-group = sys-tbl-code
	if sys-tbl-code = SPACES
		set sys-description = SPACES
	else
		get system-table
			key is 'PG' sys-tbl-code
		on error
			set sys-description = '** Lost Item Group **'
		endon
	endif
	set lr-bb-pg-desc = sys-description
endprocedure //bb-get-product-group-details ----------------------------------

procedure bb-get-print-line-and-chg-type
	returning	lr-bb-sol-print-line			like sol-print-line
				lr-bb-sol-chg-type				pic x(10)
	//
	set lr-bb-sol-print-line = sol-print-line
	if sol-line-type in { 'SC', 'SN', 'KN', 'WN' }
		if sol-chg-type = "S"
			set lr-bb-sol-chg-type = "Stocked"
		elseif sol-chg-type = 'K'
			set lr-bb-sol-chg-type = "Kit"
		elseif sol-chg-type = "D" and sol-line-type != 'SC'
			set lr-bb-sol-chg-type = "Component"
		elseif sol-chg-type = "T"
			set lr-bb-sol-chg-type = "Sub Kit"
		elseif sol-chg-type = 'X'
			set lr-bb-sol-chg-type = "X/ref"
		else
			set lr-bb-sol-chg-type = sol-chg-type
		endif
	else
		set lr-bb-sol-chg-type = SPACES
	endif
endprocedure //bb-get-print-line-and-chg-type --------------------------------

procedure bb-get-line-notes-exists
	returning	lr-bb-line-notes-exists			pic x
	//
	set lr-bb-line-notes-exists = SPACES
	extract sales-order-line-notes
		on index so-order-no so-bo-suffix sol-line-seq soln-type soln-seq-no
		key is so-order-no so-bo-suffix sol-line-seq
		next same so-order-no so-bo-suffix sol-line-seq
		where soln-type in {"~M" "~O" "~L"}
	detail
		set lr-bb-line-notes-exists = 'Y'
		break
	endextract
endprocedure //bb-get-line-notes-exists --------------------------------------

procedure bb-get-qty-related-fields
	returning	lr-bb-sol-ordered-qty				like sol-ordered-qty
				lr-bb-sol-stk-unit-desc				like sol-stk-unit-desc
				lr-bb-stk-pack-qty					like stk-pack-qty
				lr-bb-sol-stk-unit-conversion		like sol-stk-unit-conversion
				lr-bb-sol-price-uom					like sol-price-uom
				lr-bb-sol-shipped-qty				like sol-shipped-qty
				lr-bb-sol-backorder-qty				like sol-backorder-qty
	//
	if sol-line-type in { 'SN' 'KN' 'WN' 'SS' }
		set lr-bb-stk-pack-qty = stk-pack-qty
	else
		set lr-bb-stk-pack-qty = 0
	endif
	if sol-line-type not in { 'DN' }
			set lr-bb-sol-ordered-qty = sol-ordered-qty
			set lr-bb-sol-shipped-qty = sol-shipped-qty
			set lr-bb-sol-backorder-qty = sol-backorder-qty
			set lr-bb-sol-stk-unit-desc = sol-stk-unit-desc
			set lr-bb-sol-stk-unit-conversion = sol-stk-unit-conversion
			set lr-bb-sol-price-uom = sol-price-uom
		else
			set lr-bb-sol-ordered-qty = 0
			set lr-bb-sol-shipped-qty = 0
			set lr-bb-sol-backorder-qty = 0
			set lr-bb-sol-stk-unit-desc = SPACES
			set lr-bb-sol-stk-unit-conversion = 0
			set lr-bb-sol-price-uom = 0
		endif
endprocedure //bb-get-qty-related-fields -------------------------------------

procedure bb-get-price-related-fields
	returning	lr-bb-sol-item-price			like sol-item-price
				lr-bb-price-uom-desc			like sol-stk-unit-desc
				lr-bb-sol-disc-rate				like sol-disc-rate
				lr-bb-sol-item-wholesale-price	like sol-item-wholesale-price
				lr-bb-option					pic x(30)
	//
	do get-price-rule-desc
		returning	lr-bb-option
	//
	if sol-line-type in { 'SN' 'KN' 'WN' 'SS' }
		// get the pricing UOM!! as opposed to the qty UOM.
		do get-the-pricing-uom
			returning
				lr-bb-price-uom-desc
	else
		set lr-bb-price-uom-desc = SPACES
	endif
	if sol-line-type not in { 'DN' }
		set lr-bb-sol-item-price = sol-item-price
		set lr-bb-sol-disc-rate = sol-disc-rate
		set lr-bb-sol-item-wholesale-price = sol-item-wholesale-price
	else
		set lr-bb-sol-item-price = 0
		set lr-bb-sol-disc-rate = 0
		set lr-bb-sol-item-wholesale-price = 0
	endif
endprocedure //bb-get-price-related-fields -----------------------------------

procedure bb-get-tax-related-fields
	returning	lr-bb-solt-tax-code				like solt-tax-code
				lr-bb-sol-tax-rate				like sol-tax-rate
	//
	do clibtaxso-get-sales-order-line-tax-code-for-display
		parameters
			so-order-no
			so-bo-suffix
			sol-line-seq
		returning
			lr-bb-solt-tax-code
	set lr-bb-sol-tax-rate = sol-tax-rate
	//
endprocedure //bb-get-tax-related-fields -------------------------------------

procedure bb-get-sol-line-amt-related-fields
	returning
		lr-bb-sol-ordered-sales-tax-amt		like sol-ordered-sales-tax-amt
		lr-bb-sol-ordered-disc-amt			like sol-ordered-disc-amt
		lr-bb-sol-ordered-line-amt			like sol-line-amount
		lr-bb-sol-shipped-sales-tax-amt		like sol-shipped-sales-tax-amt
		lr-bb-sol-shipped-discount-amt		like sol-shipped-discount-amt
		lr-bb-sol-shipped-amount			like sol-shipped-amount
		lr-bb-sol-backorder-sales-tax-amt	like sol-shipped-sales-tax-amt
		lr-bb-sol-backorder-discount-amt	like sol-shipped-discount-amt
		lr-bb-sol-backorder-amount			like sol-shipped-amount
	//
	if sol-line-type not in { 'DN' }
			set lr-bb-sol-ordered-sales-tax-amt = sol-ordered-sales-tax-amt
			set lr-bb-sol-ordered-disc-amt = sol-ordered-disc-amt
			set lr-bb-sol-ordered-line-amt = sol-line-amount
			set lr-bb-sol-shipped-sales-tax-amt = sol-shipped-sales-tax-amt
			set lr-bb-sol-shipped-discount-amt = sol-shipped-discount-amt
			set lr-bb-sol-shipped-amount = sol-shipped-amount
			if sol-backorder-qty = 0
				// no need to do the linecalc, just set to ZERO.
				set lr-bb-sol-backorder-amount = 0
				set lr-bb-sol-backorder-discount-amt = 0
				set lr-bb-sol-backorder-sales-tax-amt = 0
			else
				set i50entry-qty = sol-backorder-qty
				do i50entry-do-line-calc
				set lr-bb-sol-backorder-amount = i50entry-line-amt
				set lr-bb-sol-backorder-discount-amt = i50entry-disc-amt
				set lr-bb-sol-backorder-sales-tax-amt = i50entry-stax-amt
			endif
		else
			set lr-bb-sol-ordered-sales-tax-amt = 0
			set lr-bb-sol-ordered-disc-amt = 0
			set lr-bb-sol-ordered-line-amt = 0
			set lr-bb-sol-shipped-sales-tax-amt = 0
			set lr-bb-sol-shipped-discount-amt = 0
			set lr-bb-sol-shipped-amount = 0
			set lr-bb-sol-backorder-amount = 0
			set lr-bb-sol-backorder-discount-amt = 0
			set lr-bb-sol-backorder-sales-tax-amt = 0
		endif
endprocedure //bb-get-sol-line-amt-related-fields ----------------------------

procedure bb-get-cost-related-fields
	returning	lr-bb-sol-item-cost-string			like str-item-price
				lr-bb-sol-ordered-cost-string		like str-item-price
				lr-bb-sol-shipped-cost-string		like str-item-price
				lr-bb-gp-string						pic x(8)
	local field
				lf-bb-gp							pic s999v99
				lf-ordered-cost						like sol-line-cost
	//
	if (sol-line-type in { 'SN','KN' 'WN', 'RR' }
	and i50entry-show-costs in { YES 'B' })
	or sol-line-type = 'SS' 		// always show Special lines!
		do i50entry-get-conversion-factor
		push stock-master
		if sol-line-type = 'SS'
			set stk-price-per = sol-price-uom
		endif
		if sol-line-type = 'KN'
		and sol-item-cost != ZERO
		and sol-ordered-line-cost != ZERO
			// Kit item has to use the cost calculated from components.
			set lf-ordered-cost = sol-ordered-line-cost
		else
			do clib406-calc-line-cost
				parameters
					sol-item-cost
					sol-ordered-qty
					sol-shipped-qty
					sol-line-type
					sol-stk-unit-conversion
					sol-stk-unit-desc
					stk-price-per
				returning
					lf-ordered-cost
		endif
		pop stock-master
		//
		set lr-bb-sol-ordered-cost-string = fstr(lf-ordered-cost,16,2)
		set lr-bb-sol-shipped-cost-string = fstr(sol-line-cost,16,2)
		set lr-bb-sol-item-cost-string = fstr(sol-item-cost,14,4)
		//
		do calc-the-gp-percent
			parameters
				lf-ordered-cost
				sol-line-amount
				sol-ordered-sales-tax-amt
				sol-tax-rate
			returning
				lf-bb-gp
				lr-bb-gp-string
	endif
endprocedure //bb-get-cost-related-fields ------------------------------------

procedure bb-get-extra-line-info
	returning
		lr-bb-extra-line-info				like sol-line-description
	local field
		lf-print-flag-desc					pic x(20)
		lf-rms-multi-discount				pic x(5)
	//
	if BMSDEF_IS_ALTERNATE_ITEM // Alternative Item
		set lr-bb-extra-line-info = concat("Ordered: ",strconcat(sol-line-description)," Substituted By :",strconcat(stock-code))
	elseif BMSDEF_IS_SUBSTITUTED_ITEM // Substitute Item
		set lr-bb-extra-line-info = concat("Substituted For: ",strconcat(sol-line-description))
	endif
	//	Short ship reason code
	if sol-short-ship-reason-code <> SPACES
		set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info)," Short Ship: ",sol-short-ship-reason-code)
	endif
	//	sol-whse-code contains : "SN" Delivery Address code specified for item
	//	 					   : "WN" Item allocated to another warehouse
	//						   :     - "****" item allocated to "Multi" Warehouses
	if sol-whse-code <> SPACES
		set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info),
									if-then-else(sol-line-type = "WN"," Other Whse: ",if-then-else(sol-line-type = "RN", " Item Group: ", " Del Address: ")),
									if-then-else(sol-whse-code = "****","Multi",sol-whse-code))
	endif
	// Expected Delivery Date for item
	if sol-line-date <> ZERO
		set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info)," Del Date: ",julian-to-date(sol-line-date))
	endif
	//	Rental/Service line item
	if sol-line-type = "RN"
		if substring(stock-code,1,6) = 'H     '	// Asset Hire
			set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info)," Item: ",substring(stock-code,7,strlen(stock-code)))
		else									// Asset Serviced
			set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info)," Item: ",stock-code)
		endif
	endif
	// Outside Work - Flags the generation of an assembly sales order and related purchase order.
	if stk-outside-supplier-flag = 'O'
	and i50entry-sales-credit = NO
	and i50entry-return-authorisation = NO
		set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info)," Supp: ",ws-out-supplier," Grp: ",str(ws-group-start))
	endif
	//	Check if RMS Discounts have been applied to the line item
	do calc-rms-multi-discounts
		returning lf-rms-multi-discount
	if lf-rms-multi-discount <> SPACES
		set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info)," RMS: ",lf-rms-multi-discount)
	endif
	// Credit.  Display if returned item will affect stock level.
	if i50entry-sales-credit = YES
	or i50entry-return-authorisation = YES
		set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info),' Affect Stk: ',sol-update-whse)
		//  Display the date the item was recieved if a distrib whse.
		if i50lines-whse-type in IWTYPEDEF_DISTRIB_WHSE
			set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info),' Recvd: ',str(sol-line-date))
		endif
	endif
	// Display the whse where item is returned for Rotable .
	if sol-line-type = 'RR'
		set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info),' Rtn Whse: ',sol-whse-code)
	endif
	//Check if using "batch classification" codes
	if sys-licence-type in { '3' '4' }
	and sol-line-type = "SN"
	and sol-chg-type not = 'D'
	and stk-serialized-flag = 'L'	//Lot tracked
		spl "so/m50extra" parameters are "-labsystem"
			stock-code stock-group
			returning ws-lab-system-used-for-item
			leave-files-open
		if ws-lab-system-used-for-item = YES
			set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info),' Classif: ',sol-whse-code)
		endif
	endif
	//
	if sol-print-line not in { "Y" SPACES }
	and sol-chg-type <> "D"
		if sol-print-line = "N"
			set lf-print-flag-desc = '(Hidden)'
		elseif sol-print-line = "F"
			set lf-print-flag-desc = '(Factory Supplied)'
		elseif sol-print-line = "I"
			set lf-print-flag-desc = '(Sourced Internally)'
		elseif sol-print-line = "K"
			set lf-print-flag-desc = '(Indent Item)'
		elseif sol-print-line = "M"
			set lf-print-flag-desc = '(Manufactured Item)'
		elseif sol-print-line = "T"
			set lf-print-flag-desc = '(Taken Item)'
		endif
		set lr-bb-extra-line-info = concat(strconcat(lr-bb-extra-line-info),' ',lf-print-flag-desc)
	endif
	//
	if lr-bb-extra-line-info <> SPACES
	and substring(lr-bb-extra-line-info,1,1) = SPACES
		set lr-bb-extra-line-info = substring(lr-bb-extra-line-info,2,strlen(lr-bb-extra-line-info))
	endif
endprocedure //bb-get-extra-line-info ----------------------------------------

procedure public-get-supplier-name export
//
//clstart
//cldesc	This procedure gets the accounts receivable supplier record
//			using the accountcode passed, if the line type is SS or for
//			line types of SN, it will get the priority one supplier, if
//			that does not exist it will get the first supplier!
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales order line type, ie. SN or SS
//clp2 		Either SPACES or the supplier code ( if line type is SS )
//clp3		stock-code
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Supplier code
//clr2      Supplier name
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sol-line-type			like sol-line-type					// clp1
		lp-supplier-code			like cre-accountcode				// clp2
		lp-stock-code				like stock-code						// clp3
	returning
		lr-supplier-code			like cre-accountcode				// clr1
		lr-cr-shortname				like cr-shortname					// clr2
//clend
///////////////////////////////////////////////////////////////////////////////
//
	if lp-sol-line-type = 'SS'
		get cre-master
			on index cre-accountcode
			key is lp-supplier-code
		on error
			set cr-shortname = '* Lost Supplier *'
		endon
		set lr-supplier-code = lp-supplier-code
		set lr-cr-shortname = cr-shortname
	elseif sol-line-type in { 'SN', 'KN', 'WN', 'RR' }
		// get the priority one supplier
		set cre-accountcode = SPACES
		get stock-supplier
			 on index stock-code sup-priority
			 key is lp-stock-code 1
		on error
			get stock-supplier
				on index stock-code
				key is lp-stock-code
			on error
			endon
		endon
		set lr-supplier-code = cre-accountcode
		if lr-supplier-code != SPACES
			get cre-master
				on index cre-accountcode
				key is lr-supplier-code
			on error
				set cr-shortname = '* Lost Supplier *'
			endon
			set lr-cr-shortname = cr-shortname
		endif
	else
		set lr-supplier-code = lp-supplier-code
		set lr-cr-shortname = SPACES
	endif
endprocedure //public-get-supplier-name --------------------------------------

procedure verify-next-unique-so-line-seq
	parameter	lp-line-seq		like ws-line-seq
	local		lf-attempts		pic 9(3)
	returning	lr-line-seq		like ws-line-seq
	//
	set lr-line-seq = lp-line-seq
	//
	while lf-attempts < 10
		// Loop failsafe, try 10 times only, should need 1 max!!!
		set lf-attempts += 1
		//
		get sales-order-line LOOKUP				//lookup preserves currency :)
			on index so-order-no so-bo-suffix sol-line-seq
			key so-order-no so-bo-suffix lr-line-seq
		on error
			// Lookup fail is good - means this sequence is good to go.
			//
			// Doesn't it just make you feel like King of the Road?
			//
			// Sequence for sale or rent,
			// Rooms To Let - fifty cents,
			// No phone, no pool, no pets
			// I aint got no... business singin Roger Miller songs about
			// finding a vacancy in SO lines so lets get out of here :)
			break
		else
			// Ooops, sequence taken. Increment next vacant one and continue
			set lr-line-seq += 1
		endon
	endwhile
	//
	if lf-attempts >= 10
		select lr-line-seq = max(sol-line-seq) + 1
		from	sales-order-line
		where	so-order-no = :so-order-no
				and so-bo-suffix = :so-bo-suffix
		detail
		endselect
		get sales-order-line LOOKUP
			on index so-order-no so-bo-suffix sol-line-seq
			key so-order-no so-bo-suffix lr-line-seq
		on error ENOREC
			// Lookup fail is good - means this sequence is good to go.
		else
			// Problemo... Restore the sequence we started with.
			set lr-line-seq = lp-line-seq
			message "Cannot position for next unique line seq from: " lr-line-seq
		endon
	endif
endprocedure //verify-next-unique-so-line-seq --------------------------------

screen show-adjusted-quantity
	parameters
		lp-shipped-qty			like sol-shipped-qty
		lp-backorder-qty		like sol-backorder-qty
	//
	window @1,1 to @7,32
		title is "Changed Inventory Levels"
	//
	detail
		display "Kit inventory levels have changed." @2,5 background
		display "The adjusted quantities are:" @3,5 background left
		display "  Shipped Qty :" @4,1 background
		display str(lp-shipped-qty) @4,17 background
		display "Backorder Qty :" @5,1 background
		display str(lp-backorder-qty) @5,17 background
		pause
endscreen //show-adjusted-quantity ---------------------------------------------

procedure determine-line-type-description
	parameters
		lp-order-source					like so-order-source
		lp-line-type					like sol-line-type
		lp-stock-code					like stock-code
		lp-print-line					like sol-print-line
	returning
		lr-display-stock-code			like ws-accept-stk-code
	//
	if lp-line-type = "ST"
		set lr-display-stock-code = translate "Tax"
	elseif lp-line-type = "SC"
		set lr-display-stock-code = concat("Charges Type ", sol-chg-type)
	elseif lp-line-type = "SS"
		if lp-order-source = I5SOURCE_JOB_COSTING
		and lp-stock-code != SPACES
			set lr-display-stock-code = lp-stock-code
		else
			set lr-display-stock-code = translate "Special"
		endif
	elseif lp-line-type = "DN"
		if lp-stock-code in { 'Text', 'Terms', 'Memo', 'Note' }
			set lr-display-stock-code = lp-stock-code
		else
			if lp-print-line = 'N' // When Hidden
				set lr-display-stock-code = translate "Memo."
			else
				set lr-display-stock-code = translate "Note."
			endif
		endif
	elseif lp-line-type = "RN"
		if lp-order-source = I5SOURCE_SERVICE_CONTRACT_INVOICE
			set lr-display-stock-code = translate "Service"
		else
			set lr-display-stock-code = translate "Rental"
		endif
	elseif lp-line-type = "RS"
		set lr-display-stock-code = translate "Unit Sale"
	else
		set lr-display-stock-code = lp-stock-code
	endif
endprocedure //determine-line-type-description -------------------------------

procedure check-manufactured-transfer
// Allow the transfer of manufactured items b/w warehouses with the SAME
// factory when there is sufficient avail. qty from the from whse.
// Transfer of manufactured items b/w warehouses with different factory is
// allowed - irrespective of whether there is sufficient avail. qty
	returning lr-reenter			type boolean
	//
	local field
		lf-from-whse				like whse-code
		lf-ordered-qty				like sol-ordered-qty
		lf-shipped-qty				like sol-shipped-qty
		lf-from-factory				like whse-code
		lf-to-factory				like whse-code
	//
	set lr-reenter = FALSE
	save system-table
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is "WH" so-whse-to
	on error
		set lf-to-factory = SPACES
	else
		set lf-to-factory = sys-tbl-alpha-3
	endon
	//
	if i50lines-used-whse-select-mode
		extract sales-order-line-notes
			on index so-order-no so-bo-suffix sol-line-seq soln-type
				soln-seq-no
			key is so-order-no so-bo-suffix sol-line-seq "~W" 0
			next same so-order-no so-bo-suffix
		detail
			set lf-from-whse = substring(soln-text,1,4)
			get system-table
				on index sys-tbl-type sys-tbl-code
				key is "WH" lf-from-whse
			on error
				set lf-from-factory = SPACES
			else
				set lf-from-factory = sys-tbl-alpha-3
			endon
			set lf-ordered-qty = num(substring(soln-text,5,16))
			set lf-shipped-qty = num(substring(soln-text,17,28))
			if lf-from-factory = lf-to-factory
			and lf-ordered-qty > lf-shipped-qty
				message 'Insufficient manufactured qty for transfer from '
						lf-from-whse
				set lr-reenter = TRUE
				break
			endif
		endextract
	endif
	if not lr-reenter
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is "WH" so-whse-code
		on error
			set lf-from-factory = SPACES
		else
			set lf-from-factory = sys-tbl-alpha-3
		endon
		if lf-from-factory = lf-to-factory
		and sol-backorder-qty != 0
			message 'Insufficient manufactured qty for transfer from '
					so-whse-code
			set lr-reenter = TRUE
		endif
	endif
	restore system-table
endprocedure //check-manufactured-transfer -----------------------------------

procedure confirm-of-a300-lines
	parameter
		lp-install-link-found 		type boolean
	returning
		lr-action					pic x
	local field
		lf-licence-ok				type boolean
		lf-promo-exists				type boolean
		lf-off-invoice				type boolean
		lf-licence-error-msg		pic x(50)
	//
	//For modes entry md-detail-entry correct remove md-price
	//
	set lr-action = SPACES
	//lr-action = spaces - do nothing
	//          = 1 continue
	//          = 2 refresh review
	//          = 3 refresh data
	//			= 4 reenter ws-accept-stk-code optional
	//			= 5 exit
	//
	if screenmode() = remove
		//1.00 start [>
		if stock-code = "300000" and i50linec-calculate
			extract sales-order-picking-location
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix sol-line-seq
				next same so-order-no so-bo-suffix sol-line-seq
			detail
				set sol-picked-qty = 0
				update sales-order-picking-location
				extract stock-location
					on index whse-code stock-code sl-location-code sl-reference-lot
					where sl-reference-lot =  sol-pick-reference
					and stock-code = "300000"
				detail
					set sl-qty-due-out = 0
					update stock-location
				endextract
			endextract
		endif
		//1.00 end <]
		do i50lines-delete-sales-order-line-notes
		do remove-sales-order-line-retail-promo
		do check-issues-to-work-orders
		do remove-so-po-link
		//
		push sales-order
		//No need to push/pop sales-order-line
		//  as its being removed.
		spl "so/m50extra"
			parameters
				"-so-bom-link"
				so-order-no
				so-bo-suffix
				sol-line-seq
		pop sales-order
		//
		do delete-sales-order-line-extra-detail
		if (get-param(8) = '-glcodingused' and sol-line-type <> "DN")
			do remove-sales-order-gl-coding
		endif
		if i50lines-whse-type = IWTYPEDEF_VAN_WHSE
		or stk-serialized-flag in {"L" "P"}
			//m5serial("-lot") 'll remove so picking locn,
			//adjust fifo records
		else
			do remove-sales-order-picking-location
		endif
		if I5TENDTRK_GIFT_VOUCHER_PROD
			//remove gift voucher details
			do i5tendtrk-remove-voucher
				parameters are so-order-no so-bo-suffix sol-line-seq
		endif
		set ordlog-type = 9
		if sol-line-type = 'DN'
			set ordlog-old-info
				= substring(sol-line-description,1,15)
			set ordlog-new-info
				= substring(sol-line-description,16,30)
		elseif sol-line-type = 'SC'
			if str-len(sol-line-description) > 15
				set ordlog-old-info
					= substring(sol-line-description,1,15)
				set ordlog-new-info
					= substring(sol-line-description,16,30)
			else
				set ordlog-old-info = sol-line-description
				set ordlog-new-info = SPACES
			endif
		else
			set ordlog-old-info = stock-code
			set ordlog-new-info = SPACES
		endif
		set ordlog-old-value = sol-ordered-qty
		set ordlog-new-value = sol-item-price
		set ordlog-change-value = 0 - sol-shipped-amount
		set ordlog-ordered-change-value = 0 - sol-line-amount
		set ordlog-line-type =  sol-line-type
		set ordlog-item-wholesale-price = sol-item-wholesale-price
		set ordlog-disc-rate = sol-disc-rate
		set ordlog-ordered-tax-chg-value = 0 - sol-ordered-sales-tax-amt
		do a9000-write-audit-file
		do i50lines-change-no-of-items-on-order parameters 'R'
		set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
	elseif screenmode() in { entry, md-detail-entry, correct}
		if screenmode() in {entry md-detail-entry}
			do i50lines-change-no-of-items-on-order parameters 'A'
		endif
		if sol-item-price > 0
			// Insert retail promotion detail only if item price is not zero.
			do check-if-promo-exists
				returning lf-promo-exists
					lf-off-invoice
			if lf-promo-exists
				do insert-discounts-into-retail-promo
			endif
		endif
		if ws-need-to-insert-note
			do i50entry-insert-xref-notes
				parameters are ws-orig-stock-code
		endif
		//
		if screenmode() = entry
		and ws-confirm = 'Q'
			save sales-order-line
			spl 'so/m50supquot' parameters are '-supplier' str(so-order-no)
				so-bo-suffix str(sol-line-seq) 'N'
				leave-files-open
			restore sales-order-line
			set ws-confirm = YES
		endif
	endif
	//
	if sol-line-type != 'DN'
		if screenmode() = remove
			if sol-print-line = 'J'
			and substring(sol-line-description,1,9) = "Project: "
				get job-cost-commitments lock
					on index job-commitment-type
						job-order-no job-order-suffix
					key is 'J' so-order-no so-bo-suffix
				on error
					message "Error: Removing quotation link record"
				else
					delete job-cost-commitments
				endon
			endif
			if (so-order-source = '#'
			or get-param(8) = '-glcodingused')
				do remove-sales-order-gl-coding
			endif
		endif
		//
		if screenmode() in { entry, md-detail-entry, correct }
		and sol-line-type = "RN"
			save sales-order-line
			spl "so/m50extra" parameters "-asset" str(so-order-no)
				so-bo-suffix fstr(sol-line-seq,4,2)
			get sales-order-line lock
				on index so-order-no so-bo-suffix sol-line-seq
			restore sales-order-line
		endif
		//
		set ws-problems-found = NO
		if sol-line-type = 'SN'
		and sol-chg-type != 'D'		// ignore components
		and stk-licences-rebate-flag = 'L'
		and (i50entry-normal-order = YES
		or i50entry-forward-order = YES )
			do i50lines-check-licence-details same
				returning lf-licence-ok
			if not lf-licence-ok
			and screenmode() != remove
				//the licence has expiry or is outside
				//date selection, or exceeds qty
				//so just delete the line
				if i50lines-licence-problem-flag = NO_LICENCE
					set lf-licence-error-msg = "This customer requires a licence."
				elseif i50lines-licence-problem-flag = NO_LICENCE_WITH_CORRECT_UNIT
					set lf-licence-error-msg = "Requires licence with the correct unit description"
				elseif i50lines-licence-problem-flag = MIXED_SALE
					set lf-licence-error-msg = 'Cannot mix licensed goods with normal goods.'
				elseif i50lines-licence-problem-flag = LICENCE_EXPIRED
					set lf-licence-error-msg = "The customer licence has expired."
				elseif i50lines-licence-problem-flag = LIC_QTY_EXCEEDED
					set lf-licence-error-msg = "Customer licence has exceeded the max.qty."
				else
					set lf-licence-error-msg = "Item has no licence details."
				endif
				set ws-problems-found = YES
				message-box param-text("Cannot insert line - <<P1>>",lf-licence-error-msg)
				title 'Licence Detail'
				message-buttons MSG_BOX_STOP
				icon MSG_BOX_WARNING
				set lr-action = '2'
				exit
			endif
		endif
		if ws-problems-found = NO
			set reenter-needed = FALSE
			do rest-of-update-checks same
			if reenter-needed
				set ws-accept-stk-code = stock-code
				if screenmode() in { entry  md-detail-entry }
					do i50strupd-perform-global-unlock
						parameters so-order-no so-bo-suffix sol-line-seq
							FALSE	//Not a time out.
							i50entry-stock-warehouse-locked
							stock-code so-whse-to i50entry-transfer-between-whse
							TRUE	//Remove any stock reservation.
						returning i50entry-stock-warehouse-locked
				endif
				set lr-action = '4'
				exit
				//
			endif
			//now check the flag and exit only if the item
			// is not lot tracked with applicable broken pack charges.
			if ws-refresh-review = TRUE
				if (stk-serialized-flag = 'L'
				and (i50lines-pack-charge-applies = TRUE or stk-packaging-flag = 'X')
				and screenmode() in {entry md-detail-entry remove})
					// Do not exit here
				else
					set lr-action = '2'
					exit
				endif
			endif
			//
			//this must be tested after the refresh test
			if ws-update-sol-for-WN = TRUE
				set sol-shipped-qty = i50entry-sol-shipped-qty
				save sales-order-line
				get sales-order-line lock
					on index so-order-no so-bo-suffix sol-line-seq
				restore sales-order-line
				update sales-order-line lock
				on error
				endon
			endif
		else
			if screenmode() in { entry md-detail-entry }
				do i50strupd-perform-global-unlock
					parameters so-order-no so-bo-suffix sol-line-seq
						FALSE	//Not a time out.
						i50entry-stock-warehouse-locked
						stock-code so-whse-to i50entry-transfer-between-whse
						TRUE	//Remove any stock reservation.
					returning i50entry-stock-warehouse-locked
			endif
		endif
		if sys-so-pricing-method = 'C'
		and i50entry-sales-credit = YES
			if screenmode() = remove
				spl 'so/m50cnote.spl'
					parameters are '-remove-sol-details'
					str(so-order-no) so-bo-suffix
					fstr(sol-line-seq,4,2)
			else
				spl 'so/m50cnote.spl'
					parameters are '-setup-by-line-sol-details'
					str(so-order-no) so-bo-suffix
					fstr(sol-line-seq,4,2)
				if screenmode() in { correct md-price }
					set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
				else
					set i50lines-cal-display-totals = CURRENT_LINE_AND_NO_SEQ
				endif
				do b300-calc-total-amounts-update-header
				do display-totals
			endif
		endif
		if screenmode() in {entry md-detail-entry}
		and so-order-source in {I5SOURCE_ORDER_ENTRY I5SOURCE_POS_ORDER}
		and stk-stock-status = 'L'
		and sys-service-used <> NO
		// ONLY ONCE PER SALES ORDER
		and not lp-install-link-found
			message-box "View Engineer Capacity Graphs and optionally create installation call"
				title "Create Service Call"
				message-buttons MSG_BOX_YES_NO
				default MSG_BOX_YES
				icon is MSG_BOX_QUESTION
				optional
				tag 1434
			if message-status() = MSG_BOX_YES
				do create-install-call
			endif
			do check-for-install-link
				parameters are str(so-order-no)
				returning lp-install-link-found
		endif
		if screenmode() in {entry md-detail-entry}
		and ws-out-supplier != SPACES
			initialise sales-order-line-notes
				leaving so-order-no so-bo-suffix sol-line-seq
			set	soln-type = '~O'
			set soln-seq-no = 1
			set soln-text = concat(ws-out-supplier,zstr(ws-group-start,4,1))
			insert sales-order-line-notes
		elseif screenmode() = correct
		and ws-out-supplier != SPACES
			get sales-order-line-notes
				lock
				on index so-order-no so-bo-suffix sol-line-seq
					soln-type soln-seq-no
				key is so-order-no so-bo-suffix sol-line-seq '~O' 1
			on error
				initialise sales-order-line-notes
					leaving so-order-no so-bo-suffix sol-line-seq
				set	soln-type = '~O'
				set soln-seq-no = 1
				set soln-text = concat(ws-out-supplier,
									zstr(ws-group-start,4,1))
				insert sales-order-line-notes
			else
				set soln-text = concat(ws-out-supplier,
									zstr(ws-group-start,4,1))
				update sales-order-line-notes
			endon
		endif
		if screenmode() in {entry md-detail-entry}
		and ws-original-code != SPACES
			do write-original-part-line
		endif
		//
		if screenmode() in {entry md-detail-entry correct remove}
		and sol-line-type in { 'SN' 'WN' }
		and sol-chg-type != 'D'
		and stk-packaging-flag = 'X'
			if i50entry-transfer-between-whse = YES
				set i50pck-order-type = 'T'
			else
				set i50pck-order-type = SPACES
			endif
			if screenmode() in {entry md-detail-entry}
				do i50pck-process-package-lines entry
			else
				do i50pck-process-package-lines same
			endif
			do b300-calc-total-amounts-update-header
			do display-totals
		endif
		//
		if screenmode() in {entry md-detail-entry}
		and i50lines-pack-charge-applies = TRUE
			do i50lines-insert-broken-pack-charge
			do b300-calc-total-amounts-update-header
			do display-totals
		endif
		//
		do commit-auto-transaction
	endif
	//
	if screenmode() in { entry, md-detail-entry }
	and	stk-storage-type-flag = 'G'
		save sales-order-line
		spl "so/m50extra" parameters are "-property"
			str(so-order-no) so-bo-suffix str(sol-line-seq)
			leave-files-open
		set reenter-needed = 1
		restore sales-order-line
		get sales-order-line
		on error
		endon
	endif
	//
	if screenmode() in {entry md-detail-entry correct}
	and sys-ordered-or-shipped in {'1' '2'}
	and sol-line-type in {"SN" "SS" "WN"}
	and sol-chg-type not in {"D" "T"}
		if screenmode() in {entry, md-detail-entry}
			spl "so/m50reprate" parameters are "-entry" so-rep-code
				str(so-order-no) so-bo-suffix str(sol-line-seq)
		else
			spl "so/m50reprate" parameters are "-correct" so-rep-code
				str(so-order-no) so-bo-suffix str(sol-line-seq)
		endif
		get sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix sol-line-seq
		on error
		endon
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is so-order-no so-bo-suffix
		on error
		endon
		set lr-action = '2'
	endif
	//
	if screenmode() in {correct}
	and so-order-type-code = I5SO_TYPE_DIRECT_SHIP
		do update-direct-ship-po
	endif
endprocedure //confirm-of-a-300-lines ------------------------------------------

procedure update-direct-ship-po
	get sales-order-line-purchase
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix sol-line-seq
	on error
		// This will trap when Direct ship line item is corrected after entry and the order
		// is YET to be finalised. P/Order and Link file are created AFTER order is finalised.
	else
		get purchase-order lock
			on index po-order-no po-backorder-flag
			key is solp-po-order-no solp-backorder-flag
		on error
			//something is wrong. there should be a PO
		else
			set po-total-weight = ws-total-pack-weight
			update purchase-order
		endon
	endon
endprocedure //update-direct-ship-po -----------------------------------------

procedure validate-item-price
	//
	local field
		lf-zero-price-ok				type boolean
		lf-pos							pic 99
		lf-sol-item-price				like i5pricemod-item-price
	//
	returning
		lr-reenter-optional				type boolean
		lr-reenter						type boolean
	//
	set lr-reenter-optional = FALSE
	set lr-reenter = FALSE
	if substring(str-item-price,1,1) in {'R' 'M' 'W' 'G' 'C'}
	and sys-so-foreign-curr-flag in { '1' '4'}
	and so-curr-code != SPACES
		message "Can't convert to foreign currency"
		set lr-reenter-optional = TRUE
		exit
	endif
	if substring(str-item-price,1,1) in {'R' 'M' 'W' 'G'}
		set ws-disc-rate = num(substring(str-item-price,2,12))
		if substring(str-item-price,1,1)  = 'R'
			// This needs to be the same as i5pricemode.
			if prc-recommend-retail-inc-tax != 0
				set sol-item-price = prc-recommend-retail-inc-tax
			else
				set sol-item-price = prc-recommend-retail
			endif
			set sol-item-price = sol-item-price * (1 - (ws-disc-rate / 100))
		elseif substring(str-item-price,1,1)  = 'M'  //mark up
			if i8costsecu-cost-security-ok
				set sol-item-price = sol-item-cost *
					(1 + (ws-disc-rate / 100))
				do add-retail-tax-if-required
			else
				message "Security level invalid for this option"
				set lr-reenter = TRUE
				exit
			endif
		elseif substring(str-item-price,1,1)  = 'G'  //gross margin
			if sys-inv-profit-calc-by-value = 'C'
				set sol-item-price = sol-item-cost * ( (ws-disc-rate / 100) + 1 )
			else
				if ws-disc-rate = 100
					set sol-item-price = sol-item-cost * ws-disc-rate + sol-item-cost
				else
					set sol-item-price = sol-item-cost / ( 1 - (ws-disc-rate / 100) )
				endif
			endif
			do add-retail-tax-if-required
		else	// wholesale
			set sol-item-price = prc-wholesale-price *
				(1 + (ws-disc-rate / 100))
		endif
	elseif substring(str-item-price,1,1) = 'C'
		if i8costsecu-cost-security-ok
			//Confirm Cost plus percentage
			set ws-disc-rate = num(substring(str-item-price,2,12))
			set sol-item-price = sol-item-cost *
				(1 + (ws-disc-rate / 100))
			do add-retail-tax-if-required
		else
			message "Security level invalid for this option"
			set lr-reenter = TRUE
			exit
		endif
	else
		set lf-pos = pattern(uppercase(str-item-price),'[A-Z]')
		if lf-pos <> ZERO
			message "Not a valid price string, setting to zero."
		endif
		set sol-item-price = num(str-item-price)
	endif
	// NOTE: i5pm1-deemed-wholesale-price is setup in i5pricemod routine.
	set sol-item-wholesale-price = i5pricemod-deemed-wholesale-price
	//
	if sol-item-price = 0
	and so-order-type-code != I5SO_TYPE_TAX_ONLY
		do i50lines-check-zero-price
			parameters are sol-item-price ws-zero-price
			returning lf-zero-price-ok
		if lf-zero-price-ok = 2
			set lr-reenter = TRUE
			exit
		elseif not lf-zero-price-ok
			message-box 'WARNING: Item price is zero'
				title 'Zero Price'
				message-buttons MSG_BOX_OK
				icon is MSG_BOX_WARNING
				optional tag 1
		endif
	else
		//Delete zero price note if exists
		do i50lines-delete-zero-price-note
	endif
	//
	if so-order-type-code = I5SO_TYPE_TAX_ONLY
	and sol-line-type  != 'ST'
	and sol-item-price != ZERO
		message 'Only tax lines can have a value on tax only orders'
		set lr-reenter-optional = TRUE
		exit
	endif
	if sol-item-price < 0
		message 'Please only enter positive figures'
		set lr-reenter-optional = TRUE
		exit
	endif
	set lf-sol-item-price = sol-item-price
	if i50lines-price-conversion != 0
		and sol-stk-unit-desc != SPACES			  //unit is defined
		and (sol-stk-unit-desc = stk-alt-unit-desc //alternate unit used
		or sol-stk-unit-conversion not in {0 1})
		and stk-conversion-factor != 1		 	  //has a conv. factor.
			set lf-sol-item-price = sol-item-price / i50lines-price-conversion
    endif
	if sys-so-pricing-method = "F"
	and sol-line-type = "SS"
		if (sol-item-price != 0 and screenmode() = entry)
		or sol-item-price != i5pricemod-item-price
			if sol-price-overide-flag != "U"
				set sol-price-overide-flag = YES
			endif
		endif
	endif
	if sol-line-type in {'SN' 'WN'}
		if ws-order-flag = BRANCH
		and lf-sol-item-price != i5pricemod-item-price
			message "You are not allowed to change the price"
			set lr-reenter = TRUE
			exit
		elseif lf-sol-item-price != i5pricemod-item-price
			if sol-price-overide-flag = I5SOSTATII_ALT_PRICE
				set sol-price-overide-flag = I5SOSTATII_ALT_OVER_PRICE
			elseif sol-price-overide-flag not in {I5SOSTATII_ALT_OVER_PRICE
				I5SOSTATII_STK_ALT_PRICE "U"}
				set sol-price-overide-flag = YES
			endif
			if sys-so-pricing-method = 'C'
			and not i50lines-use-prior-sale-disc-flag
				set sol-disc-rate = 0
				set sol-extra-item-disc-amt = 0
			endif
			if screenmode() != md-price
			and not i50lines-use-prior-sale-disc-flag
				set sol-disc-rate = 0
			endif
		else
			if (sol-price-overide-flag
			not in {I5SOSTATII_ALT_PRICE I5SOSTATII_STK_ALT_PRICE "U"
					I5SOSTATII_ALT_OVER_PRICE})
			and not i5pricemod-price-flag-override		// Not override by public procedure clibprice-public-price-override
				set sol-price-overide-flag = NO
			endif
		endif
	endif
endprocedure //validate-item-price -------------------------------------------

menu ask-type-of-discount-processing
	window @19,50 to @22,80
detail
	option 'Change Line Discount' @20,52
		help 'Allow changing of just this line discount rate'
		// if this when statement is changed please make sure you
		// the accept sol-disc-rate in procedure maintain-normal-line
		when (sys-cgd-flg in { YES 'M' 'L' 'Z' 'X' 'O' 'S' 'T' 'U' '1' '2' '3' '4'}
		and sol-line-type in { 'SN','WN','RR','SS','RN','RS' }
		and sol-chg-type != 'D')
		and ws-ok-to-post-income
		and ws-order-flag != CUSTOMER
		and (sys-price-disc-entered not in { 'A' 'C' }
		or  (sys-price-disc-entered = 'A'
		and ws-is-user-a-credit-officer = YES))
		if sol-line-amount < ZERO
			message "Discount not applicable to negative amounts."
			exit
		endif
		do check-line-discount entry once
	option 'Other Discount Options' @21,52
		help 'This option allows for a number of different discount methods'
		when (sys-price-disc-entered not in { 'A' 'C' }
			or  (sys-price-disc-entered = 'A'
			and ws-is-user-a-credit-officer = YES))
		spl 'so/m50disc' parameters are '-disc'
			str(so-order-no) so-bo-suffix '-lines'
		on error
			message "Not installed, m50disc"
		endon
		get sales-order lock
		on error
		endon
	confirm auto
	confirmed
		exit
	endconfirm
endmenu //ask-type-of-discount-processing ------------------------------------

screen check-line-discount
	window @18,50 to @24,80
		title is "Change Line Discount"
before
	box @18,50 to @23,80
		title SPACES
	display "For Line Sequence:" @19,52
	display "Old Discount     :" @21,52
	display "New Discount     :" @22,52
	get sales-order-line lock
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix sol-line-seq
	do i50lines-save-the-order-line-values
	// i50entry-sol-disc-rate holds the old disc
	// sol-disc-rate holds the new disc
detail
	display sol-line-seq @19,71
	display i50entry-sol-disc-rate @21,71 pic zz9.999%				// old rate
	accept sol-disc-rate @22,71 pic zz9.999%						// new rate
		help 'Enter the new discount rate'
		default sol-disc-rate
	validation
		if sol-disc-rate <> i5pricemod-discount
		and i5pricemod-is-disc-to-be-used = YES
			set sol-price-rule = SPACES
		endif
	endvalidation
	confirm auto
	confirmed
		if i50entry-sol-disc-rate <> sol-disc-rate
			do i50lines-recalc-line-from-price-disc
				parameter '-disc'
		endif
	endconfirm
endscreen //check-line-discount ----------------------------------------------

screen sales-order-gl-code
	// Ask for the GL accountcode. Then creates records in job-cost-commitments
	// (represents link between the sales order and the job/project) and in
	// sales-order-gl-code (represents link between the sales order line and
	// the GL accounts).
	local field
		lf-account-ok						type boolean
		lf-default-found					type boolean
		lf-gl-accountcode					like so-gl-accountcode
		lf-pos								type numeric
		lf-old-job-code						like job-code
		lf-new-job-code						like job-code
		lf-jcb-type							like jcb-type
		lf-job-code							like job-code
		lf-selected-section-code			like jcbac-section-code
		lf-selected-section-key				like jcbac-section-key
		lf-selected-variation-no			like jcbac-variation-no
		lf-selected-version-no				like jcbac-version-no
		lf-cbs-exist						type boolean
	//
	window @19,37 to @23,91
		title is "General Ledger Coding For Item"
	allow entry correct
before
	box @19,37 to @22,91
		title SPACES
	set so-gl-accountcode = SPACES
	if sol-line-type = "DN"
		//No need to ask for these GL details if line type is Note Line
		exit
	endif
	//
	do get-stk-default-gl-account
		parameter ws-accept-stk-code
		returning so-gl-accountcode lf-default-found
	if ws-issue-to-account <> SPACES
		set so-gl-accountcode = ws-issue-to-account
	elseif ws-saved-gl-accountcode <> SPACES
	and not lf-default-found
		set so-gl-accountcode = ws-saved-gl-accountcode
	endif
	set ws-ok = FALSE
detail
	set lf-gl-accountcode = so-gl-accountcode
	if screenmode = correct
	and so-order-type-code = I5SO_TYPE_JOB_ISSUE
		I8VALIDGL_VALIDATE_GL_POST(so-gl-accountcode,'Y',job-code,so-gl-cost-centre,ws-error,ws-ok)
		do clibjob-check-if-any-cbs-for-job
				parameter job-code so-gl-cost-centre
			returning lf-cbs-exist
	endif
	accept so-gl-accountcode @20,63 BMSDEF_ACC_GLAC_PIC
		title 'GL Account for Item:'
		help 'Enter the GL Account or Project for this item code '
		default so-gl-accountcode
		uppercase
		showvalue
		when ws-issue-to-account = SPACES
	on help-key
		do m3enqgl-enquire-on-general-ledger
			parameters so-gl-accountcode SPACES SPACES
			returning so-gl-accountcode so-gl-cbs-section-code
		reenter optional
	endon
	validation
		set so-gl-cost-centre = so-territory-code
		I8VALIDGL_VALIDATE_GL_POST(so-gl-accountcode,'Y',job-code,so-gl-cost-centre,ws-error,ws-ok)
		if not ws-ok
			message-box ws-error
				title "Enter GL Account"
				message-buttons MSG_BOX_OK
				icon MSG_BOX_STOP
				tag 1417
			set so-gl-accountcode = lf-gl-accountcode
			reenter so-gl-accountcode
		endif
		set lf-cbs-exist = FALSE
		if so-order-type-code = I5SO_TYPE_JOB_ISSUE
		and so-order-source in { I5SOURCE_JOB_COSTING I5SOURCE_MANUAL_BO }
			set lf-pos = pattern(so-gl-accountcode,'.')
			if lf-pos
				set lf-new-job-code = substring(so-gl-accountcode,1,lf-pos - 1)
				set lf-pos = pattern(lf-gl-accountcode,'.')
				set lf-old-job-code = substring(lf-gl-accountcode,1,lf-pos - 1)
				if lf-old-job-code != lf-new-job-code
					// Job code is changed. Allow it if it is changed to the
					// existing linked job.
					push job-cost-commitments
					get like-job-cost-commitments
						on index job-commitment-type job-order-no job-order-suffix
						key is 'S' so-order-no so-bo-suffix
					on error ENOREC
						set lf-old-job-code = SPACES
					else
						set lf-old-job-code = job-code
					endon
					pop job-cost-commitments
					if lf-old-job-code != lf-new-job-code
						message-box 'Cannot change the job code'
							title "Change GL Account Code"
							message-buttons MSG_BOX_OK
							default is MSG_BOX_OK
							icon is MSG_BOX_STOP
							tag 10
						set ws-ok = FALSE
						set so-gl-accountcode = lf-gl-accountcode
						reenter so-gl-accountcode
					endif
				endif
			else
				message-box 'Not a valid job cost category'
					title "Change GL Account Code"
					message-buttons MSG_BOX_OK
					default is MSG_BOX_OK
					icon is MSG_BOX_STOP
					tag 20
				set ws-ok = FALSE
				set so-gl-accountcode = lf-gl-accountcode
				reenter so-gl-accountcode
			endif
			do clibjob-check-if-any-cbs-for-job
				parameter job-code so-gl-cost-centre
				returning lf-cbs-exist
		endif
		do clibglsec-check-account-access
			parameter
				gl-master.*
			returning
				lf-account-ok
		if not lf-account-ok
			message concat( translate "You don't have access to this account " gl-accountcode)
			set so-gl-accountcode = lf-gl-accountcode
			reenter so-gl-accountcode
		endif
		if lf-gl-accountcode != so-gl-accountcode
			set ordlog-type = 101
			set ordlog-old-info = lf-gl-accountcode
			set ordlog-new-info = so-gl-accountcode
			set ordlog-old-value = 0
			set ordlog-new-value = 0
			set ordlog-change-value = 0
			set ordlog-ordered-change-value = 0
			set ordlog-ordered-tax-chg-value = 0
			set ordlog-item-wholesale-price = sol-item-wholesale-price
			set ordlog-line-type = sol-line-type
			set ordlog-disc-rate = sol-disc-rate
			do a9000-write-audit-file
		endif
	endvalidation
	accept so-gl-cbs-section-code @21,63 pic x(10)
		help 'Enter CBS sequence'
		default so-gl-cbs-section-code
		title 'CBS Sequence No.:'
		show-value
		when lf-cbs-exist
	on help-key
		spl "job/jcbsmaint"
			leave-files-open
			parameters
				"-cbs-consolidated-by-cost-cat"
				IJOBSTATII_CBS_JOB
				job-code
				so-gl-cost-centre
			returning
				lf-jcb-type
				lf-job-code
				lf-selected-variation-no
				lf-selected-version-no
				lf-selected-section-key
				lf-selected-section-code
		//
		if lf-selected-section-code = SPACES
			//nothing selected
			//don't overwrite what we had before
		else
			set so-gl-cbs-section-code = lf-selected-section-code
		endif
		reenter optional
	endon
	confirm auto
	confirmed
		do insert-sales-order-gl-coding
		// If NO job-code, blank records in job-cost-commitments creates integrity issues.
		if job-code <> SPACES
			initialise job-cost-commitments
				leaving job-code
			set job-commitment-type = 'S'
			set job-order-no = so-order-no
			set job-order-suffix = so-bo-suffix
			set job-cost-category = so-gl-cost-centre
			set job-cbs-section-code = so-gl-cbs-section-code
			insert job-cost-commitments
			on error
			endon
		endif
	endconfirm
after
	if so-gl-accountcode = SPACES
	or not ws-ok	// must be a valid GL coding or GL account
		if screenmode() = entry
		or ws-saved-gl-accountcode = SPACES
			if so-gl-accountcode != SPACES
				set so-gl-accountcode = SPACES
			endif
			message 'You must enter a valid GL Account.'
			back-to-detail
		else
			// when in correct mode allow user to <escape> this section without updating
			// anything just in case PM work order is on hold and the user cannot exit.
			set so-gl-accountcode = ws-saved-gl-accountcode
			do insert-sales-order-gl-coding
			set ws-ok = FALSE
			message 'Record not updated' pause
		endif
	else
		//save to use as the default to the next line
		set ws-saved-gl-accountcode = so-gl-accountcode
	endif
endscreen //sales-order-gl-code ------------------------------------------------

procedure get-stk-default-gl-account
	parameter
		lp-stk-code			like stock-code
	returning
		lr-stk-gl-account	like gl-accountcode	//Returns SPACES if no default
		lr-default-found	type boolean
		//
	set lr-default-found = FALSE
	get stock-notes
		on index stock-code stock-note-type stock-note-sequence
		key is lp-stk-code "GL" ZERO
	on error
		set stock-note = SPACES
	else
		set lr-stk-gl-account = stock-note
	endon
	//
	//The GL stock-notes is the default - now check to see if there is a
	//whse specific gl code for this stock-code
	get stock-warehouse-retail-details
		on index whse-code stock-code retail-type
		key is so-whse-code stock-code "G"
	on error
		//nothing - leave it as the default global from the stock-notes
	else
		set lr-stk-gl-account = retail-interim-item
	endon
	if lr-stk-gl-account > SPACES
		set lr-default-found = TRUE
	endif
endprocedure //get-stk-default-gl-account ------------------------------------

procedure insert-sales-order-gl-coding
	local fields
		lf-spec-acc-name		like s-acc-name
	save gl-master
	if sol-line-type = 'SN'
		//Note : Possible to lose stock master at some point - need it here
		//for the stock-group
		get stock-master
			on index stock-code
			key is stock-code
		on error
			set stock-group = SPACES
		endon
		if stk-stock-status in {'Z' 'L'}
			set lf-spec-acc-name = "IS"
		else
			set lf-spec-acc-name = "IN"
		endif
		do clib305-check-special-account
			parameters
				lf-spec-acc-name
				"A"
			returning
				default-acct
		do clib305-split-inventory
			parameters
				so-whse-code
				stock-group
				stock-master.*
				lf-spec-acc-name
				default-acct
			returning
				ws-gl-accountcode
				lf-spec-acc-name
	elseif sol-line-type = 'WN'
		do clib305-check-special-account
			parameters
				"IN"
				"A"
			returning
				default-acct
		if so-price-code = 'I'
		and sol-whse-code = SPACES
		and substring(soln-text,1,4) != SPACES
			if substring(soln-text,1,4) != so-whse-code
				do clib305-split-inventory
					parameters
						substring(soln-text,1,4)
						stock-group
						stock-master.*
						"IN"
						default-acct
					returning
						ws-gl-accountcode
						lf-spec-acc-name
			else
				do clib305-split-inventory
					parameters
						sol-whse-code
						stock-group
						stock-master.*
						"IN"
						default-acct
					returning
						ws-gl-accountcode
						lf-spec-acc-name
			endif
		else
			do clib305-split-inventory
				parameters
					sol-whse-code
					stock-group
					stock-master.*
					"IN"
					default-acct
				returning
					ws-gl-accountcode
					lf-spec-acc-name
		endif
	elseif sol-line-type = 'SS'
		do clib305-check-special-account
			parameters
				"SS"
				"A"
			returning
				default-acct
		do clib305-split-sales-cogs
			parameters
				sales-order.*
				stock-master.*
				sales-order-line.*
				stock-warehouse-detail.*
				deb-master.*
				stock-price.*
				"SS"
				default-acct
			returning
				ws-gl-accountcode
				lf-spec-acc-name
	endif
	set so-gl-details = concat("Order No : ",str(so-order-no),so-bo-suffix)
	set ws-count = 1
	while ws-count <= 2
		if ws-count = 1
			set so-gl-other-side = ws-gl-accountcode
			set so-gl-amount = sol-line-cost
			if sol-ordered-qty < ZERO
				set so-gl-debit-credit-indicator = '2'
			else
				set so-gl-debit-credit-indicator = '1'
			endif
			set so-gl-special-account = concat("JC.",job-cost-centre)
		else
			set so-gl-other-side = so-gl-accountcode
			set so-gl-accountcode = ws-gl-accountcode
			set so-gl-amount = (- sol-line-cost)
			set so-gl-special-account = lf-spec-acc-name
			if sol-ordered-qty < ZERO
				set so-gl-debit-credit-indicator = '1'
			else
				set so-gl-debit-credit-indicator = '2'
			endif
		endif
		if sol-ordered-qty < ZERO
		endif
		insert sales-order-gl-coding
		set ws-count += 1
	endwhile
	set so-gl-accountcode = so-gl-other-side
	restore gl-master
	get gl-master
endprocedure //insert-sales-order-gl-coding -----------------------------------

procedure remove-sales-order-gl-coding
	extract sales-order-gl-coding lock
		on index so-order-no so-bo-suffix
			sol-line-seq so-gl-debit-credit-indicator
		key is so-order-no so-bo-suffix sol-line-seq SPACES
		next same so-order-no so-bo-suffix sol-line-seq
	detail
		if (so-gl-debit-credit-indicator = '1' and sol-ordered-qty >= ZERO)
			or (so-gl-debit-credit-indicator = '2' and sol-ordered-qty < ZERO)
			set ws-saved-gl-accountcode = so-gl-accountcode
		endif
		delete sales-order-gl-coding
	endextract
endprocedure //remove-sales-order-gl-coding -----------------------------------

procedure get-delivery-date
	window @21,30 to @23,80
		title 'Expected Line Delivery Date'
	if sol-line-date = 0
		set sol-line-date = so-delivery-date
	endif
	display 'Expected Line Delivery Date :' @22,33 background prompt
	accept sol-line-date @22,64
		default sol-line-date
endprocedure //get-delivery-date ---------------------------------------------

procedure get-outside-supplier
	window @20,36 to @23,80
		title 'Outwork Maintenance'
	//
	display 'Supplier   : ' @ 21,38 background
	display 'Start Line : ' @ 22,38 background
	//
	if ws-out-supplier = SPACES
		get sales-order-line-notes
			on index so-order-no so-bo-suffix sol-line-seq
				soln-type soln-seq-no
			key is so-order-no so-bo-suffix sol-line-seq '~O' 1
		on error
			set ws-out-supplier = SPACES
			set ws-group-start = ZERO
		else
			set ws-out-supplier = substring(soln-text,1,8)
			set ws-group-start = num(substring(soln-text,9,14))
		endon
	endif
	//
	accept ws-out-supplier @ 21,52
		help 'Enter the supplier of supplier to perform this process. [HELP]'
		default ws-out-supplier
		uppercase
	on help-key
		do m2enqcre-enquire-on-creditors
			parameters ws-out-supplier SPACES SPACES
			returning ws-out-supplier
		reenter ws-out-supplier optional
	endon
	validation
		get cre-master
			on index cre-accountcode
			key is ws-out-supplier
		on error
			message "Supplier not valid " ws-out-supplier
			reenter optional
		endon
	endvalidation
	accept ws-group-start @22,52 pic z(2)9.9
		help 'Enter the first order line to be included in this process '
		default ws-group-start
	validation
		if ws-group-start >= sol-line-seq
		or ws-group-start = ZERO
			message 'Start group must be a valid line prior to current line'
			reenter optional
		endif
	endvalidation
endprocedure //get-outside-supplier -------------------------------------------

procedure update-delivery-date
	local field
		lf-save-date				like sol-line-date
	//
	window @21,30 to @23,80
		title 'Expected Line Delivery Date'
	get sales-order-line current lock
	set lf-save-date = sol-line-date
	if sol-line-date = 0
		set sol-line-date = so-delivery-date
	endif
	display 'Expected Line Delivery Date   :' @22,33 background prompt
	accept sol-line-date @22,66
		default sol-line-date
	validations
		if sol-line-date <> so-delivery-date
		and (sol-line-type = "KN" or sol-chg-type = "D")
			message "Kits cannot be split using this function, you must split the kit manually."
			set sol-line-date = lf-save-date
		endif
	endvalidations
	if sol-line-date = so-delivery-date
		set sol-line-date = ZERO
	endif
	if sol-line-date != lf-save-date
		update sales-order-line
	endif
endprocedure //update-delivery-date --------------------------------------------

procedure accept-stock
	local field
		lf-need-position-correct-line		type boolean
		lf-found-catalog					type boolean
		lf-set-next-sol-seq					type boolean
		lf-is-generic						pic x
		lf-control-code						pic x
		lf-stock-code						like stock-code
		lf-reenter-flag						type boolean
		lf-exit								type boolean
	//
	// Values for reenter-needed
	// 0 - ok to continue
	// 1 - reenter of item code
	// 2 - exit, ie quit, finish etc
	// 3 - refresh sol-line-seq and reenter item code
	// 4 - do a   continue
	set reenter-needed = 0
	//
	set i50lines-other-whses-selected = NO
	set lf-need-position-correct-line = FALSE
	set stock-code = ws-accept-stk-code
	set ws-negate-tally-qty = FALSE
	if get-param(8) = BMSDEF_BENCH_TEST
		set stock-code = concat(substring(get-param(9),1,str-len(get-param(9))),stock-code)
	endif
	//clear all stock status and conditions
	initialise stock-master
		leaving stock-code
	initialise sales-order-line
		leaving so-order-no so-bo-suffix sol-line-seq stock-code
	if sys-so-use-of-price-ref = 'C'
		set sol-price-ref = ws-catalog-no / 100
	endif
	set reenter-needed = 0
	//
	do public-accept-stock-check
		parameter
			sales-order.*
			stock-code
		returning
			stock-code
			lf-reenter-flag
	if lf-reenter-flag
		set reenter-needed = 1
		exit
	endif
	//
	set i5pricemod-is-disc-to-be-used = YES
	set i5soldisc-cgd-pg-flag = FALSE
	if stock-code != 'Z'
		save stock-master
		get stock-master
			on index stock-code
			key is stock-code
		on error
		else
			if stk-issue-control-code = 'F'
				spl "so/m50extra" parameters "-genbom" stock-code
					returning lf-is-generic
					leave-files-open
				if lf-is-generic = YES
					set lf-control-code = stk-issue-control-code
					set lf-stock-code = stock-code
				endif
			endif
		endon
		restore stock-master
	endif
	if stock-code = 'Q'
		set ws-del-hit = NO
		set reenter-needed = 2
		do test-to-do-alert
		if ws-ok
			do lock-promo-for-other-whse
				parameters
					so-order-no
					so-bo-suffix
			//
			do check-for-promo-alerts
				returning
					lf-exit
			if lf-exit
				set stock-code = SPACES
				set reenter-needed = 1
			endif
			exit
		else
			set stock-code = SPACES
			set reenter-needed = 1
		endif
	elseif stock-code = 'Z'
	or lf-control-code = 'F'
		set lf-set-next-sol-seq = FALSE
		if pattern(ws-special-ordent-program,'so/m50consys') > 0
			spl ws-special-ordent-program
				parameters
					str(so-order-no)
					so-bo-suffix
					sol-line-seq
					substring(ws-special-param,1,1)
					substring(ws-special-param,2,2)
					ws-order-type
					lf-stock-code
					'SO'	// document type
				returning stock-code
					sol-line-seq
					sol-ordered-qty
			on error
				if lf-control-code != 'F'
					message "Can't find " ws-special-ordent-program
					set reenter-needed = 1
				endif
			else
				set ws-accept-stk-code = stock-code
				if stock-code = ' ~~MULTI'
					set ws-accept-stk-code = SPACES
					set lf-need-position-correct-line = TRUE
					set lf-set-next-sol-seq = TRUE
				endif
			endon
		else
			do public-z-allow-entry-of-a-line
					parameter
						sales-order.*
						sol-line-seq
						ws-order-type
					returning
						lf-need-position-correct-line // recalc-and-refresh!
			if lf-need-position-correct-line // recalc-and-refresh!
				set lf-set-next-sol-seq = TRUE
			endif
		endif
		if lf-need-position-correct-line = TRUE
			save sales-order-line
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
			set stock-code = SPACES
			if lf-set-next-sol-seq = TRUE
				set sol-line-seq = ws-line-seq
			endif
			set reenter-needed = 3
			exit
		else
			// Configured Item, calculate totals, exit procedure & continue
			do b300-calc-total-amounts-update-header
			do display-totals
			set reenter-needed = 4
			exit
		endif
	elseif stock-code = 'X'
		set i50lines-special-status = SPACES
			//process this the following entered item code
			//as a rotable item
		if i50lines-repair-whse = SPACES	// we have a repair whse
			message "Repair warehouse not set up, can't enter an exchange line"
			set reenter-needed = 1
			exit
		elseif i50lines-used-whse = SPACES	// we have a used whse
			message "Used warehouse not set up, can't enter an exchange line"
			set reenter-needed = 1
			exit
		elseif ws-process-mode = EDIT	// and not in edit mode
			message "Can't enter an exchange line when in edit mode"
			set reenter-needed = 1
			exit
		elseif i50lines-whse-type in IWTYPEDEF_DISTRIB_WHSE
			message "Can't enter an exchange line for distribution warehouse"
			set reenter-needed = 1
			exit
		elseif i50entry-normal-order = NO
			message 'You can only enter a exchange line for normal orders'
			set reenter-needed = 1
			exit
		else
			//THEN it's a rotable item
			do process-rotatable-item entry once
			if i50lines-special-status = 'R'
				set reenter-needed = 1
				exit
			elseif i50lines-special-status = 'N'
				//continue as normal item
			else
				set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
				do b300-calc-total-amounts-update-header
				do display-totals
				set reenter-needed = 4
				exit
			endif
		endif
	elseif stock-code = '?'
		do display-accept-help-options-menu
		set stock-code = ws-accept-stk-code
		set reenter-needed = 1
		exit
	endif
	if so-order-type-code = I5SO_TYPE_RMA
	and get_param(3) != '-rmacharge'	// This is aligned with normal stock.
		// Request sign negation of line ordered quantity in so/m50lengths.spl
		// if tally item is entered in case of return management in order to
		// align the behaviour of tally item with normal stock item.
		// Calling Path: validate-stock-code >> get-style-colour-size-item >>
		//		so/m50lengths.spl.
		set ws-negate-tally-qty = TRUE
	endif
	do validate-stock-code
	set ws-negate-tally-qty = FALSE
	if reenter-needed
		if reenter-needed != 4
			set reenter-needed = 3
		endif
		exit
	endif
	get stock-master
		on index stock-code
		key is stock-code
	on error
	else
		if ws-catalog-no != ZERO
			set lf-found-catalog = FALSE
			extract deb-catalog-detail
				on index deb-catalog-no dcd-year stock-code
					dcd-page-no dcd-page-suffix
				key is ws-catalog-no ws-year stock-code
					ZERO SPACES
				next same deb-catalog-no dcd-year stock-code
			detail
				set lf-found-catalog = TRUE
				break
			endextract
			if lf-found-catalog = FALSE
				message 'Item code is not included in this catalogue'
				set reenter-needed = 1
				exit
			endif
		endif
		// GL coding used in Internal Item Issue does not work for kit item.
		// Unlike other stock items, sales-order-gl-coding records are not
		// managed for kit item in the case of Internal Item Issue. The issue
		// is raised in PLM Maintenance.
		if stk-stock-status = 'K'	// Kit item
			if screenmode() =  entry	// Internal Item Issue
			and ((so-order-type-code = I5SO_TYPE_JOB_ISSUE
			and so-order-source = '#' and sol-line-type <> "DN" ))
				message 'Kit item cannot be used in Internal Item Issue'
				set reenter-needed = 1
				exit
			elseif screenmode() =  md-detail-entry
				if sol-line-seq < ws-line-seq
					message 'Kit item cannot be added in between items. '
					set reenter-needed = 4
					exit
				elseif sol-line-seq > ws-line-seq
					// The user has manually increased the sol-line-seq and in order for the kit
					// to be created without a duplicate error the internal seq must be bumped also
					set ws-line-seq = sol-line-seq
				endif
			endif
		endif
		//
		if stk-condition-code = 'G' // Always allow backorder
		and dr-part-shipment-allowed = 'B'
			// To get rid of Info
			save sales-order
			get sales-order lock
			restore sales-order
			set so-part-shipment-allowed = 'A' //Allow but check lines
			update sales-order lock
		endif
		get stock-specification-chemical
			on index stock-code
			key is stock-code
		on error
		else
			if ssc-poisons-schedule-code = 'S7'
				set ws-s7-stk-seq-no = sol-line-seq
				spl 'so/m5s7notes'
					leave-files-open
					parameters are str(so-order-no) so-bo-suffix
					sol-line-seq stock-code
				on error
					message "Can't find poison schedule 'S7' purpose entry program"
					set reenter-needed = 1
					exit
				else
					position sales-order-line
						on index so-order-no so-bo-suffix sol-line-seq
						key is so-order-no so-bo-suffix ws-s7-stk-seq-no
					get sales-order-line
						next same so-order-no so-bo-suffix
					on error
						message "Enter purpose of use for stock classified with a poison schedule of 'S7'"
						set reenter-needed = 1
						exit
					endon
					set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
					do b300-calc-total-amounts-update-header
					do display-totals
					initialise sales-order-line
						leaving so-order-no so-bo-suffix
					set sol-line-seq = ws-s7-stk-seq-no
					set sol-line-type = "SN"
					if stk-price-per = ZERO
						set stk-price-per = 1
					endif
					set sol-price-uom = stk-price-per
					get sales-order-line lock
					on error
					endon
					set ws-saved-line-seq = sol-line-seq
					set sol-line-seq = ws-saved-line-seq
					set ws-line-seq = ws-s7-stk-seq-no
					get stock-master
						on index stock-code
						key is ws-accept-stk-code
					on error
					endon
					exit
				endon
			endif
		endon
	endon
	set reenter-needed = 0
	set ws-accept-stk-code = stock-code
	if sol-disc-rate > 100 // handle the reject this item case
		message 'Item sale to this account not permitted (cgd>100)'
		set reenter-needed = 1
		exit
	endif
	//
	set i50lines-special-status = SPACES
	if i50entry-normal-order = YES
	and stk-condition-code = 'R'	// rotable
	and stk-stock-status != 'K'	// Can't have kit rotables
	and i50lines-repair-whse != SPACES	// we have a repair whse
	and i50lines-used-whse != SPACES	// we have a used whse
	and ws-process-mode != EDIT	// we are not in edit mode
	and i50lines-whse-type not in IWTYPEDEF_DISTRIB_WHSE
		//THEN it's a rotable item
		do process-rotatable-item entry once
		if i50lines-special-status = 'R'
			set reenter-needed = 1
			exit
		elseif i50lines-special-status = 'N'
			//continue as normal item
		else
			//bypass rest of code as we have processed
			//a rotable item
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
			set reenter-needed = 4
			exit
		endif
		//
		// Check if using "batch classification"
		//
	elseif sys-licence-type in { '3' '4' }
	and sol-line-type = "SN"
	and sol-chg-type not = 'D'
	and stk-serialized-flag = 'L'	//Lot tracked items only
		set ws-saved-stock-code = stock-code
		//parameters -labsystem,stock-code,stock-group
		spl "so/m50extra" parameters are "-labsystem" stock-code stock-group
			returning ws-lab-system-used-for-item
			leave-files-open
			//message "ws-lab-system-used-for-item 8856 needs to yes" ws-lab-system-used-for-item //dineth
		if ws-lab-system-used-for-item = YES
			//message "8857"
			do ask-for-classification entry once
			if not ws-value-entered
				set stock-code = ws-saved-stock-code
				set reenter-needed = 1
				exit
			endif
		endif
		set stock-code = ws-saved-stock-code
	endif
	if screenmode in {entry, md-detail-entry}
		do i50lines-check-for-stk-notes
	endif
endprocedure //accept-stock --------------------------------------------------

menu display-accept-help-options-menu
	window @4,7 to @18,53
		title is "Help for Options"
		no-hide
before
detail
	option 'Address' @5,9
		set ws-accept-stk-code = 'A'
		exit
#ifndef ONLY_PSU_OPTIONS
	option 'Balance Enquiry' @6,9
		set ws-accept-stk-code = 'B'
		exit
#endif
	option 'Charges Entry' @7,9
		set ws-accept-stk-code = 'C'
		exit
	option 'D-Text Notes' @8,9
		help 'Allow maintenance of Text Notes ( Type QX )'
		set ws-accept-stk-code = 'D'
		exit
	option 'E-Supplier Enquiry' @9,9
		set ws-accept-stk-code = 'E'
		exit
#ifndef ONLY_PSU_OPTIONS
	option 'F-Suspend Order' @10,9
		set ws-accept-stk-code = 'F'
		exit
	option 'Get Account' @11,9
		set ws-accept-stk-code = 'G'
		exit
#endif
	option 'Hire Entry ' @12,9
		set ws-accept-stk-code = 'H'
		exit
	option 'Instructions ' @13,9
		set ws-accept-stk-code = 'I'
		exit
	option 'Kit Maintenance' @14,9
		set ws-accept-stk-code = 'K'
		exit
	option 'L-Serial Entry' @15,9
		set ws-accept-stk-code = 'L'
		exit
	option 'Memo (Hidden Note)' @16,9
		set ws-accept-stk-code = 'M'
		exit
	option 'Note' @17,9
		set ws-accept-stk-code = 'N'
		exit
	option 'O-Total Cost Enquiry' @5,32
		set ws-accept-stk-code = 'O'
		exit
	option 'Prior Sale ' @6,32
		set ws-accept-stk-code = 'P'
		exit
	option 'Quit' @7,32
		set ws-accept-stk-code = 'Q'
		exit
	option 'Reference from Cust.' @8,32
		set ws-accept-stk-code = 'R'
		exit
	option 'Special Item ' @9,32
		set ws-accept-stk-code = 'S'
		exit
	option 'Tax Item Entry' @10,32
		set ws-accept-stk-code = 'T'
		exit
#ifndef ONLY_PSU_OPTIONS
	option 'Unit Sale Enquiry' @11,32
		set ws-accept-stk-code = 'U'
		exit
#endif
	option 'V-Inventory Enquiry' @12,32
		set ws-accept-stk-code = 'V'
		exit
#ifndef ONLY_PSU_OPTIONS
	option 'W-Terms Notes' @13,32
		help 'Allow maintenance of Terms notes ( Type QT )'
		set ws-accept-stk-code = 'W'
		exit
	option 'X-Exchange Item ' @14,32
		set ws-accept-stk-code = 'X'
		exit
	option 'Y-Proforma Item' @15,32
		help 'Allow entry of proforma lines'
		set ws-accept-stk-code = 'Y'
		exit
	option 'Z-Custom Entry' @16,32
		set ws-accept-stk-code = 'Z'
		exit
	option '@-WP Notes Entry' @17,32
		help 'Allow WP maintenance of Notes lines.'
		set ws-accept-stk-code = '@'
		exit
#endif
	confirm auto
	confirmed
	endconfirm
endmenu //display-accept-help-options-menu -----------------------------------

procedure write-original-part-line
	save sales-order-line
	set sol-line-seq += 0.1
	initialise sales-order-line leaving so-order-no so-bo-suffix
			sol-line-seq
	set sol-line-type = 'DN'
	set sol-print-line = 'Y'
	if sys-length-of-so-note = '3'
		set sol-line-description =
			concat('Your Part No: ', ws-original-code)
	else
		set sol-line-description =
			concat('Supplied for your part: ', ws-original-code)
	endif
	insert sales-order-line
	restore sales-order-line
endprocedure //write-original-part-line --------------------------------------

procedure not-confirmed-a300-lines
	if screenmode() = entry
		do clibtaxso-delete-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
	endif
	extract sales-order-line-notes lock
		on index so-order-no so-bo-suffix sol-line-seq soln-type
		soln-seq-no
		key is so-order-no so-bo-suffix sol-line-seq "~W"
		next same so-order-no so-bo-suffix sol-line-seq soln-type
	detail
		delete sales-order-line-notes
	endextract
	set i50lines-scanned-item = FALSE
	//
	if screen-mode() = entry
		set sol-shipped-qty = 0
		if sol-line-type in { 'SC' 'ST' }
			// NOTE: line amt for charges and tax
			set sol-line-amount = 0
			set sol-shipped-sales-tax-amt = 0
			set sol-ordered-sales-tax-amt = 0
		endif
	else
		set i50entry-qty = sol-shipped-qty
		do i50entry-do-line-calc same
		set sol-shipped-amount = i50entry-line-amt
	endif
	//clear the note line flag
	set ws-was-prev-line-a-note = NO
endprocedure //not-confirm-a300-lines ----------------------------------

procedure m50lines-get-from-other-whse
	local field
		lf-shipped-qty				like whse-qty-on-hand
		lf-backorder-qty			like whse-qty-on-hand
		lf-new-shipped-qty			like sol-shipped-qty
		lf-new-backorder-qty		like sol-backorder-qty
		lf-new-line-type			like sol-line-type
		lf-ship-qty					like whse-qty-on-hand
		lf-bo-qty					like whse-qty-on-hand
		lf-whse-update-type			pic x(30)	type string
		lf-bo-from-other-whse		type boolean
		lf-saved-line-type			like sol-line-type
	//
	get sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		current lock
	on error
		message 'You are not current on a line'
	else
		if fraction(sol-line-seq) != 0
			message "Line sequence can't have decimals"
			pause
		elseif sol-whse-code != SPACES
			message "Line is already using other warehouse facility"
			pause
		elseif sol-line-type != 'SN'
		or (sol-line-type = 'SN' and sol-chg-type = 'D') //NOT for kit component
			message 'Other whse option only available for normal stocked items'
			pause
		else
			do i50entry-get-conversion-factor
			set i50lines-ordered-build-from-allocated = FALSE
			set ws-line-seq = sol-line-seq
			set lf-shipped-qty = sol-shipped-qty
			set lf-backorder-qty = sol-backorder-qty
			//
			// Only the backordered qty are unallocated, and only they will be
			// sourced from another warehouse
			if sol-backorder-qty <> sol-ordered-qty
			and sol-backorder-qty > ZERO and sol-shipped-qty > ZERO
				set lf-bo-from-other-whse = TRUE
				set lf-saved-line-type = sol-line-type
			endif
			//
			set i50lines-backorder-qty = sol-backorder-qty
			set sol-shipped-qty = ZERO
			set sol-backorder-qty = ZERO
			//
			// NOTE: at this stage the shipped qty and b/o qty for this
			//		stk item and whse have NOT been removed from the whse!
			//
			do i50lines-stock-balance-and-select
			if i50lines-reenter-stk-qty-flag in { 'S' 'Q' }
				// ie they have backed out of the other whse screen!!
			else
				// If the (previously) backordered qty is now from another
				// warehouse, restore the shipped qty and line type, so that the
				// original line is kept on the order
				if not lf-bo-from-other-whse
					set lf-new-shipped-qty = sol-shipped-qty
				else
					set lf-new-shipped-qty = lf-shipped-qty
					set sol-line-type = lf-saved-line-type
				endif
				set lf-new-backorder-qty = sol-backorder-qty
				set lf-new-line-type = sol-line-type
				get sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					current lock
				set sol-shipped-qty = lf-new-shipped-qty
				set sol-backorder-qty = lf-new-backorder-qty
				set sol-line-type = lf-new-line-type
				// now update the whse commitments by the old qty and the
				// the new qtys
				do i4stkrnd-round-stock-quantity
					parameters
						stk-unit-desc
						lf-backorder-qty
						i50entry-stk-conv-factor
					returning
						lf-backorder-qty
				do i4stkrnd-round-stock-quantity
					parameters
						stk-unit-desc
						lf-shipped-qty
						i50entry-stk-conv-factor
					returning
						lf-shipped-qty
				do i4stkrnd-round-stock-quantity
					parameters
						stk-unit-desc
						sol-backorder-qty
						i50entry-stk-conv-factor
					returning
						lf-bo-qty
				do i4stkrnd-round-stock-quantity
					parameters
						stk-unit-desc
						sol-shipped-qty
						i50entry-stk-conv-factor
					returning
						lf-ship-qty
				if i50entry-forward-order = YES
					set lf-whse-update-type = I4STRDEF_WHSE_FORWARD_ORDERS
				else
					set lf-whse-update-type = I4STRDEF_WHSE_BACK_ORDERS
				endif
				do i4strupd-stream-update
					parameters stock-code so-whse-code str(so-order-no)
						so-bo-suffix sol-line-seq lf-whse-update-type
						(0 - lf-backorder-qty)
				do i4strupd-stream-update
					parameters stock-code so-whse-code str(so-order-no)
						so-bo-suffix sol-line-seq lf-whse-update-type
						lf-bo-qty
				do i4strupd-stream-update
					parameters stock-code so-whse-code str(so-order-no)
						so-bo-suffix sol-line-seq I4STRDEF_WHSE_CURRENT_ORDERS
						(0 - lf-shipped-qty)
				do i4strupd-stream-update
					parameters stock-code so-whse-code str(so-order-no)
						so-bo-suffix sol-line-seq I4STRDEF_WHSE_CURRENT_ORDERS
						lf-ship-qty
				// now recalculate the lines totals!
				set i50entry-qty = sol-shipped-qty
				do i50entry-do-line-calc same
				do i50entry-get-conversion-factor
				do clib406-calc-line-cost
					parameters
						sol-item-cost
						sol-ordered-qty
						sol-shipped-qty
						sol-line-type
						sol-stk-unit-conversion
						sol-stk-unit-desc
						stk-price-per
					returning
						sol-ordered-line-cost
						sol-line-cost
				do i50entry-calc-shipped-totals same
				do i50entry-calc-order-totals same
				update sales-order-line
				set ws-line-seq = sol-line-seq
				set ws-line-seq += 1
				do m50lines-build-other-whse-from-notes same
					parameters are 'N'
			endif
		endif
	endon
endprocedure //m50lines-get-from-other-whse ----------------------------------

procedure m50lines-build-other-whse-from-notes
	parameters
		lp-recalc-item-price 		pic x
	//
	local field
		lf-note-seq						like soln-seq-no
		lf-no-of-other-whse				pic 9999
		lf-qty							like whse-qty-on-hand
		lf-cost-to-use					like whse-cost-to-use-flag
		//
	// Please note: the other whses are stored in the
	// following notes file. NOTE: the original whse
	// is NOT stored in these notes, ie they are done as
	// part of this line!
	set ws-total-order-quantity = sol-ordered-qty
	if sol-line-type = 'SN'
		// ie Some of the stock must have been selected from the
		// original warehouse. Now just need to make sure the ordered
		// qty matches the shipped and b/o. ie Needed to have the original
		// ordered qty so break qtys could be used. Please note if break
		// qtys found then need to set price overide flag!
		get sales-order-line lock
		set sol-ordered-qty = sol-shipped-qty + sol-backorder-qty
		do i50entry-calc-order-totals same
		update sales-order-line
		if sol-shipped-qty != 0
		and ((stk-serialized-flag = YES
			and sys-so-status-default in {'I','O'})
		or (stk-serialized-flag = YES
			and sys-serial-traceability-level = '3')
		or (stk-serialized-flag = YES
			and sys-lot-or-serial-entry-flag = '1')
		or (stk-serialized-flag = 'L'				//Lot track item
			and sys-lot-or-serial-entry-flag = '2')
		or (stk-serialized-flag in { 'L' YES}
		and sys-lot-or-serial-entry-flag = '3'))
			do i50lines-get-serial-no-info
				parameter
					ws-sopl-record-exists
		endif
	endif
	set lf-no-of-other-whse = 0
	set ws-saved-line-seq = sol-line-seq
	extract sales-order-line-notes lock
		on index so-order-no so-bo-suffix sol-line-seq soln-type
			soln-seq-no
		key is so-order-no so-bo-suffix sol-line-seq "~W" 0
		next same so-order-no so-bo-suffix sol-line-seq soln-type
	detail
		set lf-note-seq	 = soln-seq-no
		delete sales-order-line-notes
		if lf-no-of-other-whse = 0
		and sol-line-type = 'WN'// if WN then they mustn't have
			// selected the current warehouse, so need to
			// convert the existing line to the other whse!
			//
			// 1st time through, ie we are current on a line!
			// can only be for other whse!
			get sales-order-line lock
			do m50lines-setup-wn-lines same
				parameters are lp-recalc-item-price
			update sales-order-line
		else
			// 2nd and subsequent 'other whse' need to
			// INSERT new lines!!
			do verify-next-unique-so-line-seq
				parameter ws-line-seq
				returning ws-line-seq
			set sol-line-seq = ws-line-seq
			do m50lines-setup-wn-lines same
				parameters are lp-recalc-item-price
			insert sales-order-line
			if ws-original-code != SPACES
				do write-original-part-line
				set ws-original-code = SPACES
			endif
		endif
		if i50entry-transfer-between-whse = YES
			do i4stkrnd-round-stock-quantity
				parameters
					stk-unit-desc
					sol-ordered-qty
					i50entry-stk-conv-factor
				returning
					lf-qty
			do i4strupd-stream-update
				parameters stock-code so-whse-to str(so-order-no)
					so-bo-suffix sol-line-seq I4STRDEF_WHSE_QTY_ON_ORDER
					lf-qty
			//
			do clib407-get-cost-method
				parameters
					stock-code
					so-whse-to
					sys-cost-to-use
				returning
					lf-cost-to-use
			//
			if lf-cost-to-use = 'W'
			and sys-stk-whse-grp-transfers = YES
			and whse-warehouse-cost = ZERO
			and sys-charge-for-inter-transfers = 'D'
				//Transfer to cost is based on selling price
				if sol-price-uom = ZERO
					set sol-price-uom = 1
				endif
				if stk-price-per = ZERO
					set stk-price-per = 1
				endif
				if sol-stk-unit-conversion = ZERO
					set sol-stk-unit-conversion = 1
				endif
				get stock-warehouse-detail
					lock
					on index whse-code stock-code
					key is so-whse-to stock-code
				on error ENOREC
					//No warehouse record to update
				else
					if sol-price-overide-flag in { I5SOSTATII_ALT_PRICE
							I5SOSTATII_ALT_OVER_PRICE}
						set whse-warehouse-cost
								= ((sol-item-price / sol-price-uom)
									/ sol-stk-unit-conversion)
										* stk-price-per
					else
						set whse-warehouse-cost
								= (sol-item-price / sol-price-uom)
										* stk-price-per
					endif
					set whse-date-last-change = today()
					update stock-warehouse-detail
				endon
			endif
		endif
		if sol-shipped-qty != 0
		and ((stk-serialized-flag = YES
			and sys-so-status-default in {'I','O'})
		or (stk-serialized-flag = YES
			and sys-serial-traceability-level = '3')
		or (stk-serialized-flag = YES
			and sys-lot-or-serial-entry-flag = '1')
		or (stk-serialized-flag = 'L'				//Lot track item
			and sys-lot-or-serial-entry-flag = '2')
		or (stk-serialized-flag in { 'L' YES}
		and sys-lot-or-serial-entry-flag = '3'))
			do i50lines-get-serial-no-info
				parameter
					ws-sopl-record-exists
		endif
		set sol-line-seq = ws-saved-line-seq
		set soln-seq-no = lf-note-seq
		position sales-order-line-notes
			on index so-order-no so-bo-suffix sol-line-seq
				soln-type soln-seq-no
			key is so-order-no so-bo-suffix sol-line-seq
				"~W" soln-seq-no
		set lf-no-of-other-whse += 1
	endextract
	set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
	do b300-calc-total-amounts-update-header
	do display-totals
endprocedure //m50lines-build-other-whse-from-notes --------------------------

procedure m50lines-setup-wn-lines
	parameters
		lp-recalc-item-price 				pic x
	local field
		lf-qty								like whse-qty-on-hand
		lf-avail-dedicated					like whse-qty-on-hand
	//
	set sol-ordered-qty = num(substring(soln-text,5,16))
	if num(substring(soln-text,17,28)) != ZERO
		set sol-shipped-qty = num(substring(soln-text,17,28))
	else
		set sol-shipped-qty = ZERO
	endif
	set sol-whse-code = substring(soln-text,1,4)
	set sol-line-type = "WN"
	do i50lines-determine-available-stock
		parameters so-order-no so-bo-suffix sol-line-seq
			sol-line-type sol-ordered-qty i5pricemod-bill-to
			sol-whse-code stock-code
			ws-van-id
			TRUE	//Accurate available stock.
			sol-stk-unit-desc
			sol-stk-unit-conversion
		returning ws-available-stk
			lf-avail-dedicated
			i50entry-dedicated-line
			sol-stk-unit-desc		// used to display available
			sol-stk-unit-conversion	// used to display available
	//
	//Only change cost if being shipped from the other warehouse
	if sys-supply-from-other-whse in {'S' 'N'}
		do i5solicost-get-cost
	endif
	if sol-shipped-qty = ZERO
		if sol-ordered-qty <= ws-available-stk
			set sol-shipped-qty = sol-ordered-qty
			set sol-backorder-qty = ZERO
		elseif ws-available-stk < ZERO
			set sol-shipped-qty = ZERO
			set sol-backorder-qty = sol-ordered-qty
		else
			set sol-shipped-qty = ws-available-stk
			set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
		endif
	else
		set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
	endif
	do i4stkrnd-round-stock-quantity
		parameters
			stk-unit-desc
			sol-shipped-qty
			i50entry-stk-conv-factor
		returning
			lf-qty
	do i4strupd-stream-update
		parameters stock-code sol-whse-code str(so-order-no)
			so-bo-suffix sol-line-seq I4STRDEF_WHSE_CURRENT_ORDERS
			lf-qty
	do i4stkrnd-round-stock-quantity
		parameters
			stk-unit-desc
			sol-backorder-qty
			i50entry-stk-conv-factor
		returning
			lf-qty
	do i4strupd-stream-update
		parameters stock-code sol-whse-code str(so-order-no)
			so-bo-suffix sol-line-seq I4STRDEF_WHSE_BACK_ORDERS
			lf-qty
	//
	if sol-price-overide-flag in { NO SPACES }
	and lp-recalc-item-price = YES
		do public-other-whse-price
			parameters
				sales-order.*
				sales-order-line.*
				stock-warehouse-detail.*
			returning
				sol-base-item-price
				sol-disc-rate
				sol-item-price
				sol-item-wholesale-price
		do public-other-whse-price-for-split-lines
			parameters
				sales-order.*
				sales-order-line.*
				stock-warehouse-detail.*
				ws-total-order-quantity
			returning
				sol-base-item-price
				sol-disc-rate
				sol-item-price
				sol-item-wholesale-price
	endif
	set i50entry-qty = sol-shipped-qty
	do i50entry-do-line-calc same
	do i50entry-get-conversion-factor
	do clib406-calc-line-cost
		parameters
			sol-item-cost
			sol-ordered-qty
			sol-shipped-qty
			sol-line-type
			sol-stk-unit-conversion
			sol-stk-unit-desc
			stk-price-per
		returning
			sol-ordered-line-cost
			sol-line-cost
	do i50entry-calc-shipped-totals same
	do i50entry-calc-order-totals same
endprocedure //m50lines-setup-wn-lines  --------------------------------------

procedure check-overide-line-program
	local field
		lf-ok-to-recalc-and-refresh		type boolean
		lf-mode-type					pic x
	//
	if screenmode() in {correct entry md-detail-entry remove}
		if screenmode() in {correct}
			set lf-mode-type = 'C'
		elseif screenmode() in { entry, md-detail-entry }
			set lf-mode-type = 'E'
		elseif screenmode() in { remove }
			set lf-mode-type = 'R'
		else
			set lf-mode-type = SPACES
		endif
		push sales-order-line
		do public-process-line-after-it-has-been-entered
			parameter
				sales-order.*
				sales-order-line.*
				lf-mode-type
			returning
				lf-ok-to-recalc-and-refresh
		pop sales-order-line
		if lf-ok-to-recalc-and-refresh
			if lf-mode-type in {'E' 'R'}
				set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			else
				set i50lines-cal-display-totals = CURRENT_LINE_AND_NO_SEQ
			endif
			do b300-calc-total-amounts-update-header
			do display-totals
		endif
	endif
endprocedure //check-overide-line-program ------------------------------------

procedure public-other-whse-price export
//////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//<DESC>
//	This procedure allows customisation of price changes when selecting an item
//	rom another whse.
//	It may be used where you want to accept the new price from the warehouse but
//  not to override the sol-disc-rate that may have already been setup
//
// Example
// If you want to get a new price but change the discount you could use code like this
// procedure public-other-whse-price
//	parameters
//		lp-so.*						like sales-order.*
//		lp-sol.*					like sales-order-line.*
//		lp-swd.*					like stock-warehouse-details.*
//	returning
//		lr-sol-base-item-price		like sol-base-item-price
//		lr-sol-disc-rate			like sol-disc-rate
//		lr-sol-item-price			like sol-item-price
//		lr-sol-item-wholesale-price	like sol-item-wholesale-price
//	local field
//		lf-save-disc				like sol-disc-rate
//
// set lf-save-disc = lp-sol.sol-disc-rate
// do next public-other-whse-price
//	parameters
//		lp-so.*						like sales-order.*
//		lp-sol.*					like sales-order-line.*
//		lp-swd.*					like stock-warehouse-details.*
//	returning
//		lr-sol-base-item-price		like sol-base-item-price
//		lr-sol-disc-rate			like sol-disc-rate
//		lr-sol-item-price			like sol-item-price
//		lr-sol-item-wholesale-price	like sol-item-wholesale-price
//	set lr-sol-disc-rate = lf-save-disc
//
////////////////////////////////////////////////////////////////////////////////
//<P1>		Sales Order Object
//<P2>		Sales Order Line Object
//<P3>		Stock Warehouse Detail
//
//<R1>		Sales Order Base Item Price
//<R2>		Sales Order Disc Rate
//<R3>		Sales Order Line Item Price
//<R4>		Sales Order Item Wholesale Price
////////////////////////////////////////////////////////////////////////////////
	parameters are
		sales-order.*				global
		sales-order-line.*			global
		stock-warehouse-detail.*	global
	returning
		lr-sol-base-item-price		like sol-base-item-price
		lr-sol-disc-rate			like sol-disc-rate
		lr-sol-item-price			like sol-item-price
		lr-sol-item-wholesale-price	like sol-item-wholesale-price
	local field
		lf-found-stk-price			type boolean
	//
	set lr-sol-base-item-price = sol-base-item-price
	set lr-sol-disc-rate = sol-disc-rate
	//
	get stock-master
		on index stock-code
		key is stock-code
	do i4getprice-get-stock-price-record
		parameter stock-code so-whse-code so-cust-type
		returning lf-found-stk-price
					prc-region-code
	if not lf-found-stk-price
		initialise stock-price leaving
			stock-code prc-region-code
		insert stock-price
	endif
	if i50entry-transfer-between-whse = YES
		do i50tp-determine-transfer-price
	else
		do i5pricemod-pricing-module
			parameter
				FALSE
	endif
	if sys-so-base-price-to-store = "1"
		set lr-sol-base-item-price = i5pricemod-rrp
	endif
	if i5pricemod-is-disc-to-be-used = NO
		set sol-disc-rate = 0
		set lr-sol-disc-rate = sol-disc-rate
	endif
	//
	set lr-sol-item-price = i5pricemod-item-price
	set lr-sol-item-wholesale-price = i5pricemod-deemed-wholesale-price
endprocedure //public-other-whse-price ---------------------------------------

procedure public-other-whse-price-for-split-lines export
//////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//<DESC>
//	This procedure allows customisation of prices when the sales order lines
//	splitting occurs. This procedure will allow to calculate the special prices
//  that needs to get affect for the purticular sales order line that has been
//	split from the original sales order line entered.
////////////////////////////////////////////////////////////////////////////////
//<P1>		Sales Order Object
//<P2>		Sales Order Line Object
//<P3>		Stock Warehouse Detail
//<P4>		ws-total-order-quantity (initial line quantity entered)
//
//<R1>		Sales Order Base Item Price
//<R2>		Sales Order Disc Rate
//<R3>		Sales Order Line Item Price
//<R4>		Sales Order Item Wholesale Price
////////////////////////////////////////////////////////////////////////////////
	parameters
		sales-order.*				global
		sales-order-line.*			global
		stock-warehouse-detail.*	global
		lp-orig-sol-line-qty		like sol-ordered-qty
	returning
		lr-sol-base-item-price		like sol-base-item-price
		lr-sol-disc-rate			like sol-disc-rate
		lr-sol-item-price			like sol-item-price
		lr-sol-item-wholesale-price	like sol-item-wholesale-price
	//
	set lr-sol-base-item-price	= sol-base-item-price
	set lr-sol-disc-rate = 	sol-disc-rate
	set lr-sol-item-price =	sol-item-price
	set lr-sol-item-wholesale-price = sol-item-wholesale-price
endprocedure //public-other-whse-price-for-split-lines ----------------------------------

procedure reduce-contract-qty
	save sales-order
	save sales-order-line
	I4GETCONV_GET_CONVERSION_FACTOR(sol-stk-unit-desc,i50entry-stk-conv-factor)
	if screen-mode() in { correct remove }
		set ws-update-contract-qty = (sol-ordered-qty * sol-stk-unit-conversion)
			- (i50entry-sol-ordered-qty * i50entry-stk-conv-factor)
	else
		set ws-update-contract-qty = (sol-ordered-qty * sol-stk-unit-conversion)
			+ (i50entry-sol-ordered-qty * i50entry-stk-conv-factor)
	endif
	if i50lines-found-contract
		if i50lines-contracts-used = 1
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-proforma-order-no ws-proforma-bo-suffix
			on error
			else
				extract sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix 0
					next same so-order-no so-bo-suffix
					where stock-code = ws-entered-stock-code
					and (sol-ordered-qty - sol-shipped-qty) > 0
				detail
					get sales-order-line current lock
					if sol-stk-unit-conversion = ZERO
						set sol-stk-unit-conversion = 1
					endif
					set i50lines-licence-qty-remaining =
						(sol-ordered-qty - sol-shipped-qty)
						* sol-stk-unit-conversion
					if i50lines-licence-qty-remaining >= ws-update-contract-qty
						set sol-shipped-qty += ws-update-contract-qty
							/ sol-stk-unit-conversion
						set ws-update-contract-qty = 0
					else
						set ws-update-contract-qty
							-= i50lines-licence-qty-remaining
						set sol-shipped-qty = sol-ordered-qty
					endif
					update sales-order-line
					if ws-update-contract-qty <= 0
						break
					endif
				endextract
			endon
		elseif i50lines-contracts-used = 2
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-proforma-order-no ws-proforma-bo-suffix
			on error
			else
				extract sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix 0
					next same so-order-no so-bo-suffix
					where stock-code = ws-entered-stock-code
				detail
					//Assume only one item code will match
					//and always set shipped up by amount on this line
					get sales-order-line current lock
					if sol-stk-unit-conversion = ZERO
						set sol-stk-unit-conversion = 1
					endif
					set sol-shipped-qty += ws-update-contract-qty
						/ sol-stk-unit-conversion
					set ws-update-contract-qty = 0
					update sales-order-line
					break
				endextract
			endon
			restore sales-order-line
			if screen-mode() in { correct remove }
				set ws-update-contract-qty =
					(sol-ordered-qty * sol-stk-unit-conversion)
					- (i50entry-sol-ordered-qty * i50entry-stk-conv-factor)
			else
				set ws-update-contract-qty =
					(sol-ordered-qty * sol-stk-unit-conversion)
					+ (i50entry-sol-ordered-qty * i50entry-stk-conv-factor)
			endif
			if sol-line-type not in {'SN' 'WN' 'KN' 'RR'}
			or stk-conversion-factor = 0
				set stk-conversion-factor = 1
			endif
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-proforma-order-no ws-proforma-bo-suffix
			on error
			else
				if screen-mode() in { remove }
					set so-order-total-shipped-amount -= (sol-line-amount
						- i50entry-sol-line-amount)
				else
					set so-order-total-shipped-amount += (sol-line-amount
						- i50entry-sol-line-amount)
				endif
				set so-order-total-shipped-cost += (ws-update-contract-qty
					/ stk-conversion-factor)
				set ws-limit-contract-amount = so-order-total-amount
					- so-order-total-shipped-amount
				set ws-limit-contract-qty = so-order-total-charges
					- so-order-total-shipped-cost
				update sales-order
				if so-order-total-amount != 0	//contract limit
				 	if ws-limit-contract-amount < 0
						message 'WARNING: Contract amount limit exceeded'
				 	elseif ws-limit-contract-amount = 0
						message 'WARNING: Contract amount limit reached'
					endif
				endif
			endon
		endif
	endif
	restore sales-order
	restore sales-order-line
	get sales-order
	get sales-order-line
	on error
	endon
	restore sales-order
	restore sales-order-line
	I4GETCONV_GET_CONVERSION_FACTOR(sol-stk-unit-desc,i50entry-stk-conv-factor)
endprocedure //reduce-contract-qty -------------------------------------------

procedure remove-so-po-link
	get sales-order-line-purchase lock
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix sol-line-seq
	on error
		// nothing to remove
	else
		delete sales-order-line-purchase
	endon
	// remove so/wo link
	extract sales-order-work-link lock
		on index sowl-so-order-no sowl-so-bo-suffix sowl-sol-line-seq
			sowl-work-order sowl-wor-seq-no
		key is so-order-no so-bo-suffix sol-line-seq SPACES ZERO
		next same sowl-so-order-no sowl-so-bo-suffix sowl-sol-line-seq
	detail
		delete sales-order-work-link
	endextract
endprocedure //remove so-po-link ----------------------------------------------

procedure check-sales-order-line-packages
	get sales-order-line-packages
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix sol-line-seq
	on error
		//they might not use scanpack, or not yet packed
		set ws-allow-removal = TRUE
	else
		set ws-allow-removal = FALSE
		message "Line must be unpacked first. SSCC: " sopk-sscc
	endon
endprocedure //check-sales-order-line-packages --------------------------------

procedure remove-sales-order-picking-location
	extract sales-order-picking-location lock
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix sol-line-seq
		next same so-order-no so-bo-suffix sol-line-seq
	detail
		if (i50lines-whse-type = IWTYPEDEF_DISTRIB_LOC_PICK
		and sol-picked-qty != ZERO)
		or ( i50entry-sales-credit = YES // credit note
		and sol-shipped-qty < 0			 // update whse = 'N'
		and sol-update-whse = 'N')
			if sol-line-type in {'RR' 'WN'}
				set whse-code = sol-whse-code
			else
				set whse-code = so-whse-code
			endif
			do clib402-update-a-location
				parameters
					stock-code
					whse-code
					sl-location-code
					sol-pick-reference
					ZERO
					ZERO
					(ZERO - sol-picked-qty)
					ZERO
					FALSE
		endif
		delete sales-order-picking-location
	endextract
endprocedure //remove-sales-order-picking-location --------------------------

screen ask-for-classification
	window @21,35 to @23,80
		title is "Enter Batch Classification"
	allow entry
before
	display "   Classification:" @22,40
	if sys-lab-product-grading-level = 'S'
		set ws-stock-key = stock-code
	else
		set ws-stock-key = stock-group
	endif
	set ws-value-entered = FALSE
detail
	//message "ask-for-classification"
	accept sol-whse-code @22,59 pic xxx
		help "Enter batch classification of stock to transfer"
		uppercase
		default sol-whse-code
	validations
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is "B3" sol-whse-code
		on error
			if sol-whse-code not = SPACES
				message "Batch classification not valid " sol-whse-code
				reenter
			endif
		else
			if sol-whse-code not = SPACES
			and sys-tbl-alpha-1 = 'N'
				message "This classification cannot be sold or transferred"
				reenter
			endif
		endon
		// Loading in valid batch classification codes
		if sol-whse-code != SPACES
			get production-batch-stock-class
				on index pbsc-stock-key-type pbsc-stock-key pbsc-class
				key is SPACES ws-stock-key sol-whse-code
			on error
				message "Batch classification for item code not valid " ws-stock-key sol-whse-code
				reenter
			endon
		endif
	endvalidations
	on help-key
		set sys-tbl-type = "B3"
		do i85codes-table-help
		if sys-tbl-code != SPACES
			set sol-whse-code = sys-tbl-code
		endif
		reenter optional
	endon
	confirm auto
	confirmed
		set ws-value-entered = TRUE
	endconfirm
endscreen //ask-for-classification -------------------------------------------

screen ask-for-short-ship-reason
	window @21,35 to @23,80
		title is "Enter Short Ship Reason"
	allow entry
before
	display "Short Ship Reason:" @22,40
	set ws-value-entered = FALSE
detail
	accept sol-short-ship-reason-code @22,59
		help "Enter short shipment reason"
		uppercase
		default sol-short-ship-reason-code
	lookup system-table
		on index sys-tbl-type sys-tbl-code
		key is "SQ" sol-short-ship-reason-code
	on error
		if sol-short-ship-reason-code not = SPACES
			message "Short shipment reason not valid " sol-short-ship-reason-code
			reenter
		endif
	endon
	on help-key
		set sys-tbl-type = "SQ"
		do i85codes-table-help
		if sys-tbl-code not = SPACES
			set sol-short-ship-reason-code = sys-tbl-code
		endif
		reenter optional
	endon
	confirm auto
	confirmed
		set ws-value-entered = TRUE
	endconfirm
endscreen //ask-for-short-ship-reason ----------------------------------------

procedure set-qty-to-one-and-update-line
	local field
		lf-flag				pic x
		lf-avail-dedicated	like whse-qty-on-hand
	//
	set i50lines-qty-screen-displayed = FALSE
	//
	if stk-measurement-flag = 'W'
	and str-len(ws-saved-stock-code) = 13
	and substring(ws-saved-stock-code,1,1) = '0'
		// possible a random weight stock-code
		// assuming stock-code length of 6, if the
		if sys-stock-design-code-size not between 1 and 7
			if stock-code = substring(ws-saved-stock-code,2,7)
				set lf-flag = 'W'
			endif
		else
			if stock-code = substring(ws-saved-stock-code,2,
								sys-stock-design-code-size + 1)
				set lf-flag = 'W'
			endif
		endif
	endif
	if lf-flag = 'W'
		set sol-ordered-qty = num(substring(ws-saved-stock-code,9,13))
		if sol-ordered-qty = 0
			set sol-ordered-qty = 1
		else
			set sol-ordered-qty /= 1000
		endif
		set i50lines-flag = SPACES
	elseif num(str-ordered-qty) = 0
		set sol-ordered-qty = 1
	else
		set sol-ordered-qty = num(str-ordered-qty)
	endif
	if sol-stk-unit-desc = stk-alt-unit-desc
		//we are dealing with the alternate qty
		do i50lines-determine-available-stock
			parameters so-order-no so-bo-suffix sol-line-seq
				sol-line-type sol-ordered-qty i5pricemod-bill-to
				so-whse-code stock-code
				ws-van-id
				TRUE	//Indicative available stock.
				sol-stk-unit-desc
				sol-stk-unit-conversion
			returning ws-available-stk
				lf-avail-dedicated
				i50entry-dedicated-line
				sol-stk-unit-desc		// used to display available
				sol-stk-unit-conversion	// used to display available
	elseif sol-stk-unit-conversion not in {0,1}
		do i50lines-determine-available-stock
			parameters so-order-no so-bo-suffix sol-line-seq
				sol-line-type sol-ordered-qty i5pricemod-bill-to
				so-whse-code stock-code
				ws-van-id
				TRUE	//Indicative available stock.
				sol-stk-unit-desc
				sol-stk-unit-conversion
			returning ws-available-stk
				lf-avail-dedicated
				i50entry-dedicated-line
				sol-stk-unit-desc		// used to display available
				sol-stk-unit-conversion	// used to display available
	endif
	set i50lines-sys-backorder-flag = ws-orig-whse-bo-flag
	set ws-orig-whse-bo-flag = '9'
	do i50lines-determine-quantities
	set ws-orig-whse-bo-flag = i50lines-sys-backorder-flag
	//
	do i5pricemod-pricing-module
		parameter
			FALSE
	if sys-so-base-price-to-store = "1"
		set sol-base-item-price = i5pricemod-rrp
	endif
	if i5pricemod-is-disc-to-be-used = NO
		set sol-disc-rate = 0
	endif
	//
	set sol-item-price = i5pricemod-item-price
	if I5TENDTRK_GIFT_VOUCHER_PROD
		set sol-item-price = ttt-value
	endif
	if i5pricemod-price-used <> ZERO
		set sol-price-rule = i5pricemod-price-rule[i5pricemod-price-used]
	endif
	set sol-item-wholesale-price = i5pricemod-deemed-wholesale-price
	//
	set i50entry-qty = sol-shipped-qty
	if sol-line-type in { 'SS','RS' }
		set stk-price-per = sol-price-uom
	endif
	do i50entry-get-conversion-factor
	do clib406-calc-line-cost
		parameters
			sol-item-cost
			sol-ordered-qty
			sol-shipped-qty
			sol-line-type
			sol-stk-unit-conversion
			sol-stk-unit-desc
			stk-price-per
		returning
			sol-ordered-line-cost
			sol-line-cost
	do i50entry-calc-shipped-totals entry
	do i50entry-calc-order-totals entry
endprocedure //set-qty-to-one-and-update-line --------------------------------

menu help-for-confirm
	parameter lp-mode			pic x(5)
	returning lr-confirm		pic x
	//
	window @1,42 to @22,80
detail
	option "A - Search by alternative part number" @2,44
		when lp-mode = 'entry'
		help "Search for other item codes by alternative part number"
		icon blank-icon
		set lr-confirm = 'A'
		exit
	option "D - Maintain delivery address" @4,44
		help "Allow maintenance of delivery address"
		icon blank-icon
		set lr-confirm = 'D'
		exit
	option "E - Expected Line Delivery Date" @5,44
		help "Expected delivery date for this line"
		icon blank-icon
		set lr-confirm = 'E'
		exit
	option "F - Factory to Supply Item" @6,44
		help "Set the flag for this line to F, this Item is be come from Factory"
		icon blank-icon
		set lr-confirm = 'F'
		exit
	option "G - Equipment Trades" @7,44
		when lp-mode = 'entry'
		help "Rebate Credit Notes - Add this item to stock"
		icon blank-icon
		set lr-confirm = 'G'
		exit
	option "H - Flag a hidden line" @8,44
		help "Set the print flag for this line to N, don't print on invoice."
		icon blank-icon
		set lr-confirm = 'H'
		exit
	option "I - Internal to Supply Item" @9,44
		help "Set the flag for this line to I, this Item is be sourced Internally"
		icon blank-icon
		set lr-confirm = 'I'
		exit
	option "K - Treat as Indent Item" @10,44
		help "Set the flag for this line to K, treat as indent item"
		icon blank-icon
		set lr-confirm = 'K'
		exit
	option "L - Lost line" @11,44
		when lp-mode = 'entry'
		help "Don't update lines file, however write details to a Lost file"
		icon blank-icon
		set lr-confirm = 'L'
		exit
	option "M - Manufacture line item" @12,44
		help "Set print flag to 'M', indicating manufactured item"
		icon blank-icon
		set lr-confirm = 'M'
		exit
	option "N - Not confirmed" @13,44
		when lp-mode = 'entry'
		help "Abandon entire line, ask for item code again"
		icon blank-icon
		set lr-confirm = 'N'
		exit
	option "O - Other Line Notes" @14,44
		help "Open window allowing entry of other line notes"
		icon blank-icon
		set lr-confirm = 'O'
		exit
	option "P - Maintain the item price" @15,44
		when lp-mode = 'entry'
		help "Allow maintenance of the item price"
		icon blank-icon
		set lr-confirm = 'P'
		exit
	option "Q - Supplier quotation" @16,44
		when lp-mode = 'entry'
		help "Allow selection of suppliers to quote for item"
		icon blank-icon
		set lr-confirm = 'Q'
		exit
	option "R - Review full line" @17,44
		when lp-mode = 'entry'
		help "Review all fields on current line"
		icon blank-icon
		set lr-confirm = 'R'
		exit
	option "S - Substitute item code" @18,44
		help "Allow entry of a substitute item code"
		icon blank-icon
		set lr-confirm = 'S'
		exit
	option "T - Taken item code" @19,44
		help "Indicate that this item code has been taken by customer already"
		icon blank-icon
		set lr-confirm = 'T'
		exit
	option "W - Check quantities in other whse" @20,44
		help "Check the other warehouse details for this item code"
		icon blank-icon
		set lr-confirm = 'W'
		exit
	option "Y - Confirm Line" @21,44
		when lp-mode = 'entry'
		help "Confirm the current fields and update sales order lines file"
		icon blank-icon
		set lr-confirm = 'Y'
		exit
	option "Z - Short ship reason code" @22,44
		help "Allow maintenance of the short ship reason code"
		icon blank-icon
		set lr-confirm = 'Z'
		exit
	confirm auto
	confirmed
	endconfirm
endmenu //help-for-confirm ------------------------------------------------

procedure rest-of-update-checks
	//
	//must be called with   same
	//
	set ws-refresh-review = FALSE
	set ws-update-sol-for-WN = FALSE
	if sol-line-type in { 'SN','WN','RR','KN' }
		if (i50entry-sales-credit = NO
			or (i50entry-sales-credit = YES
			and sol-update-whse = 'Y')
			or (i50entry-sales-credit = YES // credit note with qty change
			and sol-update-whse = 'N'		// and update whse = 'N'
			and screenmode() = correct)
			)
		and (i50entry-return-authorisation = NO
			or (i50entry-return-authorisation = YES
			and sol-update-whse = 'Y')
			)
		then
			if screenmode() != remove
				do a310-check-line-gp same
			endif
			if stk-stock-status not in {'L','Z'}
				do i50entry-update-stock-file same
				if stk-serialized-flag = YES
				or (i50lines-whse-type = IWTYPEDEF_LOAN_DEMO_WHSE
					and sol-line-type != 'KN')
				or (stk-serialized-flag = 'L'		//Lot track item
					and (sys-lot-or-serial-entry-flag in {'2' '3'})
				or (stk-serialized-flag = 'L' 		//Lot track item
					and get_param(1) = '-cash'		//Cash sales
					and sys-point-of-sale-mode-used = '5' // All done in m50lines
					and sys-serial-traceability-level = '3'))
					// In cash sales with Point of Sales Operating Mode = 5, no
					// sales order header and conclusion screens are used and no
					// despatch (where lot number can be allocated) will be
					// needed. So has to allow maintenance of lot numbers here when
					// serial traceability is mandatory.
				or (stk-serialized-flag = 'L'
					and i50entry-sales-credit = YES
					and sol-update-whse = 'N')
					if screenmode() = remove
						if i50entry-sales-credit = YES
						and sol-shipped-qty < 0
							//Do zip
						else
							spl "so/m5serial" parameters are "-remove"
								so-order-no so-bo-suffix
								sol-line-seq i50entry-sales-credit
								fstr(sol-shipped-qty,8,4) sol-line-type stock-code
								//regain currency on files
							get sales-order lock
							on error
							endon
							get sales-order-line
							on error
							endon
							set ws-refresh-review = TRUE
						endif
					elseif screenmode() = correct
						if i50entry-sales-credit = YES  // credit note
						and sol-shipped-qty < 0			// update whse = 'N'
						and sol-update-whse = 'N'
							do remove-sales-order-picking-location
						else
							do i50lines-get-serial-no-info
								parameter
									ws-sopl-record-exists
							get sales-order-line
							on error
								set reenter-needed = TRUE
								exit
							endon
							set ws-refresh-review = TRUE
						endif
					elseif sol-shipped-qty != 0
					and sol-line-type != 'WN'//line whse note set up yet
					and ((stk-serialized-flag = YES
							and sys-so-status-default in {'I','O'})
						or (stk-serialized-flag = YES
							and sys-serial-traceability-level = '3')
						or (stk-serialized-flag = YES
							and sys-lot-or-serial-entry-flag = '1')
						or (stk-serialized-flag = 'L'    //Lot track item
							and sys-lot-or-serial-entry-flag = '2')
						or sys-lot-or-serial-entry-flag = '3'
						or (stk-serialized-flag = 'L'  //Lot track item
							and get_param(1) = '-cash'  //Cash sales
							and sys-point-of-sale-mode-used = '5'
							and sys-serial-traceability-level = '3'))
							//
							//If updating a record for a type 3 warehouse then
							//a price change is the only available option.
							//Lot/serial changes at this point are not allowed.
							if not (screenmode() = md-price
							and i50lines-whse-type = IWTYPEDEF_DISTRIB_LOC_PICK)
								do i50lines-get-serial-no-info
									parameter
										ws-sopl-record-exists
							endif
							get sales-order-line
							on error
								set reenter-needed = TRUE
								exit
							endon
						//
						set ws-refresh-review = TRUE
					endif
				endif
			endif
		endif
	elseif sol-line-type = 'SS'
	and screenmode() = entry
	and i50entry-sales-credit = NO
	and i50entry-return-authorisation = NO
		do a310-check-line-gp same
	endif
	//
	do b300-calc-total-amounts-update-header
	do display-totals
	//
	do check-and-warn-min-gp same
	//
	if screenmode() = correct
	and sol-line-type = 'SN'
		if sol-chg-type = 'D'
		//1st check if all qty fields are zero
			if sol-ordered-qty = 0
			and sol-shipped-qty = 0
			and sol-backorder-qty = 0
				get sales-order-line current lock
				delete sales-order-line
				do i50lines-delete-sales-order-line-notes
			endif
			//we just changed a component so refresh review
			set ws-refresh-review = TRUE
		endif
	endif
	//
	if screenmode() = remove
	and (stk-serialized-flag in {'L' 'P'}
	or i50lines-whse-type = IWTYPEDEF_VAN_WHSE)
		spl "so/m5serial" parameters are "-lot"
			so-order-no so-bo-suffix
			sol-line-seq i50entry-sales-credit
			'notused' 'R' //Delete sales pick loc record and adj fifo record.
			stock-code	// 8th parameter
	endif
	//check for van stock or lot tracked item
	if sol-line-type in { 'SN','WN' 'RR' }
	and stk-stock-status not in {'L','Z'}
	and ( i50lines-whse-type = IWTYPEDEF_VAN_WHSE
	or (i50entry-transfer-between-whse = YES
	and ws-whse-to = IWTYPEDEF_VAN_WHSE)
	or (stk-serialized-flag = 'L'
	and sys-lot-or-serial-entry-flag not in {'2' '3'})
	or (stk-serialized-flag = 'P'
	and so-order-status in I5SOSTATII_OUTSTANDING_TRANSFERS_STATII) )
		if screenmode() = entry
			set ws-mode-type = 'E'
		elseif screenmode() = correct
			set ws-mode-type = 'C'
		elseif screenmode() = remove
			set ws-mode-type = 'R'
		endif
		if (i50lines-whse-type = IWTYPEDEF_VAN_WHSE
		or (i50entry-transfer-between-whse = YES and ws-whse-to = IWTYPEDEF_VAN_WHSE ))
		and (screenmode() = entry or ws-mode-type in { 'C' 'R' })
			if ws-mode-type = "R"
				//Do remove straight away
				spl "so/m5serial" parameters are "-van"
					so-order-no so-bo-suffix
					sol-line-seq i50entry-sales-credit
					'notused' ws-mode-type
					stock-code	// 8th parameter
				get sales-order lock
				on error
				endon
				get sales-order-line lock
				on error
				endon
			else
				//don't jump to get van details, ie get
				//them at the end of the order
			endif
		elseif sys-licence-type in { '3' '4' }
		and so-order-status in I5SOSTATII_OUTSTANDING_TRANSFERS_STATII
		and sol-whse-code not = SPACES
			//Don't jump to lot tracking screen if specifying classification
		elseif (ws-mode-type = 'C'
				and so-order-status > I5SO_PICKING_PRINTED)
		or (ws-mode-type = 'E' and so-order-status > I5SO_PICKING_PRINTED)
			//to get here must only be lot item.
			//If performing a price change for a type 3 warehouse then
			//lot or serial changes at this point are not allowed.
			if not (screenmode() = md-price
			and i50lines-whse-type = IWTYPEDEF_DISTRIB_LOC_PICK)
				spl "so/m5serial" parameters are "-lot"
					so-order-no so-bo-suffix
					sol-line-seq i50entry-sales-credit
					'notused' ws-mode-type
					stock-code	// 8th parameter
				get sales-order lock
				on error
				endon
				get sales-order-line lock
				on error
				endon
			endif
		endif
		//
		if screenmode() in { remove correct }
		//in remove mode the line seq# is only changed here
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
		else
		//in entry mode the line seq# is changed
		//in procedure mult-disc-exchange-items
			set i50lines-cal-display-totals = CURRENT_LINE_AND_NO_SEQ
		endif
		do b300-calc-total-amounts-update-header
		do display-totals
		set ws-refresh-review = TRUE
	endif
	//
	if screenmode() = correct
	and so-order-type-code = I5SO_TYPE_DIRECT_SHIP
	and ws-correct-po = TRUE
		spl "so/m50extra" parameters are "-poship"
			str(so-order-no) so-bo-suffix
			fstr(sol-line-seq,4,1)
		get sales-order lock
		on error
		endon
		get sales-order-line lock
		on error
		endon
		set ws-correct-po = FALSE
	endif
	//
	if screenmode() = entry
	and LANE_ENTRY
		if DISPLAY_ON_MONITOR
			page
			if sol-line-description != SPACES
				print sol-line-description pic x(20) col 1 font 1
			else
				print stk-description pic x(20) col 1 font 1
			endif
			print concat('Qty',
				fstr(sol-shipped-qty,4,0),
				sol-stk-unit-desc, ' $',
				fstr(sol-shipped-amount,4,2) ) col 1 font 2
		endif
	endif
endprocedure //rest-of-update-checks -------------------------------------------

procedure check-officer-limit
	local field
		lf-order-total					like so-order-total-amount
		lf-ship-total					like so-order-total-shipped-amount
		lf-total-to-be-checked			like so-order-total-shipped-amount
		lf-original-to-be-checked		like so-order-total-shipped-amount
		lf-default-status				pic xx
		lf-go-to-credit-hold			type boolean
		lf-title						pic x(120)
		lf-load-into-adv				type boolean
		lf-credit-limit-available-amount	like so-order-total-amount
	//
	if ws-process-mode != EDIT
		// This procedure should only be called when ws-process-mode = EDIT
		exit
	endif
	//POS work orders do not need to check credit limit at this point in
	//time as it will be picked up when released through POS.
	if ws-process-mode = EDIT
	and so-order-status = I5SO_ASSEMBLY_IN_PROGRESS
	and so-order-source = I5SOURCE_POS_LANE_ORDER
		exit
	endif
	//
	if sys-credit-check-ship-or-order = '1'
	or so-order-type-code = I5SO_TYPE_DIRECT_SHIP
		set lf-total-to-be-checked = so-order-total-amount
		set lf-original-to-be-checked = ws-original-order-total
	else
		set lf-total-to-be-checked = so-order-total-shipped-amount
									+ so-order-total-charges
		set lf-original-to-be-checked = ws-original-ship-total
									+ ws-original-charges
	endif
	// if the value has increased check for status change
	if abs(lf-total-to-be-checked) > abs(lf-original-to-be-checked)
		set ws-old-audit-status = so-order-status
		if i50entry-sales-credit = YES
			set lf-order-total = so-order-total-amount
									+ so-order-total-charges
			set lf-ship-total = so-order-total-shipped-amount
									+ so-order-total-charges
			if so-curr-code in { SPACES sys-local-currency-code }
				// in local currency, calc just above
			else
				do clibcurrency-convert-foreign-to-local
					parameters
						so-curr-code
						lf-order-total
						so-curr-final-exchange-rate
					returning
						lf-order-total
				do clibcurrency-convert-foreign-to-local
					parameters
						so-curr-code
						lf-ship-total
						so-curr-final-exchange-rate
					returning
						lf-ship-total
			endif
			if sys-credit-check-ship-or-order = '1'
			or so-order-type-code = I5SO_TYPE_DIRECT_SHIP
				set lf-total-to-be-checked = lf-order-total
			else
				set lf-total-to-be-checked = lf-ship-total
			endif
			if ws-is-user-a-credit-officer = YES
			and abs(lf-total-to-be-checked) > ws-credoff-max-cnote-limit
			and ws-credoff-max-cnote-limit != 0
				do change-status-to-credit-hold
					parameter is I5SO_ENTERED_CNOTE_ON_HOLD
				message 'Order exceeds officer limit.  Status Credit Note Hold'
			elseif ws-is-user-a-credit-officer = NO
				do change-status-to-credit-hold
					parameter is I5SO_ENTERED_CNOTE_ON_HOLD
				message 'Order exceeds customer limit. Status Credit Note Hold'
			endif
		else
			if i50entry-normal-order = YES
				do clibdeb-check-credit-limit-for-customer
					parameter
						so-cust-code
					returning
						lf-credit-limit-available-amount
				if lf-credit-limit-available-amount < 0
					// this order has made the customer go OVER
					// there credit limit!
					set lf-order-total = so-order-total-amount + so-order-total-charges
					set lf-ship-total = so-order-total-shipped-amount + so-order-total-charges
					if so-curr-code in { SPACES sys-local-currency-code }
						// in local currency, calc just above
					else
						do clibcurrency-convert-foreign-to-local
							parameters
								so-curr-code
								lf-order-total
								so-curr-final-exchange-rate
							returning
								lf-order-total
						do clibcurrency-convert-foreign-to-local
							parameters
								so-curr-code
								lf-ship-total
								so-curr-final-exchange-rate
							returning
								lf-ship-total
					endif
					if sys-credit-check-ship-or-order = '1'
					or so-order-type-code = I5SO_TYPE_DIRECT_SHIP
						set lf-total-to-be-checked = lf-order-total
					else
						set lf-total-to-be-checked = lf-ship-total
					endif
					//
					// Check if the sales order is loaded into advanced
					// warehouse. If so, no manual status change can
					// be made.
					set lf-load-into-adv = FALSE
					get warehouse-order-picking-header
						on index order-no bo-suffix
						key is so-order-no so-bo-suffix
					on error
					else
						if so-order-status >= I5SO_PICKING_PRINTED
							set lf-load-into-adv = TRUE
						endif
					endon
					if ws-old-audit-status = I5SO_ENTERED_CREDIT_HOLD
						// if the status of the order is already at
						// credit hold, is there anything to do?
					elseif lf-load-into-adv
					or (sys-so-stop-editing = '1'
					and so-order-status >= I5SO_PICKING_PRINTED)
					or (sys-so-stop-editing = '0'
					and so-order-status > I5SO_PICKING_PRINTED)
						// Can not change the status, it has processed too
						// far. Just issue a 'over credit limit' info screen
						if lf-load-into-adv
							set lf-title = "Warning! Over Credit Limit. Currently in the advanced warehouse system, Unable to change status to Credit Hold."
						else
							set lf-title = "Warning! Over Credit Limit. Status has progressed too far to put onto Credit Hold"
						endif
						if dr-clearflag in { "O" "W" "F" }
							do c101-open-item-debtor
								parameter lf-title
						else
							message 'Order exceeds customers credit limit. Status Credit Hold'
						endif
					elseif sys-so-edit-limit-check = '3'
						// if over credit limit always place on Credit HOLD,
						// even if under the Credit Release Officers Limit!
						do change-status-to-credit-hold
							parameter is I5SO_ENTERED_CREDIT_HOLD
						//
						set lf-go-to-credit-hold = TRUE
						set lf-title = "Warning! Over Credit Limit. Status changed to Credit Hold"
						// Issue 'Over Credit limit' message
						if dr-clearflag in { "O" "W" "F" }
							do c101-open-item-debtor
								parameter lf-title
						else
							message 'Order exceeds customers credit limit. Status Credit Hold'
						endif
					elseif sys-so-edit-limit-check = '4'
						//If order is under the Credit Officers credit limit,then
						//ask the user if they want to place the order on Credit
						//Hold. If they say No, then leave the status as it is.
						//If they say YES or if the user is not a credit officer
						//or it is over the credit officer limit, then set the
						//status to Credit Hold and display the
						//'Over Credit Limit' information screen.
						if ws-is-user-a-credit-officer = YES
						and lf-total-to-be-checked <= ws-credoff-max-limit
							// order is under the officer credit limit
							do ask-if-go-to-credit-hold
								returning lf-go-to-credit-hold
						else
							// not a credit officer or over their credit limit!
							set lf-go-to-credit-hold = TRUE
						endif
						if lf-go-to-credit-hold
							do change-status-to-credit-hold
								parameter is I5SO_ENTERED_CREDIT_HOLD
							set lf-title = "Warning! Over Credit Limit. Status changed to Credit Hold"
						else
							set lf-title = "Warning! Over Credit Limit"
						endif
						// Issue 'Over Credit limit' message
						if dr-clearflag in { "O" "W" "F" }
							do c101-open-item-debtor
								parameter lf-title
						else
							message 'Order exceeds Customers Credit Limit. Status Credit Hold'
						endif
					else
						// ie sys-so-edit-limit-check = 0, 1, or 2
						// NOTE: 0 and 1 do the same thing!
						if ws-is-user-a-credit-officer = YES
						and lf-total-to-be-checked <= ws-credoff-max-limit
							// order is under the officer credit limit
							set lf-go-to-credit-hold = FALSE
						else
							set lf-go-to-credit-hold = TRUE
						endif
						if lf-go-to-credit-hold
							do change-status-to-credit-hold
								parameter is I5SO_ENTERED_CREDIT_HOLD
							set lf-title = "Warning! Over Credit Limit. Status changed to Credit Hold"
						else
							set lf-title = "Warning! Over Credit Limit"
						endif
						if sys-so-edit-limit-check = '2'
							// do not issue any message or 'over credit limit'
							// information screen!
						else
							if dr-clearflag in { "O" "W" "F" }
								do c101-open-item-debtor
									parameter lf-title
							else
								message 'Order exceeds Customers Credit Limit. Status Credit Hold.'
							endif
						endif
					endif
					//if on credit hold and mail flag
					//is set, mail the credit officer
					if sys-mail-credit-officer in { '1' '3' }
					and ws-old-audit-status != I5SO_ENTERED_CREDIT_HOLD
					and so-order-status = I5SO_ENTERED_CREDIT_HOLD
						do clibdeb-check-credit-officer-terr-and-mail
							parameter
								sales-order.*
					endif
					//
					do public-over-customers-credit-limit
						parameters
							ws-is-user-a-credit-officer
							ws-credoff-max-limit
							lf-go-to-credit-hold
							lf-order-total			// in local currency
							lf-ship-total			// in local currency
							ws-original-order-total	// in foreign currency
							ws-original-ship-total	// in foreign currency
							ws-old-audit-status		// original status
							lf-credit-limit-available-amount
							ws-billto-credit-limit-available-amount
							lf-load-into-adv
							sales-order.*
				endif
			elseif i50entry-transfer-between-whse = YES
			and sys-stk-whse-grp-transfers = YES
			and so-order-status != I5SO_TRANSFER_HOLD_FOR_APPROVAL
				do i50extras-check-internal-limits
					parameters are so-whse-code so-whse-to
						returning lf-default-status
				if lf-default-status = 'TA'
					update sales-order
					do i5chgstat-update-so-order-status
						parameters
							so-order-no
						   	so-bo-suffix
						   	I5SO_TRANSFER_HOLD_FOR_APPROVAL
						   	ws-old-audit-status
							TRUE
						returning
							ws-result-code
					message 'Order exceeds Internal limit.  Status Hold.'
					pause
				endif
			endif
		endif
	endif
endprocedure //check-officer-limit -------------------------------------------

procedure change-status-to-credit-hold
	parameter is lp-status-to-be-used			like so-order-status
	//
	// first update any outstanding fields on sales-order.
	update sales-order
	//
	// Now up the status to Credit hold, must make sure ws-old-audit-status
	// is setup!
	do i5chgstat-update-so-order-status
		parameters
			so-order-no
		   	so-bo-suffix
		   	lp-status-to-be-used
		   	ws-old-audit-status
			TRUE
		returning
			ws-result-code
endprocedure //change-status-to-credit-hold ----------------------------------

procedure ask-if-go-to-credit-hold
	returning lr-go-to-credit-hold		type boolean
	//
	message-box "Do you want to place this order on credit hold?"
		title "Order exceeds customers credit limit"
		message-buttons MSG_BOX_YES_NO
		default is MSG_BOX_NO
		icon is MSG_BOX_QUESTION
		tag 1
	if message-status() = MSG_BOX_YES
		set lr-go-to-credit-hold = TRUE
	else
		set lr-go-to-credit-hold = FALSE
	endif
endprocedure //ask-if-go-to-credit-hold --------------------------------------

procedure public-over-customers-credit-limit export
//////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//<DESC>
//	This procedure is only executed if the customer goes over their credit limit
//	The core procedures will have already determined if the order is to go onto
//	credit hold or not and the status of the order will have already been
//	changed, if it was determined that the order is to go onto credit hold.
//
////////////////////////////////////////////////////////////////////////////////
//<P1>		This determines if the user is a credit officer or not. YES / NO
//<P2>		If the user is a credit officer this holds their credit limit.
//<P3>		Holds a flag to indicated if the order has been set to Credit Hold
//			or not. ( TRUE = Status changed, FALSE = Status not changed )
//<P4>		Holds the current order total (has been converted to local currency)
//<P5>		Holds the current ship total (has been converted to local currency)
//<P6>		The original ordered total before going into lines maintenance.
//			NOTE: if the order is in foreign currency so is this amount!
//<P7>		The original shipped total before going into lines maintenance.
//			NOTE: if the order is in foreign currency so is this amount!
//<P8>		The original order status before it was possible changed.
//<P9>		Holds the sold to credit limit available amount.
//			If this value is less than ZERO, then the customer is over their
//			credit limit
//<P10>		Holds the bill to credit limit available amount.
//			If this value is less than ZERO, then the customer is over their
//			credit limit
//<P11>		Hold a flag to indicate if the order has been loaded into the
//			Advanced Warehouse system.  (TRUE = order loaded, FALSE = order
//			not loaded )
//<P12>		Sales Order Object ( i.e. sales-order.*)
//
////////////////////////////////////////////////////////////////////////////////
	parameters are
		lp-is-user-a-credit-officer			pic x
		lp-credoff-max-limit				like slt-attribute-num-0dec-1
		lp-go-to-credit-hold				type boolean
		lp-order-total						like so-order-total-shipped-amount
		lp-ship-total						like so-order-total-shipped-amount
		lp-original-order-total				like so-order-total-shipped-amount
		lp-original-ship-total				like so-order-total-shipped-amount
		lp-original-sales-audit-status		like so-order-status
		lp-credit-limit-available-amount	like balance
		lp-billto-credit-limit-available-amount	like balance
		lp-load-into-adv					type boolean
		lp-sales-order.*					like sales-order.*
	//
	// folowing sets done to stop warnings
	set lp-is-user-a-credit-officer = lp-is-user-a-credit-officer
	set lp-credoff-max-limit = lp-credoff-max-limit
	set lp-go-to-credit-hold = lp-go-to-credit-hold
	set lp-order-total = lp-order-total
	set lp-ship-total = lp-ship-total
	set lp-original-order-total = lp-original-order-total
	set lp-original-ship-total = lp-original-ship-total
	set lp-credit-limit-available-amount = lp-credit-limit-available-amount
	set lp-billto-credit-limit-available-amount = lp-billto-credit-limit-available-amount
	set lp-load-into-adv = lp-load-into-adv
	//
endprocedure //public-over-customers-credit-limit ----------------------------

procedure before-confirm-of-a300-lines
returning
		lr-action				pic x
local field
		lf-account-ok			type boolean
		lf-job-parameter 		type boolean
	//
	//lr-action = spaces - do nothing
	//lr-action = 1 - continue
	//lr-action = 2 - refresh review
	//lr-action = 3 - refresh review and continue
	//
	if screenmode() in { entry, md-detail-entry }
		if sol-line-type = 'SS'
		//leave as it is, as it can now hold a supplier
		elseif sol-line-type = 'SC'
			set stock-code = 'Charges'
		elseif sol-line-type = 'ST'
			set stock-code = sys-long-tax-desc
		elseif sol-line-type in {'SN','WN','RR'}
			if entered-stock-code-status = 'X'
				set sol-line-description = ws-entered-stock-code
				set sol-chg-type = 'X'
			else
				set sol-chg-type = stk-stock-status
			endif
		endif
		if sol-price-overide-flag in { YES "C" I5SOSTATII_ALT_OVER_PRICE}
		and sol-line-type <> 'KN'
		and i5pricemod-item-price <> sol-item-price
			set ordlog-type = 1
			set ordlog-old-info = stock-code
			set ordlog-new-info = SPACES
			set ordlog-old-value = i5pricemod-item-price
			set ordlog-new-value = sol-item-price
			set ordlog-change-value = 0
			set ordlog-ordered-change-value = 0
			set ordlog-ordered-tax-chg-value = 0
			set ordlog-item-wholesale-price = sol-item-wholesale-price
			set ordlog-line-type = sol-line-type
			set ordlog-disc-rate = sol-disc-rate
			do a9000-write-audit-file
		endif
	endif
	if screenmode() in { correct, md-price, md-detail-entry }
	or ((sol-line-type in {'SN' 'WN'}
	and ws-mode-type = 'E'
	and sys-price-disc-entered in {"D" YES "W" "E"}
	and sys-cgd-flg in {YES 'Z' 'X' 'O' 'S' 'T' '1' '2' '3' '4'}))
		if i50entry-sol-disc-rate <> sol-disc-rate
			set ordlog-type = 11
			set ordlog-old-info = stock-code
			set ordlog-new-info = concat(fstr(i50entry-sol-disc-rate,3,3),
				fstr(sol-disc-rate,3,3))
			set ordlog-old-value = ws-sol-shipped-amount
			set ordlog-new-value = sol-shipped-amount
			set ordlog-change-value = sol-shipped-amount - ws-sol-shipped-amount
			set ordlog-ordered-change-value = sol-line-amount
				- i50entry-sol-line-amount
			set ordlog-line-type =  sol-line-type
			set ordlog-item-wholesale-price	= sol-item-wholesale-price
			set ordlog-disc-rate = sol-disc-rate
			set ordlog-ordered-tax-chg-value = sol-ordered-sales-tax-amt
						- ws-sol-ordered-sales-tax-amt
			do a9000-write-audit-file
		endif
	endif
	if screenmode() in { correct, md-price }
	and ws-process-mode in {EDIT ENTRY}
	and sol-line-type <> 'KN'
		if ws-saved-sol-item-cost <> sol-item-cost
			set ordlog-type = 47
			set ordlog-old-info = stock-code
			set ordlog-new-info = SPACES
			set ordlog-old-value = ws-saved-sol-item-cost
			set ordlog-new-value = sol-item-cost
			set ordlog-change-value = 0
			set ordlog-ordered-change-value = 0
			set ordlog-ordered-tax-chg-value = 0
			set ordlog-item-wholesale-price = sol-item-wholesale-price
			set ordlog-line-type = sol-line-type
			set ordlog-disc-rate = sol-disc-rate
			do a9000-write-audit-file
		endif
	endif
	if screenmode() in { correct, md-price }
	and ws-process-mode in {EDIT ENTRY}
	and sol-line-type <> 'KN'
		if i50entry-sol-item-price != sol-item-price
			if sol-price-overide-flag = I5SOSTATII_ALT_PRICE
				set sol-price-overide-flag = I5SOSTATII_ALT_OVER_PRICE
			elseif sol-price-overide-flag
			not in {I5SOSTATII_ALT_OVER_PRICE I5SOSTATII_STK_ALT_PRICE "U"}
				set sol-price-overide-flag = YES
			endif
			if sys-so-pricing-method = 'C'
				set sol-disc-rate = 0
				set sol-extra-item-disc-amt = 0
			endif
			set ordlog-type = 1
			set ordlog-old-info = stock-code
			if i50entry-sol-ordered-qty = sol-ordered-qty
				set ordlog-new-info = fstr(sol-ordered-qty,8,4)
			else
				set ordlog-new-info = SPACES
			endif
			set ordlog-old-value = i50entry-sol-item-price
			set ordlog-new-value = sol-item-price
			set ordlog-change-value = sol-shipped-amount - ws-sol-shipped-amount
			set ordlog-ordered-change-value = sol-line-amount
				- i50entry-sol-line-amount
			set ordlog-item-wholesale-price = sol-item-wholesale-price
			set ordlog-line-type =  sol-line-type
			set ordlog-disc-rate = sol-disc-rate
			set ordlog-ordered-tax-chg-value = sol-ordered-sales-tax-amt
				- ws-sol-ordered-sales-tax-amt
			do a9000-write-audit-file
		endif
		if i50entry-sol-ordered-qty != sol-ordered-qty
			set ordlog-type = 5
			set ordlog-old-info = stock-code
			set ordlog-new-info = fstr(sol-item-price,11,4)
			set ordlog-old-value = i50entry-sol-ordered-qty
			set ordlog-new-value = sol-ordered-qty
			set ordlog-change-value = sol-shipped-amount - ws-sol-shipped-amount
			set ordlog-ordered-change-value = sol-line-amount
				- i50entry-sol-line-amount
			set ordlog-line-type =  sol-line-type
			set ordlog-disc-rate = sol-disc-rate
			set ordlog-ordered-tax-chg-value = sol-ordered-sales-tax-amt
				- ws-sol-ordered-sales-tax-amt
			do a9000-write-audit-file
		endif
		if ws-old-item-wholesale-price <> sol-item-wholesale-price
			set ordlog-type = 30
			set ordlog-old-info = stock-code
			set ordlog-new-info = fstr(sol-item-price,11,4)
			set ordlog-old-value = ws-old-item-wholesale-price
			set ordlog-new-value = sol-item-wholesale-price
			set ordlog-change-value = sol-shipped-amount - ws-sol-shipped-amount
			set ordlog-ordered-change-value =
				sol-line-amount - i50entry-sol-line-amount
			set ordlog-line-type =  sol-line-type
			set ordlog-disc-rate = sol-disc-rate
			do a9000-write-audit-file
		endif
	elseif screenmode() in {entry md-detail-entry }
	and (ws-process-mode = EDIT or
		(ws-process-mode = ENTRY and
			ws-order-flag = CUSTOMER))
	and sol-line-type <> 'KN'
		set ordlog-type = 10
		if sol-line-type = 'SC'
			if str-len(sol-line-description) > 15
				set ordlog-old-info
					= substring(sol-line-description,1,15)
				set ordlog-new-info
					= substring(sol-line-description,16,30)
			else
				set ordlog-old-info = sol-line-description
				set ordlog-new-info = SPACES
			endif
		else
			set ordlog-old-info = stock-code
			set ordlog-new-info = SPACES
		endif
		set ordlog-old-value = sol-ordered-qty
		set ordlog-new-value = sol-item-price
		set ordlog-change-value = sol-shipped-amount
		set ordlog-ordered-change-value = sol-line-amount
		set ordlog-line-type =  sol-line-type
		set ordlog-item-wholesale-price = sol-item-wholesale-price
		set ordlog-disc-rate = sol-disc-rate
		set ordlog-ordered-tax-chg-value = sol-ordered-sales-tax-amt
		do a9000-write-audit-file
	endif
	if screenmode() in { entry, correct, md-price, md-detail-entry }
		set sol-date-stamp = today()
		set sol-time-stamp = tod()
		set ws-so-date-stamp-to-be-updated = YES
	endif
	if screenmode() in { entry correct md-detail-entry}
	and ((so-order-type-code != I5SO_TYPE_WARRANTY_CLAIM
	and so-order-source = '#' and sol-line-type <> "DN" )
	or (get-param(8) = '-glcodingused' and sol-line-type <> "DN"))
		if screenmode() = correct
			do remove-sales-order-gl-coding
		elseif screenmode() in {entry md-detail-entry}
		and ws-saved-gl-accountcode = SPACES
			set ws-saved-gl-accountcode = so-gl-accountcode
		endif
		get job-cost-commitments
			on index job-commitment-type job-order-no
					job-order-suffix
			key is 'S' so-order-no so-bo-suffix
		on error
			if ws-issue-to-account = SPACES
				do sales-order-gl-code same once
				if not ws-ok
					set lr-action = '1'
					exit
				endif
			else
				set so-gl-accountcode = ws-issue-to-account
			endif
		else
			get job-cost-master
				on index job-code
				key is get-param(5)
			on error
				set lf-job-parameter = FALSE
			else
				if job-code > SPACES	//There could be a blank job
					set lf-job-parameter = TRUE
				endif
			endon
			if ws-saved-gl-accountcode = SPACES
			and lf-job-parameter
				set so-gl-accountcode = strconcat(get-param(5),'.',get-param(6))
				set ws-saved-gl-accountcode = so-gl-accountcode
			elseif ws-saved-gl-accountcode <> SPACES
				set so-gl-accountcode = ws-saved-gl-accountcode
			endif
			I8VALIDGL_VALIDATE_GL_POST(so-gl-accountcode
				,'Y',job-code,so-gl-cost-centre,ws-error,ws-ok)
			if ws-ok
				// enforce gl masking
				get gl-master
					on index gl-accountcode
					key is gl-accountcode
				on error ENOREC
					message "GL Account not valid: " gl-accountcode
					set lr-action = '1'
					exit
				endon
				do clibglsec-check-account-access
					parameter
						gl-master.*
					returning
						lf-account-ok
				if not lf-account-ok
					message concat("You don't have access to this account " gl-accountcode)
					set lr-action = '1'
					exit
				endif
			endif
			// Suppress the prompting of gl coding if a valid one
			// has already been entered in the header
			if ws-ok
			and screenmode() in {entry correct md-detail-entry}
			and (lf-job-parameter and job-cost-category != SPACES)
				if job-cbs-section-code != SPACES
					set so-gl-cbs-section-code = job-cbs-section-code
				endif
				do insert-sales-order-gl-coding
			else
				do sales-order-gl-code same once
				if not ws-ok
					set lr-action = '1'
					exit
				endif
			endif
		endon
	elseif screenmode() = remove
		do check-sales-order-line-packages
		if not ws-allow-removal
			set lr-action = '1'
			exit
		endif
	endif
	if sol-line-type = 'KN'
		if screenmode() = remove
			//this will remove the kit and its components
			do remove-sales-order-line-retail-promo
			do i50lines-call-kitentry parameters "remove"
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			do display-totals
			set i5soldisc-general-disc-rate = 0
			set i50entry-disc-amt = 0
			set lr-action = '1'
			do check-overide-line-program same
			exit
		elseif screenmode() in {correct md-price}
			set ws-saved-stock-code = stock-code
			do i50lines-call-kitentry parameters "kitchg"
			set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
			do b300-calc-total-amounts-update-header
			set i5soldisc-general-disc-rate = 0
			do display-totals
			set lr-action = '2'
			do check-overide-line-program same
			exit
		endif
	endif
endprocedure // before-confirm-of-a300-lines  ----------------------------------

screen get-line-delivery-address
	window @12,30 to @24,80
		title is "Delivery Address"
	primary name-and-address-master
		same accountcode
		when na-type = "DA" or na-type between "00" and "99"
	allow i81modes-md-select search
before
	box @12,30 to @23,80
		title "Delivery Address"
	position name-and-address-master
		on index accountcode na-type
		key is so-cust-code "00"
detail
	accept na-type @13,45
		title "Type:"
		help "Enter the delivery site number"
		upper_case
	validation
		if na-type = 'DA'
		or na-type between '00' and '99'
			//we have selected a delivery address
		else
			message 'You must select a delivery address, type of DA or 00 to 99'
			reenter
		endif
	endvalidation
	display na-name @15,45
		title 'Name:'
	display na-company @16,45
		title 'Address:'
	display na-street @17,45
	display na-suburb @18,45
	display na-country @19,45
	display na-address-6 @20,45
	display na-address-7 @21,45
	display postcode @22,45
		title "Postcode:"
	confirm auto
	confirmed
		if screenmode() = i81modes-md-select
			if na-type = 'DA'
			or na-type between '00' and '99'
			//we have selected a delivery address so get outa here
				exit
			else
				message 'You must select a delivery address, type of DA or 00 to 99'
			endif
		endif
	endconfirm
after
	get name-and-address-master
		key is so-cust-code '00'
	on error
		set na-type = 'DA'
		message 'No delivery address selected, try to use type "DA"'
	else
		message 'No delivery address selected, try to use type "00"'
	endon
endscreen //get-line-delivery-address-----------------------------------------

screen ask-for-trade-discount
local field
	lf-confirm					pic x
	//
	window @20,31 to @23,80
		title is "Ask For Trade Discount"
		no-ok-cancel
before
	box @20,32 to @23,79
		title 'Trade Discount'
	display 'Trade discount for entire order : ' @21,33
	display "OK To Continue : " @22,50
detail
	set i5soldisc-trade-disc = i5soldisc-cgd-cust-rate
	accept i5soldisc-trade-disc @21,67 pic z9.999%
		help 'Please enter the trade discount for entire order or hit [ENTER]'
		default i5soldisc-cgd-cust-rate
	accept lf-confirm @22,67
		allow YES NO
		default YES
		uppercase
	confirm auto
	confirmed
		if lf-confirm = YES
			if i5soldisc-trade-disc = 0
				set i5soldisc-cgd-cust-code-flag = TRUE
				set i5soldisc-cgd-cust-rate = 0
			endif
		else
			reenter optional
		endif
	endconfirm
endscreen //ask-for-trade-discount ---------------------------------------------

procedure mult-disc-exchange-items
	if sys-cgd-flg in { 'M' 'L' }		// if multiple discount used
	and sol-disc-rate != 0				// and we actual have a discount
	and sol-line-type = 'SN'			// only for normal items
		if screenmode() in { entry, md-detail-entry }
			save sales-order-line
			//add note line
			initialise sales-order-line
				leaving so-order-no so-bo-suffix
					sol-line-seq stock-code
			set sol-line-type = 'DN'
			set sol-line-seq += .1
			//assume cust-group-disc record still current
			set sol-line-description = concat('(Discount) ',
				fstr(cgd-disc-value,3,3),'% ',
				fstr(cgd-disc-value2,3,3),'% ',
				fstr(cgd-disc-value3,3,3),'% '
				fstr(cgd-disc-value4,3,3),'%')
			insert sales-order-line
			on error
				message "Note line with the four discounts not inserted, enter manually"
			endon
			//done to display the stock line not the
			//note line
			restore sales-order-line
		elseif screenmode() = remove
			select *
				from sales-order-line
				where so-order-no = :so-order-no
				and so-bo-suffix = :so-bo-suffix
				and sol-line-seq >= :sol-line-seq
				and sol-line-seq < (:sol-line-seq + 1)
			for-update
			detail
				if sol-line-type = 'DN'
				and substring(sol-line-description,1,10) = '(Discount)'
					delete sales-order-line
					do i50lines-delete-sales-order-line-notes
				endif
			endselect
		endif
	endif
	//
	if screenmode() = entry
	and sol-line-type = 'SN'
	and i50lines-special-status = 'E'//This is an exchanged item code
		//create a charge line of 9
		set ws-line-seq += 1
		save sales-order-line
		initialise sales-order-line
			leaving so-order-no so-bo-suffix stock-code
				sol-ordered-qty	// allow for more than one
		set sol-line-seq = ws-line-seq
		set sol-line-type = 'SC'
		set sol-chg-type = '9'
		set sol-line-description = concat('Deposit for "',stock-code,'"')
		set stock-code = 'Charges'
		set sol-shipped-qty = sol-ordered-qty
		set sol-item-price = prc-airfreight-price
		//
		I5LINECALC_SO_LINE_CALC(so-price-code,
			SPACES,
			sol-item-price,
			sol-ordered-qty,
			sol-stk-unit-desc,
			sol-price-uom,
			sol-disc-rate,
			SPACES,
			sol-item-wholesale-price,
			//returning
			sol-line-amount,
			sol-ordered-disc-amt,		//don't need this
			sol-ordered-sales-tax-amt)
		//
		I5LINECALC_SO_LINE_CALC(so-price-code,
			SPACES,
			sol-item-price,
			sol-shipped-qty,
			sol-stk-unit-desc,
			sol-price-uom,
			sol-disc-rate,
			SPACES,
			sol-item-wholesale-price,
			//returning
			sol-shipped-amount,
			sol-shipped-discount-amt,		//don't need this
			sol-shipped-sales-tax-amt)

		set so-date-stamp = today()
		set so-time-stamp = tod()
		set sol-update-whse = 'E'	// indicate exchange item
		insert sales-order-line
		on error
			message "Can't insert charges deposit amount of " fstr(sol-shipped-amount,16,2)
			pause
		endon
		set ws-line-seq += 1
		set i50lines-special-status = SPACES
		do b300-calc-total-amounts-update-header
		do display-totals
			//regain currency on the original line
		restore sales-order-line
	endif
endprocedure //mult-disc-exchange-items ----------------------------------------

procedure correct-job-lines
	// "J" Lines sys-job-used-flag = "1"
	set job-code = substring(sol-line-description,10,strlen(sol-line-description))
	get job-cost-master
		on index job-code
		key is job-code
	on error
		message "Project not valid " job-code
		exit
	else
		if jcm-status not in {IJOBSTATII_IN_PROGRESS_STATII }
			message "Project must be in progress, can't update " job-code
			exit
		else
			if job-type != "N"
				message "Project must be normal type, can't update " job-code
				exit
			else
				set sol-line-cost = 0
				set sol-item-cost = 0
				set sol-item-price = 0
				set sol-line-amount = 0
				extract job-cost-centre-budget-actual
					on index job-code job-cost-centre
					key is job-code SPACES
					next same job-code
				detail
					set ws-job-line-amt = 0
					set ws-cost-type = SPACES
					IJCATTYPE_CATEGORY_TYPE(job-cost-centre,ws-cost-type)
					if substring(sys-account-type,1,1) not in {"I" "A" "T"}
						if job-budget-margin-percent = 0
							set job-budget-margin-percent =
								jcm-budget-indirect-percent
						endif
						set ws-job-line-amt =
								job-actual-amount + ((job-actual-amount *
									job-budget-margin-percent) / 100)
						set sol-line-amount += ws-job-line-amt
						set sol-line-cost += job-actual-amount
					endif
				endextract
				set sol-item-price = sol-line-amount
									/ sol-ordered-qty
				set sol-price-rule = SPACES
				set sol-item-cost = sol-line-cost / sol-ordered-qty
				//XXXXXXXXXXXX is ws-save-amount needed
				set ws-save-amount = sol-line-amount
				set i50entry-qty = sol-ordered-qty
				set ws-line-seq = sol-line-seq
				save sales-order-line
				get like-sales-order-line
					lock
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix (ws-line-seq + .1)
				on error
				else
					delete like-sales-order-line
				endon
				restore sales-order-line
				set ws-disc-rate = 0
				set i5pricemod-item-price = sol-item-price
				do i50entry-do-line-calc
				set sol-line-amount = i50entry-line-amt
				set sol-item-wholesale-price = i5linecalc-wholesale-price
				set sol-ordered-sales-tax-amt = i50entry-stax-amt
				save sales-order-line
				if ws-save-amount != i50entry-line-amt
					do check-special-stk-item
				endif
				restore sales-order-line
			endif
		endif
	endon
endprocedure //job-lines-correct -----------------------------------------------

procedure check-special-stk-item
	local	lf-error-found					type boolean
			lf-error-message				type varchar pic x(255)
			lf-success-message				type varchar pic x(255)
	//
	get stock-master
		on index stock-code
		key is DISC_STK_CODE
	on error
		initialise stock-master
		set stock-code = DISC_STK_CODE
		set stk-description = 'Stock rounding for order disc.'
		set stk-stock-status = 'Z'
		//
		do clibnewmast-create-new-stock-master
			parameter	stock-master.*
			returning	lf-error-found
						lf-error-message
						lf-success-message
						stock-master.*
		//
		if lf-error-found
			abort lf-error-message
		endif
		//
	endon
	do i4getprice-get-stock-price-record
		parameter stock-code so-whse-code so-cust-type
		returning ws-found-stk-price
					prc-region-code
	if not ws-found-stk-price
		initialise stock-price leaving
			stock-code prc-region-code
		insert stock-price
	endif
	initialise sales-order-line
		leaving so-order-no so-bo-suffix stock-code
	set sol-line-seq = ws-line-seq + .1
	set sol-line-type = 'SN'
	set sol-print-line = YES
	set sol-price-uom = 1
	if (ws-save-amount - i50entry-line-amt) < 0
		set sol-ordered-qty = -1
	else
		set sol-ordered-qty = 1
	endif
	//note: item prices must be positive
	set sol-item-price = abs(ws-save-amount - i50entry-line-amt)
	//
	set i50entry-qty = sol-ordered-qty
	set ws-disc-rate = 0
	set i5pricemod-item-price = sol-item-price
	do i50entry-do-line-calc
	set sol-line-amount = i50entry-line-amt
	set sol-item-wholesale-price = i5linecalc-wholesale-price
	set sol-ordered-sales-tax-amt = i50entry-stax-amt
	//
	set sol-date-stamp = today()
	set sol-time-stamp = tod()
	insert sales-order-line
endprocedure //check-special-stk-item -----------------------------------------

menu other-options
	local field
		lf-user-option					pic x(20)
		lf-user-option-program 			pic x(30)
		lf-ok							type boolean
		lf-tax-exemption-changed		pic x
		lf-attributes-exist				type boolean
	//
	window @1,56 to @27,79
before
	set ws-saved-order-no = so-order-no
	set ws-saved-bo-suffix = so-bo-suffix
	set ws-other-option-selected = SPACES
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PR' 'SOLXTRAP'
	on error
	else
		set lf-user-option-program = sys-description
	endon
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PR' 'SOLXTRAN'
	on error
	else
		set lf-user-option = sys-description
	endon
	//
	get stock-attributes
		on index stock-code sa-attribute-id sa-seq
		key stock-code
	on error ENOREC
		set lf-attributes-exist = FALSE
	else
		set lf-attributes-exist = TRUE
	endon
detail
	option "A - Audit Trail" @2,58
		help 'Enquire on audit trail for this sales order'
		spl 'so/m5audrep' parameters are '-audenq'
				'-ordno' str(so-order-no) so-bo-suffix
		exit
	option "B - Price Override" @3,58
		help "Allow supervisor to override price and/or discount"
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		get sales-order-line lock
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix sol-line-seq
		on error
			message 'You are not current on a line'
		else
			if sol-line-type in { 'KN' }
			or sol-chg-type in {"D" "T"}
				message 'This option is not available for kit items, use Kit mode'
				pause
			elseif sol-line-type in {'DN' 'SC'} //Notes and charges
				message 'This option is not available for the selected line'
			elseif so-order-source = 'C'
				message-box 'This option is not available for recharge order'
					title "Price Override Not Allowed"
					icon is MSG_BOX_STOP
					message-buttons MSG_BOX_OK
					tag 10
			elseif so-order-status in { I5SO_TRANSFER_RDY_TO_UPDATE
				I5SO_RDY_TO_UPDATE I5SO_CNOTE_RDY_TO_UPDATE
				I5SO_CONSIGNMENT_RDY_TO_UPDATE }
			and get-param(3) = '-de'	// From sales order edit, but only for enquiry.
				message-box 'Sales order status does not allow price override'
					title "Price Override Not Allowed"
					icon is MSG_BOX_STOP
					message-buttons MSG_BOX_OK
					tag 20
			else
				do i50lines-override-price-for-current-line entry once
			endif
		endon
		exit
	option "C - Checklist" @4,58
		help "Allow maintenance of installation check list"
		spl 'so/m50extra'
			parameters are str(so-order-no) so-bo-suffix '-install'
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	option 'D - Customer Notes' @5,58
		help 'Maintain and enquiry on Customer notes'
		spl 'so/m50extra'
			parameters are str(so-order-no) so-bo-suffix '-cn'
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	option "E - Exempt Tax No." @6,58
		help "Change the tax exemption number and recalculate lines"
		when so-order-status < I5SO_RDY_TO_PRINT_INVOICE
			or so-order-status in { I5SO_CONSIGNMENT_RDY_TO_PRINT
									I5SO_CNOTE_RDY_TO_PRINT }
		spl "so/m50taxdetails"
			parameters
				"-sote-maint"
				so-order-no
				so-bo-suffix
			returning
				lf-tax-exemption-changed
		if lf-tax-exemption-changed = YES
			do clibtaxso-recalculate-sales-order-tax
				parameters
					so-order-no
					so-bo-suffix
		endif
		exit
	option "F - Line Breakdown" @7,58
		help "Show a breakdown of the sales order line"
		when sol-line-type in {'SN' 'WN'}
		get sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq

		on error
			message 'You are not current on a line'
		else
			spl 'so/m50extra'
				parameters are str(so-order-no) so-bo-suffix
				sol-line-seq "-linebreak"
		endon
		exit
	option "G - Get Customer" @8,58
		help "Get new customer for this order"
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		if so-order-source in {I5SOURCE_POS_LANE_ORDER I5SOURCE_INTERNAL_POS}
			do get-cash-customer once
			set ws-other-option-selected = 'G'
		else
			message "Get customer option only available for POS"
		endif
		exit
	option "H - Shortages" @9,58
		help "Show shortages for critical items - drill down to components"
		spl "so/m50extra" parameters "-shortage" str(so-order-no) so-bo-suffix
			leave-files-open
		exit
	option "I - Trade-in" @10,58
		help "Allow maintenance of trade in details"
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		spl 'so/m50extra'
			parameters are str(so-order-no) so-bo-suffix '-tradein'
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	option "L - Link to PO" @11,58
		help "Show sales order lines that link to purchase orders"
		if so-order-status in I5SOSTATII_SO_FINISHED_ORDERS
			spl 'po/m6salespo' parameters are "-solpdetail"
				str(so-order-no)
				so-bo-suffix
				fstr(sol-line-seq,4,1)
				'enq'
		else
			spl 'po/m6salespo' parameters are "-solpdetail"
				str(so-order-no)
				so-bo-suffix
				fstr(sol-line-seq,4,1)
		endif
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
  	option "M - Manufacture Dtls" @12,58
  		help "Maintain manufacturing/packing details if any"
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		//
		do public-allow-manuf-packing-maintenance
			parameter
				sales-order.*
				sol-line-seq
		exit
	option "N - Note Print Flag" @13,58
		help "Maintain the flag which determines how a line prints on the invoice"
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		and sol-print-line != 'J'
		do maintain-print-flag
		exit
	option "N - Project Qty" @13,58
		help "Maintain the project line quantity"
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		and sol-print-line = 'J'
		do correct-j-line
		exit
	option "O - Orders by Cust" @14,58
		help "Sales order Enquiry by customer"
		spl 'so/m5ordenq' parameters are '-cust' so-cust-code
		exit
	option "P - Pick Locations" @15,58
		help "Show all sales order picking location records for this order"
		do i5enqloc-enq-on-sales-picking-loc
			parameters so-order-no so-bo-suffix
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	option 'S - SO Notes' @16,58
		help 'Maintain and enquiry on sales order notes'
		do i5snotes-maint-sales-order-notes
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	option "T - Toggle" @17,58
		help 'Toggle show costs or do not show costs'
		when i8costsecu-cost-security-ok
			if i50entry-show-costs = YES
				if sys-show-costs-at-order-entry = 'B'
					set i50entry-show-costs = 'B'
				else
					set i50entry-show-costs = NO
				endif
				set ws-item-costs-prompt = SPACES
				set ws-ordered-costs-prompt = SPACES
				set ws-shipped-costs-prompt = SPACES
				set ws-gp-prompt = SPACES
				message 'Disabling entry and showing of costs'
				pause
			else
				set ws-item-costs-prompt = 'Item Cost:'
				set ws-ordered-costs-prompt = 'Order Cost:'
				set ws-shipped-costs-prompt = 'Ship Cost:'
				set ws-gp-prompt = 'Order GP%:'
				set i50entry-show-costs = YES
				message 'Allowing entry and showing of costs'
				pause
			endif
			exit
	option "U - Qty of Alt. UOM" @18,58
		help "Correct the Qty of the alternative Unit (if UOM conversion = 0)"
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		get sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
		on error
			message 'You are not current on a line'
		else
			set lf-ok = FALSE
			extract stock-unit-conversion
				on index stock-code suc-unit-desc suc-trade-unit-no
				key is stock-code sol-stk-unit-desc SPACES
				next same stock-code suc-unit-desc
			detail
				set lf-ok = TRUE
				break
			endextract
			if lf-ok = FALSE
				message-box param-text("Stock conversion not valid <<P1>> <<P2>>",stock-code,sol-stk-unit-desc)
					title "Stock Conversion Invalid"
					icon is MSG_BOX_STOP
					message-buttons MSG_BOX_OK
					tag 1418
				exit
			else
				if suc-unit-conversion = 0
					do i50lines-save-the-order-line-values
					do correct-alt-unit-qty
				else
					message "Option not valid for this sales order line "
					exit
				endif
			endif
		endon
		exit
//	option "V - Available To Promise (ATP)" @19,58
//		help "Drill into Available To Promise (ATP) calculation"
//		when ((stock-code != SPACES) and
//			  ((so-whse-code != SPACES) or (sol-whse-code != SPACES)) and
//			  (uppercase(sol-line-type) = "SN"))
//		//
//		get sales-order
//			on index so-order-no so-bo-suffix
//			key is so-order-no so-bo-suffix
//		on error
//			message "You are not current on a line."
//		else
//			get sales-order-line
//				on index so-order-no so-bo-suffix sol-line-seq
//				key is so-order-no so-bo-suffix sol-line-seq
//			on error
//				message "You are not current on a line."
//			else
//				do m50lines-drill-into-atp-calc
//			endon
//		endon
//		//
//		exit
	option "W - Other Warehouse " @20,58
		help "Get the stock from another whse when Order being entered, or status set to b/o, f/o or rdy-for-picking"
		when so-order-type-code != I5SO_TYPE_DIRECT_SHIP
			and so-order-status in { I5SO_FORWARD_ORDER
									 I5SO_RDY_FOR_PICKING
									 I5SO_BACK_ORDER
									 I5SO_BEING_ENTERED
									 I5SO_ENTERED_ON_HOLD
									 I5SO_TRANSFER_ENTERED
									 I5SO_TRANSFER_HOLD_FOR_APPROVAL
									 I5SO_TRANSFER_ON_BACKORDER
									 I5SO_TRANSFER_TO_BE_PURCHASED
									 I5SO_TRANSFER_TO_BE_MANUFACTURED
									 I5SO_RDY_TO_PICK_TRANSFER }
		do m50lines-get-from-other-whse
		exit
	option "X - Expected Line Delivery Date" @21,58
		help 'Expected Delivery Date for this Line'
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		and so-order-type-code != I5SO_TYPE_DIRECT_SHIP
		get sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
		on error
			message 'You are not current on a line'
		else
			do update-delivery-date
		endon
		exit
	option "Y - Proforma" @22,58
		help 'Select lines from proforma order to add to this order'
		when so-order-status not in I5SOSTATII_SO_FINISHED_ORDERS
		set i5linecalc-dont-zero-disc = TRUE
		do setup-select-of-proforma-lines
		exit
	option "1 - Style Colour Size" @23,58
		help "Access Style Colour Size grid"
		when sys-default-stock-maint-mode = "O"
			and BMSDEF_STYLE_SIZE != ZERO
		do scs-grid
		exit
	option "2 - Item Attributes" @24,58
		when lf-attributes-exist
		help "View the attributes for this item"
		spl "stk/m4stkmaint" leave-files-open
			parameters
				"-item-attributes"
				stock-code
				"-from-sales-order"
		exit
	option "Z - Extra Options" @25,58
		icon folder-icon
		help "Access additional order lines options"
		do xtra-options
		exit
	option lf-user-option @26,58
		help 'Perform user program as defined by SOLXTRAP Program Override'
		when lf-user-option <> SPACES
		or lf-user-option-program <> SPACES
		spl lf-user-option-program parameters are '-solxmenu' str(so-order-no)
			so-bo-suffix sol-line-seq
		on error
			message 'Cannot access program ' lf-user-option-program pause
		endon
		exit
	confirm auto
	confirmed
	endconfirm
endmenu //other-options --------------------------------------------------------

procedure scs-grid
	push stock-master
	get stock-master
		on index stock-code
		key is stock-code
	on error ENOREC EENDFILE
		message-box "Item code not found"
			message-buttons MSG_BOX_OK
			icon MSG_BOX_STOP
			tag 1419
		exit
	else
		if stk-issue-control-code != "U"
			message-box "Item is not a style colour size type"
				message-buttons MSG_BOX_OK
				icon MSG_BOX_STOP
				tag 1420
			exit
		endif
	endon
	pop stock-master
	spl 'so/m50lengths'
		parameters are str(so-order-no) so-bo-suffix
			so-cust-code ws-order-type
			stock-code stk-issue-control-code
			ws-transfer-order
			YES //lf-audit-line-addition
			'-so'
	on error
		exit
	endon
endprocedure //scs-grid -----------------------------------------------------

menu xtra-options
	local field lf-cus-option	pic x(20) occurs 3
		lf-cus-program			pic x(30) occurs 3
	//
	window @1,56 to @23,79
before
	set ws-saved-order-no = so-order-no
	set ws-saved-bo-suffix = so-bo-suffix
	do check-custom-menu-options
		returning lf-cus-option[*] lf-cus-program[*]
detail
	option "C - Commission Rate" @1,58
		help 'View commission rate for this line'
		when sys-ordered-or-shipped in {'1' '2'}
			and sol-line-type in {"SN" "SS" "WN"}
			and sol-chg-type not in {"D" "T"}
		spl 'so/m50reprate' parameters are '-correct' so-rep-code
			str(so-order-no) so-bo-suffix str(sol-line-seq)
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		exit
	option "H - Header Delivery Details" @2,58
		help 'Maintain Header Delivery Details'
		do public-update-header-fields correct once
			parameters so-order-no so-bo-suffix
		exit
	option "L - Link to WO" @3,58
		help "Show work order link to sales orders"
		if ws-process-mode = EDIT
			spl 'po/m6salespo' parameters are "-sowolink"
				str(so-order-no)
				so-bo-suffix
				fstr(sol-line-seq,4,1)
				'-edit'
		else
			spl 'po/m6salespo' parameters are "-sowolink"
				str(so-order-no)
				so-bo-suffix
				fstr(sol-line-seq,4,1)
		endif
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	option "O - Show Order Qty" @5,58
		help "Show original order qty"
		do show-original-order-qty md-show
		exit
	option "P - Price Trace" @6,58
		help 'Enquire on the current Customer Pricing for this line'
		when sol-line-type = 'SN'
		and sys-so-pricing-method in {'A' 'B'}
		do clibtrace-price-trace
				parameters sales-order-line.*
		exit
	option "Q - Supplier Quote" @7,58
		help 'Select supplier to fax for quotation '
		when sol-line-type in { 'SN' 'SS'}
		if ws-process-mode = EDIT
			spl 'so/m50supquot' parameters are '-supquote'
				str(so-order-no) so-bo-suffix str(sol-line-seq) 'N'
				'-edit'
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-saved-order-no ws-saved-bo-suffix
		else
			spl 'so/m50supquot' parameters are '-supquote'
				str(so-order-no) so-bo-suffix str(sol-line-seq) 'N'
				SPACES
		endif
		exit
	option "R - Review by Cust" @8,58
		help "Sales order review by customer"
		when (so-order-status = I5SO_BEING_ENTERED
		and ws-order-type in {'N' 'F' 'J' 'T' 'O' 'M'})
		or ((so-order-status < I5SO_PICKING_PRINTED
		or so-order-status = I5SO_BEING_PURCHASED)
		and so-order-type-code in {SPACES I5SO_TYPE_DIRECT_SHIP}
		and (so-order-status in I5SOSTATII_OUTSTANDING_CONSIGNMENT_STATII
		or so-order-status in I5SOSTATII_OUTSTANDING_TRANSFERS_STATII
		or so-order-status in
			   {I5SO_ENTERED I5SO_BACK_ORDER I5SO_FORWARD_ORDER
			   I5SO_RDY_FOR_PICKING I5SO_BACK_ORDER_RDY_FOR_PICKING
			   I5SO_BEING_PURCHASED I5SO_RDY_TO_BE_PURCHASED}))
		if ws-process-mode = EDIT
			spl 'so/m50review' parameters are
				str(so-order-no) so-bo-suffix ws-order-type '-edit'
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-saved-order-no ws-saved-bo-suffix
		else
			spl 'so/m50review' parameters are
				str(so-order-no) so-bo-suffix ws-order-type SPACES
		endif
		exit
	option "S - Short Ship Code" @9,58
		help "Allow maintenance of short shipment reason"
	  	get sales-order-line lock
		on error
			message 'Problem locking sales order line'
			pause
		else
			do ask-for-short-ship-reason entry once
			update sales-order-line lock
		endon
		exit
	option "Z - Zero Price Reason" @10,58
		help "Edit Promotional reason why stock was sold at zero price"
		when sol-line-type in {'SN' 'SS'}
		if sol-item-price = 0
			get sales-order-line-notes lock
				on index so-order-no so-bo-suffix sol-line-seq soln-type
				soln-seq-no
				key is so-order-no so-bo-suffix sol-line-seq "~Z" 0
			on error
				message "Option not available.  You don't use this feature."
			else
				do i50lines-enter-zero-price-reason correct
				exit
			endon
		else
			message "Only available if price is 0."
		endif
		exit
	option "2 - Promotion Details" @11,58
		help "Enquire on sales order line promotion details."
		if ws-process-mode = EDIT
			spl 'so/m4solpromo'
				parameters
					'-solpromo-order'
					str(so-order-no)
					so-bo-suffix
					'-edit'
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-saved-order-no ws-saved-bo-suffix
		else
			spl 'so/m4solpromo'
				parameters
					'-solpromo-order'
					str(so-order-no)
					so-bo-suffix
		endif
		exit
	option lf-cus-option[1] @19,58
		help "Perform user program as defined by SOLCUS1-MN Program Override"
		when lf-cus-option[1] != SPACES
		and lf-cus-program[1] != SPACES
		spl lf-cus-program[1] parameters are "-solcus1" str(so-order-no)
			so-bo-suffix str(sol-line-seq)
		on error
			message "Can't access program " lf-cus-program[1] pause
		endon
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	option lf-cus-option[2] @20,58
		help "Perform user program as defined by SOLCUS2-MN Program Override"
		when lf-cus-option[2] != SPACES
		and lf-cus-program[2] != SPACES
		spl lf-cus-program[2] parameters are "-solcus2" str(so-order-no)
			so-bo-suffix str(sol-line-seq)
		on error
			message "Can't access program " lf-cus-program[2] pause
		endon
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	option lf-cus-option[3] @21,58
		help "Perform user program as defined by SOLCUS3-MN Program Override"
		when lf-cus-option[3] != SPACES
		and lf-cus-program[3] != SPACES
		spl lf-cus-program[3] parameters are "-solcus3" str(so-order-no)
			so-bo-suffix str(sol-line-seq)
		on error
			message "Can't access program " lf-cus-program[3] pause
		endon
		get sales-order lock
			on index so-order-no so-bo-suffix
			key is ws-saved-order-no ws-saved-bo-suffix
		on error
		endon
		get sales-order-line lock
		on error
		endon
		exit
	confirm auto
	confirmed
	endconfirm
endmenu //xtra-options ---------------------------------------------------------

screen maintain-print-flag
	window @21,25 to @23,80
		title is "Print Flag Maintenance"
	allowed correct
before
	display "Print Flag :" @22,28
	display "Apply to all Normal Lines :" @22,45
	get sales-order-line lock
		on index so-order-no so-bo-suffix sol-line-seq
	on error
		message 'You are not current on a line'
		exit
	endon
detail
	accept sol-print-line @22,41
		help 'Enter the value required for the print flag'
		default sol-print-line
		allowed 'A' 'B' 'C' 'D' 'E' 'F' 'H' 'J' 'K' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'V' 'Y'
	validations
		if sol-print-line = 'H'
			set sol-print-line = 'N'
		endif
		if sol-print-line = 'K'
			if sol-line-type != 'SN'
				message 'Flag allowed for stock lines only '
				reenter
			elseif sol-shipped-qty != ZERO
				message 'Flag not allowed for shipped lines'
				reenter
			elseif so-order-status != I5SO_BEING_ENTERED
				message 'This flag option only available at order entry'
				reenter
			elseif sys-raise-po-from-so in { '0' '1' }
				message 'This flag option not available for raise po setting '
				reenter
			endif
		endif
	endvalidations
	accept ws-apply-to-all-normal @22,73
		allow YES NO
		default NO
		help "Apply the same print flag across all normal lines"
		uppercase
		show-value
		when sol-print-line != 'K'
	confirm auto
	confirmed
		update sales-order-line
		if ws-apply-to-all-normal = YES
		and sol-print-line != 'K'
			save sales-order-line
			set ws-print-flag = sol-print-line
			extract sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix 0
				next same so-order-no so-bo-suffix
				where sol-line-type in { 'SN' 'KN' 'WN' }
			detail
				get sales-order-line current lock
				set sol-print-line = ws-print-flag
				update sales-order-line
			endextract
			restore sales-order-line
			get sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix sol-line-seq
			on error
			endon
		endif
	endconfirm
after
	unlock sales-order-line
endscreen //maintain-print-flag ----------------------------------------------

procedure correct-j-line
local field
	lf-confirm						pic x
	//
	window @17,40 to @23,80
		title is 'Correct Project Line'
	get sales-order-line lock
		on index so-order-no so-bo-suffix sol-line-seq
	on error
		message 'You are not current on a line'
		exit
	endon
	save sales-order-line
	display "  Description :" @18,44 background
	display sol-line-description @18,60 pic x(30)
	display 'Project Value :' @19,44 background
	display sol-line-amount @19,60
	display 'Quantity      :' @20,44 background
	accept sol-ordered-qty @20,60
		help 'Enter the quantity for this line - No effect on Line total'
		default sol-ordered-qty
		show-value
	validation
		if sol-ordered-qty < 1
			message "Quantity can't be less than one"
			reenter optional
		endif
	endvalidation
	display "OK To Continue :" @22,44 background
	accept lf-confirm @22,60
		allow YES NO
		default YES
		uppercase
	confirm auto
	confirmed
		if lf-confirm = YES
			// XXXXXXXXXXXXXXX check if required?
			set i50entry-line-amt = sol-line-amount
			set i50entry-qty = sol-ordered-qty
			set ws-line-seq = sol-line-seq
			get like-sales-order-line
				lock
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix (ws-line-seq + .1)
			on error
			else
				set i50entry-line-amt += sol-line-amount
				delete like-sales-order-line
			endon
			set ws-save-amount = i50entry-line-amt
			restore sales-order-line
			set sol-ordered-qty = i50entry-qty
			set sol-item-price = i50entry-line-amt / sol-ordered-qty
			set sol-price-rule = SPACES
			set sol-item-cost = sol-line-cost / sol-ordered-qty
			set ws-disc-rate = 0
			set i5pricemod-item-price = sol-item-price
			do i50entry-do-line-calc
			set sol-line-amount = i50entry-line-amt
			set sol-item-wholesale-price = i5linecalc-wholesale-price
			set sol-ordered-sales-tax-amt = i50entry-stax-amt
			update sales-order-line
			if ws-save-amount != i50entry-line-amt
				do check-special-stk-item
			endif
		else
			restore sales-order-line
		endif
	endconfirm
endprocedure //correct-j-line --------------------------------------------

screen get-cash-customer
	local field	lf-reprice-order		pic x
		lf-need-line-recalc				type boolean
		lf-need-tax-recalc				type boolean
		lf-pin-required					pic x
		lf-save-seq						like sol-line-seq
		lf-save-accountcode				like accountcode
		lf-save-status					like so-order-status
		lf-cust-prog-executed			type boolean
		lf-credit-limit-available-amount	like so-order-total-amount
	//
	window @18,38 to @23,80
		title is "Cash Customer"
		no-ok-cancel
	allowed entry
before
	display "Customer :" @19,39 background
	display "    Name :" @20,39 background
	display "Re-Price :" @22,39 background
	set lf-save-accountcode = accountcode
	if sys-point-of-sale-mode-used = '5'
		set wspos5continue = TRUE
		I8OPTFLD_GET_POS5REFUND(wspos5-refund-password)
		do pos5-customer-menu
		if not wspos5continue
			exit
		endif
	endif
	save deb-master
	save sales-order
	set lf-save-seq = sol-line-seq
detail
	set lf-pin-required = NO
	if get-param(1) = '-cash'
		set ws-help-extension = '(F to resume)'
	else
		set ws-help-extension = SPACES
	endif
	accept so-cust-code @19,50
		help concat(translate 'Enter the customer for this sales order [HELP] ' ws-help-extension)
		default so-cust-code
		uppercase
	on up-arrow
		get deb-master previous
		on error
			message 'At start of file'
		endon
		set so-cust-code = accountcode
		display shortname @20,50
		reenter optional
	endon
	on down-arrow
		get deb-master next
		on error
			message 'At end of file'
		endon
		set so-cust-code = accountcode
		display shortname @20,50
		reenter optional
	endon
	on help-key
		spl "so/m50extra" parameters are '-enqdeb'
			returning ws-returned-accountcode
			leave-files-open
		on error
		endon
		set accountcode = ws-returned-accountcode
		if accountcode > SPACES
			set so-cust-code = accountcode
		endif
		display shortname @20,50
		reenter optional
	endon
	validation
		set dpn-pin-number = SPACES
		if so-cust-code = SPACES
			message 'Please enter an account '
			reenter
		elseif so-cust-code = 'F'
		and ws-total-ordered-incl-charges = 0
		and get-param(1) = '-cash'
			set ws-found-suspended-order = FALSE
			extract sales-order
				on index so-order-status so-order-priority so-delivery-date
					so-order-no so-bo-suffix
				key is I5SO_ORDER_SUSPENDED 0 0 0 SPACES
				next same so-order-status
			detail
				if ws-found-suspended-order
					do select-suspended-order
					break
				else
					set ws-found-suspended-order = TRUE
					set ws-saved-order-no = so-order-no
					set ws-saved-bo-suffix = so-bo-suffix
				endif
			endextract
			if ws-found-suspended-order
				get sales-order
					on index so-order-no so-bo-suffix
					key is ws-saved-order-no ws-saved-bo-suffix
				set lf-save-status = so-order-status
				do i5chgstat-update-so-order-status
					parameters
						so-order-no
					   	so-bo-suffix
					   	I5SO_BEING_ENTERED
					   	lf-save-status
						TRUE
					returning
						ws-result-code
				do get-the-suspended-order-type
				set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
				do b300-calc-total-amounts-update-header
				get sales-order lock
				exit
			else
				message 'No suspended orders found or selected'
				get sales-order lock
					on index so-order-no so-bo-suffix
					key is ws-saved-order-no ws-saved-bo-suffix
				reenter optional
			endif
		elseif so-cust-code = 'F'
		and get-param(1) = '-cash'
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is so-order-no so-bo-suffix
			message "There are lines on this order, can't resume a suspended order"
			reenter
		endif
		set ws-len = pattern(so-cust-code,'!')
		if ws-len != 0
			set ws-saved-code = so-cust-code
			set ws-len += 1
			set so-misc-code =
					substring(so-cust-code,ws-len,(strlen(so-cust-code)))
			set ws-len -= 2
			set so-cust-code = substring(so-cust-code,1,ws-len)
			get deb-pin-numbers
				on index dpn-accountcode dpn-user-code
				key is so-cust-code so-misc-code
			on error
				set so-misc-code = SPACES
				set so-cust-code = ws-saved-code
				message 'Account and user not on File'
				reenter optional
			endon
		else
			set so-misc-code = SPACES
			set lf-pin-required = no
			extract deb-pin-numbers
				on index dpn-accountcode dpn-user-code
				key is so-cust-code SPACES
				next same dpn-accountcode
				when dpn-user-code != SPACES
				and dpn-user-number = 0
			detail
				set lf-pin-required = yes
				break
			endextract
			if lf-pin-required = yes
				set so-cust-code = ws-saved-code
				message 'Account requires user pin access'
				reenter optional
			endif
		endif
		set ws-bo-found = SPACES
		if pattern(so-cust-code,'(') = 1
		and sys-deb-conv-is-alpha-lookup = 'T'
			set ws-bo-found = TELEPHONE_LOOKUP
			get deb-conversion
				on index old-deb-accountcode
				key is so-cust-code
			on error
				spl "so/m50extra" parameters are '-enqalpha'
					returning ws-returned-accountcode
					leave-files-open
				on error
				endon
				set accountcode = ws-returned-accountcode
				if accountcode > SPACES
					set so-cust-code = accountcode
				endif
				reenter optional
			else
				set so-cust-code = new-deb-accountcode
				refresh so-cust-code
			endon
		endif
		get deb-master
			key is so-cust-code
		on error
			if sys-deb-conv-is-alpha-lookup = 'Y'
				get deb-conversion
					on index old-deb-accountcode
					key is so-cust-code // 12 chars
				on error
				endon
				spl "so/m50extra" parameters are '-enqalpha'
					returning ws-returned-accountcode
					leave-files-open
				on error
				endon
				set accountcode = ws-returned-accountcode
				if accountcode > SPACES
					set so-cust-code = accountcode
				endif
				reenter optional
			else
				set sys-description = SPACES
				set lf-cust-prog-executed = FALSE
				do public-allow-entry-of-customer-details
					parameter
						sales-order.*
					returning
						lf-cust-prog-executed
				if not lf-cust-prog-executed
					do attempt-to-create-new-debtor entry once
						parameters are so-cust-code
						returning so-cust-code
				endif
				get deb-master
					on index accountcode
					key is so-cust-code
				on error
					message "Account not valid " so-cust-code
					get sales-order
						on index so-order-no so-bo-suffix
						key is ws-saved-order-no ws-saved-bo-suffix
					get deb-master
						on index accountcode
						key is so-cust-code
					reenter
				endon
			endif
		else
			set so-curr-code = dr-curr-code
		endon
		set dpn-pin-number = SPACES
		if deb-status = SPACES
			//everything ok
		elseif deb-status = 'N'
			message "Account has status of no supply, will require release authorisation"
		elseif deb-status = 'L'
			message "Account under legal action, can't create an order"
			reenter
		elseif deb-status = 'C'
			message "Account is listed for correspondence, can't create an order"
			reenter
		elseif deb-status = 'S'
		and ws-order-type not in {"C" "B"}
			message "Account listed for service only, only create C/Note or Rebate orders"
			reenter
		elseif deb-status = 'D'
			message "Account is to be deleted at end of period, can't create an order"
			reenter
		else
			message "Account has an invalid status, can't create an order"
			reenter
		endif
		get deb-pin-numbers
			on index dpn-accountcode dpn-user-code
			key is so-cust-code so-misc-code
		on error
		endon
		do clibdeb-check-credit-limit-for-customer
			parameter
				so-cust-code
			returning
				lf-credit-limit-available-amount
		if lf-credit-limit-available-amount < 0
			get deb-master
			if dr-clearflag in { "O" "W" "F" }
				do c101-open-item-debtor
					parameter "Warning! Over Credit Limit"
			else
				message "Can't use brought forward customers in point of sale"
				reenter
			endif
		endif
		do i50lines-set-i5pricemod-acnt-to-use-for-price-lookup
			returning ws-stock-identifiers
		//
		set i5soldisc-acnt-to-use-for-cgd
									= i5pricemod-acnt-to-use-for-price-lookup
		if sys-cgd-flg in {YES 'M' 'L' 'S' 'T' 'U' 'X' 'Z' '1' '2' '3' '4'}
			get cust-group-disc
				key is i5soldisc-acnt-to-use-for-cgd '****' SPACES
			on error //Not Used - Leave flag as is
			else
				set i5soldisc-cgd-cust-code-flag = TRUE
				set i5soldisc-cgd-cust-rate = cgd-disc-value
					//Plus other two for 'U'
					+ cgd-disc-value2
					+ cgd-disc-value3
					+ cgd-disc-value4
			endon
		endif
		get deb-master
			on index accountcode
			key is so-cust-code
		on error
		endon
		display shortname @20,50
	endvalidation
	if dpn-pin-number != SPACES
		display "  Access :" @21,39 background
	endif
	accept ws-pin-number @21,50
		blank
		help 'Enter the customers access code, ie pin number'
		when dpn-pin-number != SPACES
	validation
		if ws-pin-number != dpn-pin-number
			message "Access code not valid, can't create an order for this account"
			reenter so-cust-code
		endif
	endvalidation
	if screenmode() = entry
		if lf-save-accountcode != so-cust-code
			set lf-reprice-order = YES
		else
			set lf-reprice-order = NO
		endif
	endif
	accept lf-reprice-order @22,50
		help "Customer has changed, do you want to re-price all lines on the order."
		default lf-reprice-order
		uppercase
		allow YES NO
		when lf-save-accountcode != so-cust-code
	confirm auto
	confirmed
		get sales-order lock
		set so-cust-code = accountcode
		//Setup debtor defaults
		if sys-so-territory-default = "M"
			set so-territory-code = dr-marketing-flag
		else
			set so-territory-code = territory
		endif
		set so-price-code = price-code
		set so-cust-type = dr-cust-type
		set so-order-priority = dr-order-priority
		set so-part-shipment-allowed = dr-part-shipment-allowed
		if so-part-shipment-allowed = SPACES
			set so-part-shipment-allowed = YES
		endif
		update sales-order
		extract sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix 0
			next same so-order-no so-bo-suffix
		detail
			if sol-line-type not in {'SN' 'WN' 'SC' 'SS' 'KN'}
				//Need to do this instead of when condition,
				//as need last sequence number to set ws-line-seq properly.
				continue
			endif
			get sales-order-line current lock
			set lf-need-line-recalc = FALSE
			set lf-need-tax-recalc = FALSE
			if lf-reprice-order = YES
				if sol-line-type in {'SN' 'WN' 'KN'}
					get stock-master
					on error
						//Don't crash just don't re-price
						continue
					endon
					//Warehouse needed for some kinds of pricing.
					get stock-warehouse-detail
						on index stock-code whse-code
						key is stock-code so-whse-code
					on error
					endon
					do i4getprice-get-stock-price-record
						parameter stock-code so-whse-code
								so-cust-type
							returning ws-found-stk-price
					if not ws-found-stk-price
						initialise stock-price
							leaving stock-code
					endif
				endif
				if sol-line-type in {'SN' 'WN' 'SS' 'KN'}
					do i5soldisc-get-cust-disc
					do i5pricemod-pricing-module
						parameter
							FALSE
					if sys-so-base-price-to-store = "1"
						set sol-base-item-price = i5pricemod-rrp
					endif
					if i5pricemod-is-disc-to-be-used = NO
						set sol-disc-rate = 0
					endif
					set sol-item-price = i5pricemod-item-price
					if i5pricemod-price-used <> ZERO
						set sol-price-rule
							= i5pricemod-price-rule[i5pricemod-price-used]
					endif
					set sol-item-wholesale-price
						= i5pricemod-deemed-wholesale-price
					set lf-need-line-recalc = TRUE
				endif
			endif
			if lf-need-line-recalc
				get stock-master
					on index stock-code
				on error
					set stk-price-per = 1
				endon
				if sol-line-type in { 'SN','WN','RR','SS','RN','RS' }
					set i50entry-qty = sol-shipped-qty
					if sol-line-type in { 'SS','RS' }
						set stk-price-per = sol-price-uom
					endif
					do i50entry-get-conversion-factor
					do clib406-calc-line-cost
						parameters
							sol-item-cost
							sol-ordered-qty
							sol-shipped-qty
							sol-line-type
							sol-stk-unit-conversion
							sol-stk-unit-desc
							stk-price-per
						returning
							sol-ordered-line-cost
							sol-line-cost
				endif
				do i50entry-calc-order-totals same
				do i50entry-calc-shipped-totals same
				set i50entry-qty = sol-backorder-qty
				do i50entry-do-line-calc same
				set ws-backorder-amt = i50entry-line-amt
				update sales-order-line
			endif
		endextract
		set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
		do b300-calc-total-amounts-update-header
		get sales-order-delivery
			lock
			on index so-order-no so-bo-suffix so-text-type
			key is so-order-no so-bo-suffix 'DA'
		on error
		else
			delete sales-order-delivery
		endon
		do i5sodeladd-movein-cust-del-inst-address
			parameter ws-order-type
		if i5sodeladd-tax-group <> SPACES
		and ws-tax-groups-used
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is so-order-no so-bo-suffix
			on error
			else
				set so-tax-group = i5sodeladd-tax-group
				update sales-order lock
			endon
		endif
		if sys-point-of-sale-mode-used = '5'
			if wspos5continue = 2
				spl 'so/m50posmenu' parameter are '-refund' so-cust-code
				set so-cust-code = concat('CASH' cd-default-so-terr)
				get deb-master
					on index accountcode
					key is so-cust-code
				on error
					abort 'Unable to reset account.'
				endon
			elseif wspos5continue = 3
				spl 'deb/m10mast' parameters are '-notes' so-cust-code 'DF'
			endif
		endif
	not-confirmed
		restore deb-master
		restore sales-order
	endconfirm
after
	//
	get deb-master
		on index accountcode
		key is accountcode
	on error
	endon
	if so-cust-reference = SPACES
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'CT' dr-cust-type
		on error
			//No customer type record setup
		else
			if sys-tbl-alpha-3 = YES
				do b160-maintain-ref-inv-no
			endif
		endon
	endif
	//restore the line seq that was current when entering customer.
	set sol-line-seq = lf-save-seq
endscreen //get-cash-customer ------------------------------------------------

procedure get-the-suspended-order-type
	set ws-order-type = 'N'
	get sales-order-notes lock
		on index so-order-no so-bo-suffix so-note-type
				so-user-code so-note-sequence-no
		key is so-order-no so-bo-suffix '~' 'SUSPEND' 0
	on error
		// note not found check for the old method of storing
		// the 'order type'
		extract sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix 0
			next same so-order-no so-bo-suffix
			where sol-line-type = 'DN'
				and substring(sol-line-description,1,9) = 'SUSPENDED'
		detail
			get sales-order-line current lock
			set ws-order-type = substring(sol-line-description,16,16)
			delete sales-order-line
			break
		endextract
	else
		set ws-order-type = substring(so-note-text,16,16)
		delete sales-order-notes
	endon
endprocedure //get-the-suspended-order-type ----------------------------------

menu pos5-customer-menu
	window @16,30 to @22,56
		no-hide
detail
	option 'Customer/Cash Account' @17,33
		help 'Get the Customer or Cash Account for this sale'
		// do nothing
	option 'Customer Notes' @19,33
		help 'Enter Notes against a Customer (D1)'
		//when USER_MODULE_ACCESS(D) > 0
		set wspos5continue = 3
	option 'Goods Refund' @21,33
		help 'Ask Password and process a Goods Refund'
		do accept-refund-password correct once
		if not wspos5continue
			message 'Invalid password, access denied'
		else
			set ws-refund-reason-found = FALSE
			extract system-table
				on index sys-tbl-type sys-tbl-code
				key is "VS" SPACES
				next same sys-tbl-type
			detail
				set ws-refund-reason-found = TRUE
				break
			end-extract
			if ws-refund-reason-found
				do get-refund-reason entry once
				if ws-refund-reason-entered = FALSE
					set wspos5continue = FALSE
				else
					set so-order-reason-code = ws-order-reason-code
					set so-refund-reason = so-order-reason-code
				endif
			endif
		endif
	confirm auto
		exit
	endconfirm
after
	set wspos5continue = FALSE
endmenu //pos5-customer-menu --------------------------------------------------

menu pos5-options-menu
	window @8,30 to @22,51
		no-hide
detail
	option 'Layby Entry' @9,33
		help 'Open a layby Header'
		spl "so/m50ordent" parameters are "-layby"
			cd-default-whse cd-default-so-terr cd-default-rep
	option "Enquiry Menu" @11,33
		help "Menu of Point of Sale Enquiries(T2)"
		icon folder-icon
		//when USER_MODULE_ACCESS(T) > 1
		spl 'so/m50posmenu' parameters '-enquiry'
	option "Print Menu" @13,33
		help "Menu of Print Functions(T4)"
		icon folder-icon
		//when USER_MODULE_ACCESS(T) > 3
		spl 'so/m50posmenu' parameters '-print'
	option "Warehouse Menu" @15,33
		help "Menu of Warehouse Functions(T5)"
		icon folder-icon
		//when USER_MODULE_ACCESS(W) > 4
		spl 'so/m50posmenu' parameters '-whse'
	option "Reorder Stock" @17,33
		help "Enter or Review Reorder of Stock by Purchase or Transfer(U5)"
		//when USER_MODULE_ACCESS(U) > 4
		spl 'po/m6reorder' parameters '-whse' so-whse-code
	option "HR - Staff Menu" @19,33
		help "Menu of Staff Functions (Roster Management)(T6)"
		//when USER_MODULE_ACCESS(T) > 5
		do i8secabt-check-abort parameters
			sys-consolidation-division login-id() "HRM" "X010"
		spl 'pay/m7menu' parameters '-manager'
	option "Management Menu" @21,33
		help "Menu of Point of Sale Management Functions(T6)"
		icon folder-icon
		//when USER_MODULE_ACCESS(T) > 5
		spl 'so/m50posmenu' parameters '-manage'
	confirm auto
		exit
	endconfirm
endmenu //pos5-options-menu --------------------------------------------------

screen accept-refund-password
	window @21,35 to @23,80
		title is "Goods Refund Access"
before
	display 'Goods Refund Access Password  :' @22,37
detail
	accept wspos5-refund-password-entered @22,69 blank
		help ' '
	validation
		if wspos5-refund-password-entered <> wspos5-refund-password
			set wspos5continue = FALSE
		else
			set wspos5continue = 2
		endif
		exit
	endvalidation
after
	back-to-detail	// force them to enter a refund password
endscreen //accept-refund-password -------------------------------------------

screen get-refund-reason
	window @21,50 to @23,80
		title is "Cash Sale Refund Reason"
before
	display "Reason Code:" @22,53
	set ws-refund-reason-entered = FALSE
detail
	accept so-order-reason-code @22,66
		default so-order-reason-code
		help 'Enter the reason code for this refund [HELP]'
	on help-key
		set sys-tbl-type = 'VS'
		do i5creason-enquire-on-cnote-cancel-reason
		if sys-tbl-code > SPACES
			set so-order-reason-code = sys-tbl-code
		endif
		reenter optional
	endon
	validations
		get system-table
			key is 'VS' so-order-reason-code
		on error
			message "Refund reason not valid " so-order-reason-code
			reenter
		else
			// "Inactive" Check..
			if sys-tbl-inactive-date > 0
			and date-time(today(),tod(),1) > sys-tbl-inactive-date
				message-box param-text("Refund reason '<<P1>>' is not Active.", so-order-reason-code)
					title "Process Refund"
					message-buttons MSG_BOX_OK
					icon MSG_BOX_WARNING
					tag 12
				reenter
			endif
		endon
		set ws-order-reason-code = so-order-reason-code
	endvalidations
	confirm auto
	confirmed
		set ws-refund-reason-entered = TRUE
		exit
	endconfirm
after
	//delete hit so stop it
	message 'No Refund Reason entered, so not processing refund - Exiting'
	pause
endscreen //get-refund-reason --------------------------------------------------

screen c101-open-item-debtor
parameters
	lp-title							pic x(100)
local
	lf-aged-balance						like tr-amount occurs 13
	lf-balance							like tr-amount
	lf-future-bal						like tr-amount
	lf-open-bal							like tr-amount
	lf-not-used							like tr-amount
	lf-age-title-1						pic x(5)
	lf-age-title-2						pic x(5)
	lf-age-title-3						pic x(6)
	//
	window @6,1 to @23,80
		title is lp-title
	//
	primary deb-trans
		on index dr-tr-record-status accountcode trans-ref batch-ref dr-tr-trans-no
		same dr-tr-record-status accountcode
	//
	datagrid occurs 9
	allow ws-continue-mode md-orders next-scr prev-scr next prev
before
	set dr-tr-record-status = BMSDEF_RECORD_STATUS_CURRENT
	do determine-ageing-titles
		returning
			lf-age-title-1
			lf-age-title-2
			lf-age-title-3
	do clibdeb-ageing-array
		parameter
			deb-master.*
		returning
			lf-aged-balance
	do clibdeb-get-balances
		parameter
			deb-master.*
		returning
			lf-balance
			lf-future-bal
			lf-open-bal
			lf-not-used
	box @6,1 to @12,80
		title SPACES
	get deb-master
	display credit-limit @7,22 data
		title "Credit Limit Code" @7,3
	if credit-limit = SPACES
		display 'No credit limit' @7,25 bold
	elseif credit-limit = '0'
		display 'Zero Balance' @7,25 bold
	elseif credit-limit between '1' and '9'
		get system-table
			key is 'CK' ascii-char(ascii-num(credit-limit) - 47 + 64)
			on error
				set sys-money-value = 0
			endon
		if dr-credit-limit-amount = 0
			display sys-money-value @7,25 bold pic ---,---,--9.99
		else
			display dr-credit-limit-amount @7,25 bold pic ---,---,--9.99
		endif
	elseif ascii-num(credit-limit) - 64 between 1 and 26
		get system-table
			key is 'CK' credit-limit
			on error
				set sys-money-value = 0
			endon
		display sys-money-value @7,25 bold pic ---,---,--9.99
	else
		display 'Invalid code' @7,26 bold
	endif
	display lf-balance @9,13 pic ---,---,--9.99 data
		title "Balance:"
	display lf-aged-balance[1] @9,37 pic ---,---,--9.99 data
		title "Current:"
	display lf-age-title-1 @10,7
	display lf-age-title-2 @10,31
	display lf-age-title-3 @11,6
	display lf-aged-balance[2] @10,13 pic ---,---,--9.99 data
	display lf-aged-balance[3] @10,37 pic ---,---,--9.99 data
	display sum-array(lf-aged-balance,4,occurrence(lf-aged-balance)) @11,13 pic ---,---,--9.99 data
detail
	display trans-date @13,10
	display trans-type @13,20 pic x(8)
	display trans-ref @13,30
	display tr-details @13,40
	display tr-amount @13,50 pic ---,---,--9.99
	display batch-ref @13,60 pic x(8)
	confirm auto
	confirmed
		if screenmode() = md-orders
			save sales-order
			do c110-list-outstanding-orders
			restore sales-order
		elseif screenmode() = ws-continue-mode
			exit
		endif
	endconfirm
endscreen //c101-open-item-debtor ----------------------------------------------

screen c110-list-outstanding-orders
	window @12,41 to @23,78
		title is "Outstanding Sales Orders"
	//
	primary saved-sales-order
		on index so-cust-code so-order-no so-bo-suffix
		same so-cust-code
	//
	allow ws-continue-mode next-scr prev-scr next prev
	datagrid occurs 9
detail
	accept so-order-no @12,42
		help "Please enter order no"
	accept so-bo-suffix @12,44
		help "Please enter the backorder suffix"
	do i5sodesc-get-status-desc
	display i5sodesc-so-status-desc-short @12,46
		title is "Status"
	display so-order-total-amount @12,48
	confirm auto
	confirmed
		if screenmode() = ws-continue-mode
			exit
		endif
	endconfirm
endscreen //c110-list-outstanding-orders -------------------------------------

// ------------------- Start of proforma routines ----------------------------

procedure get-proforma-order
	// NOTE: we haven't read the real sales order yet.
	//
	get sales-order
		on index so-order-no so-bo-suffix
		key is ws-saved-order-no ws-saved-bo-suffix
	//
	extract sales-order
		on index so-cust-code so-order-no so-bo-suffix
		key is so-cust-code 0 SPACES
		next same so-cust-code
		when so-order-status = I5SO_PROFORMA_ORDER
		and so-order-reason-code <> '~&'
	detail
		set ws-proforma-order-no = so-order-no
		set ws-proforma-bo-suffix = so-bo-suffix
		break
	endextract
endprocedure //get-proforma-order --------------------------------------------

procedure setup-select-of-proforma-lines
	local field
		lf-promo-exists			type boolean
		lf-off-invoice			type boolean
		lf-saved-line-indicator	like sol-line-seq
		lf-process-standard-proforma		type boolean
		lf-line-to-position-on				like sol-line-seq
	//
	if so-order-status > I5SO_RDY_FOR_PICKING
		message "Can only enter stock from proforma if status is less than rdy for picking"
		pause
	elseif i50lines-whse-type = IWTYPEDEF_VAN_WHSE
		message 'Proforma orders not valid for IWTYPEDEF_VAN_WHSE'
		pause
	elseif i50entry-sales-credit = YES
	or i50entry-return-authorisation = YES
		message "Proforma orders not valid for Credit notes or RA's"
		pause
	else
		set ws-saved-order-no = so-order-no
		set ws-saved-bo-suffix = so-bo-suffix
		set ws-saved-line-seq = sol-line-seq
		set lf-saved-line-indicator = ws-line-seq	// next available line seq
		//
		do public-process-proforma-lines
			parameter
				sales-order.*
				sales-order-line.*
				ws-line-seq			//next available line sequence
				ws-total-shipped-incl-charges
				ws-total-ordered-incl-charges
			returning
				lf-process-standard-proforma
				lf-line-to-position-on
		if not lf-process-standard-proforma
			set so-order-no = ws-saved-order-no
			set so-bo-suffix = ws-saved-bo-suffix
			if lf-line-to-position-on = ZERO
				set sol-line-seq = ws-line-seq - 1 // position on the last line!
			else
				set sol-line-seq = lf-line-to-position-on
			endif
			get sales-order-line lock
			on error
				// the reason there is an empty on error is to handle the occurence
				// where no line item existed previously and the user chose not to add
				// any proforma order lines which in this case no line items would exist.
			endon
			get sales-order lock
			exit							// Note:   exit !!!!!!!!
		endif
		//
		// Save the ordered and shipped totals of the current editing order,
		// these can be added in to the selected proforma lines!
		set ws-current-order-shipped-incl-charges =
				ws-total-shipped-incl-charges
		set ws-current-order-ordered-incl-charges =
				ws-total-ordered-incl-charges
		//
		if ws-proforma-order-no = 0
			//check for proforma order
			save sales-order // save the current s/o
			set i50lines-licence-start-date = so-order-date
			extract proforma-sales-order
				on index so-cust-code so-order-no so-bo-suffix
				key is so-cust-code 0 SPACES
				next same so-cust-code
				when so-order-status = I5SO_PROFORMA_ORDER
				and so-order-reason-code <> '~&'
			detail
				set ws-proforma-order-no = so-order-no
				set ws-proforma-bo-suffix = so-bo-suffix
				break
			endextract
			//regain currency
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-saved-order-no ws-saved-bo-suffix
			//
			//regain values
			restore sales-order
			//
		endif
		if ws-proforma-order-no = 0
			//still 0!!!, proforma order mustn't exist
			message 'There is no proforma order for this customer'
		else
			set ws-bo-qty-found = NO
			// first make sure nobody else is already loading orders from
			// the proforma. As this requires selecting fields on the s/o lines
			save sales-order // save the current s/o
			get proforma-sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-proforma-order-no ws-proforma-bo-suffix
			on error ELOCKED		// only trap if locked
				message 'Proforma order is currently being used, try again later - '
						ws-proforma-order-no ws-proforma-bo-suffix
				restore sales-order
				exit
			endon
			//regain currency
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is ws-saved-order-no ws-saved-bo-suffix
			//
			//regain values
			restore sales-order
			//
			do review-proforma-lines-and-select
			if ws-bo-qty-found = YES
				do check-for-alternate-items-in-proforma
			endif
			//
			// set ws-line-seq back to the original sales-order line-seq,
			// NOTE the do review-proforma-lines-and-select would have
			// set the ws-line-seq to the proforma order lines!!
			set ws-line-seq = lf-saved-line-indicator
			//check if lines selected in the proforma order
			//and create real lines
			extract like-sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key is ws-proforma-order-no ws-proforma-bo-suffix 0
				next same so-order-no so-bo-suffix
				when sol-short-ship-reason-code = '1'
			detail
				save sales-order-line
				set so-order-no = ws-saved-order-no
				set so-bo-suffix = ws-saved-bo-suffix
				// need to verify line seq as if user has previously
				// removed a line then ws-line-seq may be in error
				do verify-next-unique-so-line-seq
					parameter ws-line-seq
					returning ws-line-seq
				set sol-line-seq = ws-line-seq
				set sol-short-ship-reason-code = SPACES
				insert sales-order-line
				on error
				else
					set ordlog-type = 10
					if sol-line-type = 'SC'
						if str-len(sol-line-description) > 15
							set ordlog-old-info
								= substring(sol-line-description,1,15)
							set ordlog-new-info
								= substring(sol-line-description,16,30)
						else
							set ordlog-old-info = sol-line-description
							set ordlog-new-info = SPACES
						endif
					else
						set ordlog-old-info = stock-code
						set ordlog-new-info = SPACES
					endif
					set ordlog-old-value = sol-ordered-qty
					set ordlog-new-value = sol-item-price
					set ordlog-change-value = sol-shipped-amount
					set ordlog-ordered-change-value = sol-line-amount
					set ordlog-line-type =  sol-line-type
					set ordlog-item-wholesale-price = sol-item-wholesale-price
					set ordlog-disc-rate = sol-disc-rate
					set ordlog-ordered-tax-chg-value = sol-ordered-sales-tax-amt
					do a9000-write-audit-file
				endon
				// needs to write a record to sales-order-line-retail-promo
				if sol-item-price > 0
					// this is added to get the correct i5pricemod for
					// the item in each sales-order-line
					do i5pricemod-pricing-module
						parameter
							FALSE
					do check-if-promo-exists
						returning lf-promo-exists
							lf-off-invoice
					if lf-promo-exists
						do insert-discounts-into-retail-promo
					endif
				endif
				//regain currency
				restore sales-order-line
				//
				// now initialise the proforma fields for next time!
				get like-sales-order-line lock
				//
				// don't reinitialise ordered qty or line-amount as they
				// will be the default next time!
				set sol-shipped-qty = 0
				set sol-backorder-qty = 0
				set sol-shipped-discount-amt = 0
				set sol-shipped-sales-tax-amt = 0
				set sol-shipped-amount = 0
				//
				set sol-short-ship-reason-code = '0'
				//proforma should not have a percentage populated in the field
				set sol-tax-rate = ZERO
				update like-sales-order-line
				set ws-line-seq += 1
			endextract
			//
			set so-order-no = ws-saved-order-no
			set so-bo-suffix = ws-saved-bo-suffix
			set sol-line-seq = ws-line-seq - 1 // position on the last line!
			get sales-order-line lock
			on error
				// the reason there is an empty on error is to handle the occurence
				// where no line item existed previously and the user chose not to add
				// any proforma order lines which in this case no line items would exist.
			endon
			get sales-order lock
		endif
	endif
endprocedure //setup-select-of-proforma-lines --------------------------------

screen review-proforma-lines-and-select
	window @4,2 to @29,80
		title is "Proforma Entry"
	//
	primary sales-order-line
		same so-order-no so-bo-suffix
	datagrid occurs 18
	review-from-current
	stay-in-correct
	allow next-scr prev-scr next prev md-select-proforma-line md-deselect-proforma-line find-stk
	//
	local field
		lf-description						like stk-description
		lf-selected							pic x
		lf-saved-line-seq					like sol-line-seq
		lf-stk-unit-desc					like sol-stk-unit-desc
		lf-line-amount						like sol-line-amount
		lf-flag								type boolean
		lf-saved-sol-stk-unit-desc			like sol-stk-unit-desc
		lf-allow-selection					type boolean
before
	set so-order-no = ws-proforma-order-no
	set so-bo-suffix = ws-proforma-bo-suffix
	do clear-proforma-select-flag
	//
	box @4,2 to @7,80
		title 'Order Details'
	display so-cust-code @5,14 foreground data
		title "Customer:"
	display ws-current-order-shipped-incl-charges @5,60 pic -(9)9.99 data
		title "Order Value  :"
	display ws-current-order-ordered-incl-charges @6,60 pic -(9)9.99 data
		title "Invoice Value:"
	//
	box @26,2 to @28,80
		title 'Line'
	display "Avail:" @27,4
	display "Per:" @27,30
	display "Pack Qty:" @27,41
detail
	display stock-code @8,5
	//
	if sol-line-type != 'DN'
		get stock-master
			on index stock-code
		on error
			set stk-price-per = 1
		endon
	endif
	if sol-line-type = 'SN'
		do display-available-for-proforma
		set lf-description = concat(substring(stk-description,1,
			strlen(stk-description)) ' ' stk-desc-line-2)
	else
		set lf-description = sol-line-description
	endif
	display lf-description @8,7
	//
	if screenmode() = md-select-proforma-line
	and lf-selected != "*"
		if sol-line-type != 'SN'
			message 'Can only select normal item codes'
			continue
		endif
		if sol-line-type = 'SN'
		and sol-chg-type = 'D'
			message 'Unable to select components of kits'
			continue
		endif
		//get the line item from proforma, just get the quantity and use the UOM as defined
		// on the proforma.
		set lf-saved-sol-stk-unit-desc = sol-stk-unit-desc
		do validate-stock-code
		set sol-stk-unit-desc = lf-saved-sol-stk-unit-desc
		if reenter-needed
			message 'Unable to select this line'
			continue
		endif
		if sol-short-ship-reason-code = '1'
		and lf-saved-line-seq <> sol-line-seq
			message 'This item code has already been selected, try again'
			continue
		elseif sol-short-ship-reason-code = "1"
			set lf-saved-line-seq = ZERO
			continue
		endif
	endif
	set lf-flag = FALSE
	do i50lines-format-str-ordered-qty
	set i50lines-price-conversion = 0
	//
	accept str-ordered-qty @8,11 pic x(10)
		help "Enter the quantity ordered or A for alternative item codes [HELP]"
		no-clear
		default str-ordered-qty
		title "Quantity"
		uppercase
		when sol-line-type = 'SN'
		and sol-chg-type != 'D'			// ignore components
		and screenmode() = md-select-proforma-line
	on help-key
		if ws-order-flag = CUSTOMER
			message 'Enter the quantity you wish to order'
		else
			spl 'stk/m4stkqenq.spl'
				parameters are stock-code "B"
				leave-files-open
			reenter optional
		endif
	endon
	validation
		set lf-flag = TRUE
		//Delete existing tax line and let the system create new line based on
		//current values. This is required because after creation of Proforma
		//Order, if user change the stock to exclude tax and create normal order
		//for that customer then in this case clibtaxso do the calculations based
		//on existing tax rate.
		do clibtaxso-delete-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
		//
		do ordered-qty-validation-for-proforma
		if reenter-needed = 1		// reenter optional
			refresh data
			reenter optional
		elseif reenter-needed = 2		// refresh str-ordered-qty
			refresh str-ordered-qty
		elseif reenter-needed = 3	// reenter stock-code/ws-find-stk/cont.
			continue
		endif
	endvalidation
	if sol-line-type = 'DN'
		set str-ordered-qty = SPACES
	endif
	display str-ordered-qty @8,11 pic x(10)
	//
	if sol-short-ship-reason-code = '1'
		set lf-selected = "*"
	else
		set lf-selected =  SPACES
	endif
	display lf-selected @8,13 pic x(9)
		title is "Selected"
	//
	if sol-line-type != 'DN'
		set lf-stk-unit-desc = sol-stk-unit-desc
		set lf-line-amount = sol-line-amount
		display lf-line-amount @8,15 pic z(5)9.99
	else
		set lf-stk-unit-desc = SPACES
		display SPACES @8,15 //blank lf-line-amount
	endif
	display lf-stk-unit-desc @8,9
	//
	confirm auto
		when sol-line-type = 'SN'
		and screenmode() in {md-select-proforma-line md-deselect-proforma-line}
	before
		if not lf-flag and screenmode() = md-select-proforma-line
		// a quantity validation is only needed when selection proforma lines
			do ordered-qty-validation-for-proforma
		endif
	confirmed
		switch screenmode()
		case md-select-proforma-line md-deselect-proforma-line
			if screenmode() = md-deselect-proforma-line
				if sol-short-ship-reason-code != '1'
					message "Line has not been selected, cannot deselect it"
					continue
				endif
			endif
			if screenmode() = md-select-proforma-line
			and i50lines-action-flag = "OQ"
				do public-accept-stock-check
					parameter
						sales-order.*
						stock-code
					returning
						stock-code
						lf-allow-selection
				if not lf-allow-selection
					// obsolete item cannot be selected
					// public procedure can be used to allow selection
					set sol-short-ship-reason-code = '0'
					continue
				endif
			endif
			if sol-ordered-qty >= 0
				do update-the-proforma-line-amts
				if sol-short-ship-reason-code = '1'
					// check to see if already selected!
					get sales-order-line lookup
						on index sol-line-type stock-code
							so-order-no so-bo-suffix
						key is sol-line-type stock-code
							ws-saved-order-no ws-saved-bo-suffix
					on error
					else
						message "Warning: Sales order " ws-saved-order-no
							ws-saved-bo-suffix " already contains line item "
							stock-code
					endon
					// reset proforma order fields
					set so-order-no = ws-proforma-order-no
					set so-bo-suffix = ws-proforma-bo-suffix
				endif
			endif
			refresh data
			set lf-saved-line-seq = sol-line-seq
		case find-stk
			do b430-find-stk
		endswitch
	not-confirmed
		if screenmode() in {md-select-proforma-line md-deselect-proforma-line}
			refresh data
			set lf-saved-line-seq = sol-line-seq
		endif
	endconfirm
after
	// Calculate order totals and rebuild sales-order-tax records for
	// the proforma order.
	do b300-calc-total-amounts-update-header
	set i50lines-proforma-lines = SPACES
endscreen //review-proforma-lines-and-select ---------------------------------

procedure update-the-proforma-line-amts
	local field
		lf-saved-shipped-amount	like sol-shipped-amount
		lf-saved-shipped-qty	like sol-shipped-qty
	//
	if sol-short-ship-reason-code = '1'
	//the line has been deallocated!!!!!
		set sol-short-ship-reason-code = '0'
	else
		set sol-short-ship-reason-code = '1'
	endif
	if sol-line-type = 'KN'
		message 'You will need to allocate stock to the kit in normal line mode'
		exit
	endif
	if sol-short-ship-reason-code = '0'
		// set sol-shipped-qty to 0 so that calculated line amount
		// is zero. This is needed so that the correct amount is
		// written to the deb-master commitments field
		set lf-saved-shipped-qty = sol-shipped-qty
		set sol-shipped-qty = 0
		set i50entry-qty = sol-shipped-qty
		set lf-saved-shipped-amount = sol-shipped-amount
		do i50entry-calc-shipped-totals //remove XXXXXX mode not used!
		do i50entry-calc-order-totals //remove XXXXXX mode not used!
		set i50entry-qty = 0
	else
		// need to set sol-shipped-amount prior to call to
		// i50entry-calc-shipped-totals so that the correct amount
		// is written to the deb-master commitments field
		// sol-shipped-amount will be subsequently reset inside
		// i50entry-calc-shipped-totals
		set sol-shipped-amount = 0
		do i50entry-calc-shipped-totals entry
		do i50entry-calc-order-totals entry
		set i50entry-qty = sol-shipped-qty
	endif
	do i50entry-get-conversion-factor
	do clib406-calc-line-cost
		parameters
			sol-item-cost
			sol-ordered-qty
			sol-shipped-qty
			sol-line-type
			sol-stk-unit-conversion
			sol-stk-unit-desc
			stk-price-per
		returning
			sol-ordered-line-cost
			sol-line-cost
	set sol-date-stamp = today()
	set sol-time-stamp = tod()
	set ws-so-date-stamp-to-be-updated = YES
	update sales-order-line lock
	//
	if sol-short-ship-reason-code = '0'
		set sol-shipped-amount = lf-saved-shipped-amount
		set sol-shipped-qty = lf-saved-shipped-qty
		do i50entry-update-stock-file remove
	else
		do i50entry-update-stock-file entry
		do a310-check-line-gp entry
	endif
	//
	if sol-backorder-qty != 0
		set ws-bo-qty-found = YES
	endif
	if sol-short-ship-reason-code = '0'
		//Save line values in order to reverse contract
		//amount and limit.
		if sol-line-type in {'SN' 'WN'}
		and i50lines-found-contract
		and i50lines-contracts-used = 2
			do i50lines-save-the-order-line-values
		endif
		// A proforma line is deselected. Subtract the line totals.
		set ws-current-order-ordered-incl-charges -= sol-line-amount
		set ws-current-order-shipped-incl-charges -= sol-shipped-amount
		// deselect line so clear all fields on this line!
		get sales-order-line lock
		// don't reinitialise ordered qty, this can be the
		// default for next time!
		//set sol-ordered-qty = 0
		set sol-shipped-qty = 0
		set sol-backorder-qty = 0
		set sol-shipped-discount-amt = 0
		set sol-shipped-sales-tax-amt = 0
		set sol-shipped-amount = 0
		set sol-line-cost = 0
		update sales-order-line lock
	else
		// A proforma line is selected. Add the line totals.
		set ws-current-order-ordered-incl-charges += sol-line-amount
		set ws-current-order-shipped-incl-charges += sol-shipped-amount
	endif
	//
	set i50lines-cal-display-totals = CURRENT_LINE_AND_NO_SEQ
	// need to retain currency of actual sales order entered to retain sales
	// order header values for pricing
	push sales-order
	//If this is a contract order then reduce the
	//quantity and amount. This is only required
	//when i50lines-contracts-used field is set
	//to 2 which means order has got sales order
	//total amount or sales order total charges.
	if sol-line-type in {'SN' 'WN'}
	and i50lines-found-contract
	and i50lines-contracts-used = 2
		do update-contract-order-qty
	endif
	//
	display ws-current-order-ordered-incl-charges @5,60 pic -(9)9.99
	display ws-current-order-shipped-incl-charges @6,60 pic -(9)9.99
	//
	do commit-auto-transaction
	pop sales-order
endprocedure //update-the-proforma-line-amts ---------------------------------

procedure ordered-qty-validation-for-proforma
	local fields
		lf-check-uom-decimal-ok			type boolean
	//
	set reenter-needed = 0
	set str-ordered-qty = left-justify(str-ordered-qty)
	if str-ordered-qty = 'A'
		set ws-saved-stock-code = stock-code
		repeat
			do i50lines-review-substitute-stk-items
		until stock-code <> ws-saved-stock-code
		endrepeat
		if stock-code = SPACES
			//nothing selected so stay with original
			//item code entered.
			set stock-code = ws-saved-stock-code
		endif
		set reenter-needed = 1		// reenter optional
		exit
	endif
	//
    if num(str-ordered-qty) < ZERO
		message-box "Please only enter positive figures"
			title "Order Quantity"
			message-buttons MSG_BOX_OK
			icon is MSG_BOX_WARNING
			tag 1421
		set reenter-needed = 1
		exit
	elseif num(str-ordered-qty) = ZERO
		message-box param-text("Order quantity not valid <<P1>>",str-ordered-qty)
			title "Order Quantity"
			message-buttons MSG_BOX_OK
			icon is MSG_BOX_WARNING
			tag 1422
		set reenter-needed = 1
		exit
	else
		set sol-ordered-qty = num(str-ordered-qty)
		set sol-shipped-qty = sol-ordered-qty
	endif
	do check-uom-decimal
		parameter sol-ordered-qty
		returning lf-check-uom-decimal-ok
	if lf-check-uom-decimal-ok = FALSE
		set reenter-needed = 1
		exit
	endif
	set i50lines-proforma-lines = BEING_ENTERED
	do i50lines-check-review-order-qty entry// note the entry screen
	// Check for broken pack quantities is done in i50lines.
	// If user enters 'N'for Partial pack warning, i50lines-action-flag is set to 'O'
	if i50lines-action-flag = 'O'
		set reenter-needed = 1
		exit
	endif
endprocedure //ordered-qty-validation-for-proforma ---------------------------

procedure display-available-for-proforma
	local field
		lf-avail-dedicated			like whse-qty-on-hand
		lf-available-stk			like whse-qty-on-hand
		lf-stk-unit-desc			like sol-stk-unit-desc
	//
	get stock-master
		on index stock-code
	on error
		initialise stock-master
			leaving stock-code
	endon
	do a900-get-whse-price-rec
	do i50lines-determine-available-stock
		parameters so-order-no so-bo-suffix sol-line-seq
			sol-line-type sol-ordered-qty i5pricemod-bill-to
			so-whse-code stock-code
			ws-van-id
			TRUE	//Indicative available stock.
			sol-stk-unit-desc
			sol-stk-unit-conversion
		returning ws-available-stk
			lf-avail-dedicated
			i50entry-dedicated-line
			sol-stk-unit-desc		// used to display available
			sol-stk-unit-conversion	// used to display available
	if stk-stock-status not in {'L','Z'}
		set lf-available-stk = ws-available-stk
		set lf-stk-unit-desc = sol-stk-unit-desc
	else
		set lf-available-stk = ZERO
		set lf-stk-unit-desc = SPACES
	endif
	display ws-available-stk @27,11 pic -(7)9t999 foreground
	display sol-stk-unit-desc @27,23 foreground
	display sol-price-uom @27,35 pic z(6) foreground
    display stk-pack-qty @27,50 foreground
endprocedure //display-available-for-proforma --------------------------------

procedure clear-proforma-select-flag
	//make sure select flag has been cleared
	extract sales-order-line lock
		on index so-order-no so-bo-suffix sol-line-seq
		key is ws-proforma-order-no ws-proforma-bo-suffix 0
		next same so-order-no so-bo-suffix
	detail
		if sol-short-ship-reason-code = '1'
			set sol-shipped-qty = 0
			set sol-backorder-qty = 0
			set sol-shipped-discount-amt = 0
			set sol-shipped-sales-tax-amt = 0
			set sol-shipped-amount = 0
			set sol-ordered-disc-amt = 0
			set sol-ordered-sales-tax-amt = 0
		endif
		set sol-short-ship-reason-code = '0'
		update sales-order-line
		set ws-next-line-seq = sol-line-seq
	endextract
	position sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		key is ws-proforma-order-no ws-proforma-bo-suffix 0
endprocedure //clear-proforma-select-flag ------------------------------------

screen check-for-alternate-items-in-proforma
	window @5,1 to @23,80
		title is "List of selected proforma lines not available"
	allow md-alternate-items next prev next-scr prev-scr
	primary sales-order-line
		same so-order-no so-bo-suffix
	datagrid occurs 17
	review-from-current
	when sol-short-ship-reason-code = '1'
	and sol-backorder-qty != 0
detail
	display stock-code @5,2
	display stk-description @5,4 pic x(19)
	display sol-ordered-qty @5,6
	display sol-shipped-qty @5,8
	display sol-backorder-qty @5,10
	confirm auto
	confirmed
		if screenmode() = md-alternate-items
			do get-alternate-info-for-proforma entry once
			refresh review
		endif
	endconfirm
after
	set stock-code = SPACES
endscreen //check-for-alternate-items-in-proforma ----------------------------

screen get-alternate-info-for-proforma
	window @16,1 to @23,80
		title is "Alternative Information For Proforma"
	no-ok-cancel
before
	get stock-master
	on error
		initialise stock-master
			leaving stock-code
	endon
	if sol-shipped-qty != 0
		display "Item code" @17,3
		display "BO" @17,70
		display "Qty" @18,70
		display "Shipped" @17,59
		display "Qty" @18,61
		display "Ordered" @17,49
		display "Qty" @18,51
		display "Allocate total ordered qty to alternative item code:" @22,22
	endif
	set i50lines-flag = SPACES
detail
	if sol-shipped-qty != 0
		display stock-code @17,14
		display stk-description @18,14
		display sol-ordered-qty @19,48 pic z(6)9t9
		display sol-shipped-qty @19,58 pic z(6)9t9
		display sol-backorder-qty @19,68 pic z(6)9t9
		display stk-desc-line-2 @19,14
		display stk-desc-line-3 @20,14
	endif
	accept i50lines-flag @22,76
		help 'Y-allocate ordered qty,N-Leave shipped qty against this item ie.allocate back order qty'
		allow YES NO
		uppercase
		default YES
		when sol-shipped-qty != 0
	confirm auto
	confirmed
		set ws-saved-stock-code = stock-code
		repeat
			do i50lines-review-substitute-stk-items
		until stock-code <> ws-saved-stock-code
		endrepeat
		if stock-code = SPACES
		//nothing selected so stay with original
		//item code entered.
			set stock-code = ws-saved-stock-code
			message 'No alternative item code selected, leave line as it is'
			pause
			set i50lines-flag = SPACES
			exit
		elseif ws-saved-stock-code = stock-code
			//same item code don't do anything
			set i50lines-flag = SPACES
			exit
		else
			//*****************************************************/
			//** Stock warehouse detail needs to be locked here  **/
			//** so that the available stock calculation further **/
			//** down the code will be accurate.                 **/
			//*****************************************************/
			do i50strupd-lock-stock-warehouse-detail
				parameters stock-code so-whse-code
				returning i50entry-stock-warehouse-locked
			if not i50entry-stock-warehouse-locked
				message "Cannot lock stock warehouse detail "
					stock-code
					so-whse-code
					" (" file-status() ")"
				reenter optional
			endif
			//new item code, need to create new line
			//so save the new item code
			set ws-find-stk = stock-code
			//get currency on original item code and sol.
			get stock-master
				key is ws-saved-stock-code
			get sales-order-line lock
			//now deallocate old shipped and backorder
			do i50entry-update-stock-file remove
			if i50lines-flag = YES
			or sol-shipped-qty = 0	// all of it on backorder
				set i50entry-sol-ordered-qty = sol-ordered-qty
				set sol-short-ship-reason-code = '0'
				update sales-order-line lock
			else
				set i50entry-sol-ordered-qty = sol-backorder-qty
				set sol-ordered-qty = sol-shipped-qty
				set sol-backorder-qty = 0
				do i50entry-update-stock-file entry
				do i50entry-calc-shipped-totals same
				do i50entry-calc-order-totals same
				set i50entry-qty = sol-shipped-qty
				do i50entry-get-conversion-factor
				do clib406-calc-line-cost
					parameters
						sol-item-cost
						sol-ordered-qty
						sol-shipped-qty
						sol-line-type
						sol-stk-unit-conversion
						sol-stk-unit-desc
						stk-price-per
					returning
						sol-ordered-line-cost
						sol-line-cost
				update sales-order-line lock
			endif
			//now create new line
			set ws-next-line-seq += 1
			set sol-line-seq = ws-next-line-seq
			set sol-line-type = 'SN'
			set sol-short-ship-reason-code = '1'
			//
			do clib403-calculate-available
				parameter
					ws-find-stk
					so-whse-code
				returning
					i50lines-prom-available-stock
			//
			set sol-chg-type = stk-stock-status
			set sol-stk-unit-desc = stk-unit-desc
			if stk-price-per = 0
				set stk-price-per = 1
			endif
			set sol-price-uom = stk-price-per
			set sol-date-stamp = today()
			set sol-time-stamp = tod()
			set sol-ordered-qty = i50entry-sol-ordered-qty
			if i50lines-prom-available-stock > 0
				if i50lines-prom-available-stock >= sol-ordered-qty
					set sol-shipped-qty = sol-ordered-qty
				else
					set sol-shipped-qty = i50lines-prom-available-stock
					set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
				endif
			else
				set sol-backorder-qty = sol-ordered-qty
				set sol-shipped-qty = 0
			endif
			do i50entry-update-stock-file entry
			//
			do i50entry-calc-shipped-totals same
			do i50entry-calc-order-totals same
			set i50entry-qty = sol-shipped-qty
			do i50entry-get-conversion-factor
			do clib406-calc-line-cost
				parameters
					sol-item-cost
					sol-ordered-qty
					sol-shipped-qty
					sol-line-type
					sol-stk-unit-conversion
					sol-stk-unit-desc
					stk-price-per
				returning
					sol-ordered-line-cost
					sol-line-cost
			//
			insert sales-order-line
			//
			if sys-whse-detail-stream-update = YES
				do i50strupd-insert-reserve
					parameters so-order-no so-bo-suffix sol-line-seq stock-code
						so-whse-code sol-shipped-qty
			endif
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
		endif
	endconfirm
after
	set i50lines-flag = SPACES
endscreen //get-alternate-info-for-proforma ------------------------------------

// ------------------- End of proforma routines --------------------------------

procedure validate-stock-code
	local field
		lf-identifier-found			pic 9
		lf-need-reenter				pic x
		lf-valid-stock				type boolean
		lf-homed-out				type boolean
		lf-want-stock-figures		pic x
		lf-want-stock-disc			pic x
		lf-can-order-item			type boolean
		lf-found-apn				type boolean
		lf-found-stk-identifier		type boolean
		lf-is-specials-accepted		type boolean
		lf-saved-stock				like stock-code
		lf-cost						like whse-warehouse-cost
		lf-count					pic 9
		lf-item-substituted			type boolean
		lf-alternate-found			type boolean
		lf-multi-found				type boolean
		lf-stk-ident-found			like stock-code
		lf-avail-dedicated			like whse-qty-on-hand
		lf-cost-to-use				like whse-cost-to-use-flag
		lf-gl-coding-found          type boolean
		lf-whse-record-created		type boolean
		lf-tax-exemption-found		pic x
		lf-tax-exemption-code		like sote-tax-exemption-code
		lf-licence-code				like licence-code
		lf-found					type boolean
		lf-barcode-cust-param		pic x(40) type string occurs 9
		lf-barcode-cust-program		pic x(80)
		lf-refresh					pic x
		lf-do-stock-check			type boolean
		lf-coupon-ok				type boolean
		lf-i						pic 99
		lf-so-order-no-saved		like so-order-no
		lf-so-bo-suffix-saved		like so-bo-suffix
		lf-sol-line-seq-saved		like sol-line-seq
	//
	if (i50entry-transfer-between-whse = YES		// any transfer
		and sys-stk-whse-grp-transfers = YES)
	or (so-order-type-code = I5SO_TYPE_JOB_ISSUE
		and so-price-code != 'I'	)			// Inter Group Issue
	then
		set lf-is-specials-accepted = FALSE
	else
		set lf-is-specials-accepted = TRUE
	endif
	set reenter-needed = FALSE
	set ws-entered-stock-code = stock-code
	//
	if ws-order-flag = CUSTOMER
	and stock-code in {'D' "S" "C" "T" "B" "X" "O" "H" "K" "E" "P" "L" "M"
						'F' 'G' 'V' }
		message 'Not available'
		set reenter-needed = TRUE
		exit
	elseif so-order-type-code = I5SO_TYPE_TAX_ONLY
	and stock-code in {"S" "C" "X" "H" "K" "P" "L" 'F' 'G' "Y" "J" 'Z'}
		message 'Not available'
		set reenter-needed = TRUE
		exit
	elseif stock-code = 'A'
		do i50extras-del-address-instr
			parameters are 'DA' so-order-no so-bo-suffix
		set reenter-needed = TRUE
		exit
	elseif stock-code = 'I'
		do i50extras-del-address-instr
			parameters are 'DI' so-order-no so-bo-suffix
		set reenter-needed = TRUE
		exit
	elseif stock-code = 'V'
		spl 'stk/m4stkqenq.spl'
		set reenter-needed = TRUE
		exit
	elseif stock-code = 'P'
		set reenter-needed = TRUE
		set stk-accountcode = so-cust-code
		set stk-trans-type = 'SO'
		do i50extras-cust4-price-for-all-stk
			initial-mode is md-last-price
			if stock-code <> SPACES
				do prompt-for-stock-figures
					returning
						lf-homed-out
						lf-want-stock-figures
						lf-want-stock-disc
			else
				set lf-want-stock-figures = NO
			endif
			if not lf-homed-out and lf-want-stock-figures = 'Y'
				do i50lines-get-prior-sale-values
					parameters
						lf-want-stock-disc
				set ws-accept-stk-code = stock-code
			endif
		exit
	elseif stock-code = 'L'		//Special for review of serials
		spl 'so/m50extra'
			parameters are str(so-order-no) so-bo-suffix '-serial'
		set so-order-no = ws-saved-order-no
		set so-bo-suffix = ws-saved-bo-suffix
		set reenter-needed = TRUE
		exit
	elseif stock-code = 'R'
		set ws-so-date-stamp-to-be-updated = YES
		do b160-maintain-ref-inv-no
		get sales-order current lock
		set reenter-needed = TRUE
		exit
#ifndef ONLY_PSU_OPTIONS
	elseif stock-code = 'B'
		do a1015-stock-balance-summary-by-whse
		set reenter-needed = TRUE
		exit
#endif
	elseif stock-code = 'O'		// was X
		spl 'so/m50extra'
			parameters are str(so-order-no) so-bo-suffix
					'-totalcost' i50entry-show-costs
		set reenter-needed = TRUE
		exit
#ifndef ONLY_PSU_OPTIONS
	elseif stock-code = 'Y'
		set i5linecalc-dont-zero-disc = TRUE
		do setup-select-of-proforma-lines
		set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
		do b300-calc-total-amounts-update-header
		do display-totals
		set sol-line-seq = ws-line-seq
		// sales-order-line values were still set from inserting
		// the lines from the proforma
		//
		initialise sales-order-line
			leaving so-order-no so-bo-suffix sol-line-seq
		set reenter-needed = 4
		exit
#endif
#ifndef ONLY_PSU_OPTIONS
	elseif stock-code = 'W'
		set sys-tbl-type = ws-select-note-term-W
		do i85codes-table-help
		if sys-tbl-code != SPACES
			set sol-line-description = sys-tbl-code
		endif
		set sol-line-description = uppercase(sol-line-description)
		get system-table
			key is ws-select-note-term-W sol-line-description
		on error
			message "Term Notes not valid " sol-line-description
			set reenter-needed = TRUE
			exit
		endon
		//
		set sol-line-type = 'DN'
		set sol-print-line = 'Y'
		extract system-messages
			on index sys-message-type sys-message-code sys-message-line
			key is ws-select-note-term-W sol-line-description ZERO
			next same sys-message-type sys-message-code
		detail
			set sol-line-description = sys-message-text
			set stock-code = 'Terms'
			insert sales-order-line
			set sol-line-seq += 1
			set ws-line-seq += 1
		endextract
		set reenter-needed = TRUE
		set ws-note-type = 'W'
		set stock-code = SPACES
#endif
	elseif stock-code = 'T'
		if so-order-type-code != I5SO_TYPE_TAX_ONLY
			message 'Tax option not valid'
			set reenter-needed = TRUE
			exit
		endif
		do clibtaxso-get-sales-order-tax-exemption-for-display
			parameters
				so-order-no
				so-bo-suffix
			returning
				lf-tax-exemption-found
				lf-tax-exemption-code
		//
		if lf-tax-exemption-found = YES
			message "Tax exempt number quoted, can't apply any tax"
			set reenter-needed = TRUE
			exit
		endif
		if ws-order-type = "I"
			message "Only costs allowed on a project issue, no charges please"
			set reenter-needed = TRUE
			exit
		elseif so-order-type-code = I5SO_TYPE_TAX_ONLY
		and so-order-total-amount != ZERO
			//tax only orders for non sales tax give-aways
			message "Tax only order can't have totals"
			set reenter-needed = TRUE
			exit
		else
			set sol-line-type =  'ST'
			set sol-line-description = 'Affects Tax only'
		endif
	elseif stock-code = 'C'
		set sol-line-type = 'SC'
		set sol-chg-type = '0'
		if not ws-ok-to-post-income
			message ws-not-ok-to-post-income-message
			set reenter-needed = TRUE
			exit
		elseif so-order-type-code = I5SO_TYPE_ASSET_CAPITAL
			message "Can't enter charges on an asset capitalisation order"
			set reenter-needed = TRUE
			exit
		endif
	elseif stock-code = 'S'
		if not lf-is-specials-accepted
message "Specials not permitted on inter warehouse-group transactions"
				pause
			set reenter-needed = TRUE
			exit
		endif
		set sol-line-type = 'SS'
		if i5soldisc-trade-disc != 0
			set sol-disc-rate = i5soldisc-trade-disc
		else
			set sol-disc-rate = i5soldisc-general-disc-rate
		endif
		set sol-price-uom = 1		//used as default
		set i5pricemod-item-price = 0
		set sol-ordered-qty = 1
		if so-order-type-code = I5SO_TYPE_DIRECT_SHIP
			set sol-backorder-qty = 1
		else
			set sol-shipped-qty = 1
		endif
	elseif substring(stock-code,1,6) = 'H     '
		set sol-line-type = 'RN'
		set sol-disc-rate = i5soldisc-general-disc-rate
		set sol-price-uom = 1		//they are used
		set i5pricemod-item-price = 0
	elseif stock-code = 'RT'
	and so-order-type-code = I5SO_TYPE_SERVICE_CONTRACT
		set ws-saved-stock-code = stock-code
		message "Please enter the rate item code and details now"
		set reenter-needed = TRUE
		exit
#ifndef ONLY_PSU_OPTIONS
	elseif stock-code = 'U'
		set sol-line-type = 'RS'
		set sol-disc-rate = i5soldisc-general-disc-rate
		set sol-price-uom = 1		//they are used
		set i5pricemod-item-price = 0
#endif
	elseif stock-code = 'N'
		set sol-line-type = 'DN'
		set sol-print-line = 'Y'
		set ws-note-type = 'N'
	elseif stock-code = 'M'
		set sol-line-type = 'DN'
		set sol-print-line = 'N' //MEMO line is a Hidden line on invoice
		set ws-note-type = 'M'
	elseif stock-code = 'K'
		//Can not enter kit items to a sales order created through
		//quick pick slip issue of project transactions.
		if so-order-type-code = 'I' // Job Issue
		and so-order-source = 'J' // Job Costing
			set lf-gl-coding-found = FALSE
			extract sales-order-gl-coding
				on index so-order-no so-bo-suffix sol-line-seq so-gl-debit-credit-indicator
				key is so-order-no so-bo-suffix 0 SPACES
				next same so-order-no so-bo-suffix
			detail
				set lf-gl-coding-found = TRUE
				break
			end-extract
			if lf-gl-coding-found
				message "Can't enter kit items to a sales order created through Quick Pick Issue using Sales Order Edit."
				set reenter-needed = TRUE
				exit
			endif
		endif
		set i9enqbom-ask-for-whse = NO
		set i9enqbom-whse-code = so-whse-code
		do i9enqbom-enquiry
		set reenter-needed = TRUE
		if stock-code != SPACES
			position stock-warehouse-detail
				on index whse-code stock-code
				key is so-whse-code stock-code
			set ws-accept-stk-code = stock-code
		endif
		exit
	elseif stock-code = 'E'
		do i5stksup-enquire-stk-by-supplier
		if stock-code != SPACES
			get stock-master
			on error
			endon
		endif
		set reenter-needed = TRUE
		if stock-code != SPACES
			position stock-warehouse-detail
				on index whse-code stock-code
				key is so-whse-code stock-code
			set ws-accept-stk-code = stock-code
		endif
		exit
#ifndef ONLY_PSU_OPTIONS
	elseif stock-code = 'F'
		//don't want to suspend the order if have param of 'edit'
		if get-param(3) = '-d'
		and so-order-status != I5SO_BEING_ENTERED
			message "Must be in order entry to suspend orders"
			set reenter-needed = TRUE
			exit
		else
			//Suspend order
			save sales-order
			get sales-order lock
			restore sales-order
			set ws-old-audit-status = so-order-status
			message "Order suspended, enter 'F' at customer prompt to re-start"
			initialise sales-order-notes
					leaving so-order-no so-bo-suffix
			set so-note-type = '~'
			set so-user-code = 'SUSPEND'
			set so-note-sequence-no = ZERO
			set so-note-text = concat('SUSPENDED Type=' ws-order-type)
			set so-note-date  = today()
			insert sales-order-notes
			update sales-order
			do i5chgstat-update-so-order-status
				parameters
					so-order-no
				   	so-bo-suffix
				   	I5SO_ORDER_SUSPENDED
				   	ws-old-audit-status
					TRUE
				returning
					ws-result-code
		exit
	endif
#endif
	elseif stock-code in I5SOSTATII_ROUNDING_STK_ITEMS
		message "Rounding item code can't be used as normal item"
		set reenter-needed = TRUE
		exit
#ifndef ONLY_PSU_OPTIONS
	elseif stock-code = 'G'
		if so-order-source in {I5SOURCE_POS_LANE_ORDER I5SOURCE_INTERNAL_POS}
			do get-cash-customer once
			do display-totals
		else
			message "Get customer option only available for POS"
		endif
		set reenter-needed = TRUE
		exit
#endif
	elseif stock-code = 'D'
		set sys-tbl-type = ws-select-note-text-D
		do i85codes-table-help
		if sys-tbl-code != SPACES
			set sol-line-description = sys-tbl-code
		endif
		set sol-line-description = uppercase(sol-line-description)
		get system-table
			key is ws-select-note-text-D sol-line-description
		on error
			message "Text notes not valid " sol-line-description
			set reenter-needed = TRUE
			exit
		endon
		//
		set sol-line-type = 'DN'
		set sol-print-line = 'Y'
		extract system-messages
			on index sys-message-type sys-message-code sys-message-line
			key is ws-select-note-text-D sol-line-description ZERO
			next same sys-message-type sys-message-code
		detail
			set sol-line-description = sys-message-text
			set stock-code = 'Text'
			insert sales-order-line
			set sol-line-seq += 1
			set ws-line-seq += 1
		endextract
		set reenter-needed = TRUE
		set ws-note-type = 'D'
		set stock-code = SPACES
	else
		do i5posbcode-validate-barcode
			parameters
				stock-code
			returning
				lf-found
				lf-barcode-cust-program
				lf-barcode-cust-param[*]
				lf-refresh
		//
		if lf-found
			for lf-i = 1 to 9
				do check-special-codes-so
					parameters lf-barcode-cust-param[lf-i]
					returning lf-barcode-cust-param[lf-i]
			endfor
			//Run customised program
			set lf-so-order-no-saved = so-order-no
			set lf-so-bo-suffix-saved = so-bo-suffix
			set lf-sol-line-seq-saved = sol-line-seq
			//
			do i5posbcode-execute-program
				parameters
					lf-barcode-cust-program
					lf-barcode-cust-param[*]
				returning
					lf-do-stock-check
					lf-coupon-ok
			//
			// Above procedure can call standalone program
			// so need to reget currency on sales-order-line
			get sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key is lf-so-order-no-saved lf-so-bo-suffix-saved lf-sol-line-seq-saved
			//
			if lf-coupon-ok
				set reenter-needed = 4
				do b300-calc-total-amounts-update-header
				do display-totals
			else
				if lf-do-stock-check
					set reenter-needed = FALSE
				else
					set reenter-needed = TRUE
				endif
			endif
			//
			if not lf-do-stock-check
				//Do not check the stock item
				set stock-code = SPACES
				exit
			endif
		endif
		//
		if stock-code = SPACES
			set reenter-needed = TRUE
			exit
		endif
		set i50lines-scanned-item = FALSE
		get stock-master
		on error
			if sys-default-stk-enquiry-mode = 'A'
				set lf-found-apn = FALSE
				if i50entry-transfer-between-whse = yes
					extract stock-master
						on index stk-apn-number
						key is stock-code
						next same stk-apn-number
						when stk-issue-control-code = 'M'
					detail
						set lf-found-apn = TRUE
						break
					endextract
				endif
				if lf-found-apn = FALSE
					get stock-master
						on index stk-apn-number
						key is stock-code
					on error
					endon
					if ws-order-flag = CUSTOMER
						do i50stk-enquire-by-apn
							i81modes-md-select find search
					else
						do i50stk-enquire-by-apn
					endif
					if stock-code != spaces
						set ws-accept-stk-code = stock-code
					endif
				endif
				set reenter-needed = TRUE
				exit
			elseif sys-default-stk-enquiry-mode = 'P'
				set i50stkenq-order-flag = ws-order-flag
				set i50stkenq-mode-type = ws-mode-type
				do i50stk-stock-enquiry
				set ws-accept-stk-code = stock-code
				set reenter-needed = TRUE
				exit
			elseif sys-default-stk-enquiry-mode = 'L'
				set scp-component-code = stock-code		// so stock-code not lost
				set lf-found-apn = FALSE
				if i50entry-transfer-between-whse = yes
					extract stock-master
						on index stk-apn-number
						key is stock-code
						next same stk-apn-number
						when stk-issue-control-code = 'M'
					detail
						set lf-found-apn = TRUE
						break
					endextract
				endif
				if lf-found-apn = FALSE
					get stock-master
						on index stk-apn-number
						key is stock-code
					on error
						set lf-identifier-found = FALSE
						set lf-count = ZERO
						open tmp-stock-identifiers temporary truncate
						extract stock-conversion-procedure
							on index scp-component-code
							key is scp-component-code
							next same scp-component-code
							when ((scp-accountcode = so-cust-code)
							or    (scp-accountcode =
								     i5pricemod-acnt-to-use-for-price-lookup)
							or    (scp-accountcode = SPACES))
						detail
							set lf-saved-stock = scp-stock-code
							set lf-identifier-found = TRUE
							set lf-count += 1
							set tmp-stock-code-ident = scp-stock-code
							insert tmp-stock-identifiers
							on error
								// do not insert if exists
							endon
						endextract
						if lf-identifier-found
						and lf-count < 2
							get stock-master
								key is lf-saved-stock
							on error
								message "Alternative item not valid "
									scp-stock-code
								set reenter-needed = TRUE
								exit
							endon
						elseif lf-identifier-found
						and lf-count >= 2
							do display-multi-stock-identifier
									returning lf-stk-ident-found
							get stock-master
								key is lf-stk-ident-found
							on error
								message "Alternative item not valid "
									lf-stk-ident-found
								set reenter-needed = TRUE
								exit
							endon
							close tmp-stock-identifiers
						elseif not lf-identifier-found
							do i4altitem-locate-via-alternate
								parameters stock-code TRUE FALSE TRUE
								returning stock-code lf-alternate-found
									lf-multi-found
							if not lf-alternate-found
								message-box param-text("Item code <<P1>> not valid", stock-code)
									title "Item Code Invalid"
									icon is MSG_BOX_STOP
									message-buttons MSG_BOX_OK
									tag 1423
								set reenter-needed = TRUE
								exit
							endif
						endif
					else
						//found it by apn, so now get currency
						//on normal key and continue
						get stock-master
						on index stock-code
							key is stock-code
					endon
				else
					get stock-master
						on index stock-code
						key is stock-code
				endif
			elseif sys-default-stk-enquiry-mode = 'D'
				do  m4enqstkkey-enquire-on-stock-avail-n-price-with-key-words
					parameters
						stock-code 				// 1. Stock Code/Keyword
						so-order-no
						so-bo-suffix
						sol-line-seq
						M4ENQDEF_KEYWORD_LOOKUP // 2. Literal "-keyword"
						'Y' 			// 3. direct-lookup
						SPACES			// 4. display-key-word
						FALSE 			// 5. show-boms-only (boolean)
						FALSE 			// 6. no-review-for-one (boolean)
						SPACES 			// 7. display "not found message"
						stock-code 		// 8. Stock-key-word. x(15)
						TRUE		    // 9. Show additional columns
						so-whse-code    //10. need to find 'Available'
						so-cust-type    //11. need to find 'Avg cost'
						so-price-code   //12. need to find 'Avg Cost'
						TRUE			//13. current on sales-order
					returning
						stock-code
				//
				set ws-accept-stk-code = stock-code
				set reenter-needed = TRUE
				exit
			elseif sys-default-stk-enquiry-mode in { 'M' 'N' }
				set ws-saved-stock-code = stock-code
				if BMSDEF_STYLE_SIZE between 2 and (i8govtbl-stock-code-size - 1)
				and (strlen(stock-code) = BMSDEF_STYLE_SIZE
				or strlen(stock-code) = BMSDEF_STYLE_AND_COLOUR_SIZE)
					get stock-master next
						on index stock-code
					on error
						set stk-issue-control-code = SPACES
						set stk-packaging-flag = SPACES
						set stk-licences-rebate-flag = SPACES
						set stk-outside-supplier-flag = SPACES
						set stk-measurement-flag = SPACES
					else
						if BMSDEF_STYLE_PART(stock-code)
							= BMSDEF_STYLE_PART(ws-saved-stock-code)
							//this could be valid style colour
						else
							set stk-issue-control-code = SPACES
						endif
					endon
				else
					set stk-issue-control-code = SPACES
				endif
				if stk-issue-control-code in { 'S' 'U' 'A'}
					do get-style-colour-size-item
					set reenter-needed = TRUE
					exit
				endif
				if sys-default-stk-enquiry-mode = 'N'
					if i50entry-sales-credit = YES
						//Don't do it for credits
						set stock-code = SPACES
					else
						//get the stock code by selecting a serial number!
						do clibstk-check-for-multiple-serials
							parameters
								ws-accept-stk-code
							returning
								ws-accept-stk-code
						set stock-code = ws-accept-stk-code
					endif
					if stock-code != SPACES
						get stock-master
							on index stock-code
							key is stock-code
						on error
							message-box param-text("Item code <<P1>> not valid", stock-code)
								title "Item Code Invalid"
								icon is MSG_BOX_STOP
								message-buttons MSG_BOX_OK
								tag 1424
							set reenter-needed = TRUE
							exit
						endon
						set i50lines-scanned-item = TRUE
					endif
				endif
				if sys-default-stk-enquiry-mode = 'M'
				or (sys-default-stk-enquiry-mode = 'N'
				and stock-code = SPACES)
					// serial not found so reset original and
					// continue checking
					set stock-code = ws-saved-stock-code
					set scp-component-code = stock-code// so stock-code not lost
					//
					set lf-found-apn = FALSE
					set lf-found-stk-identifier = FALSE
					if sys-stk-key-words-used != '5'
						//Need to check here for phones with same apn
						if i50entry-transfer-between-whse = yes
							extract stock-master
								on index stk-apn-number
								key is stock-code
								next same stk-apn-number
								when stk-issue-control-code = 'M'
							detail
								set lf-found-apn = TRUE
								break
							endextract
						endif
						if lf-found-apn = FALSE
							get stock-master
								on index stk-apn-number
								key is stock-code
							on error
							else
								set lf-found-apn = TRUE
							endon
						endif
					endif
					if not lf-found-apn
						set lf-count = ZERO
						open tmp-stock-identifiers temporary truncate
						extract stock-conversion-procedure
							next same scp-component-code
							on index scp-component-code
							key is scp-component-code
							when scp-accountcode = so-cust-code
							or scp-accountcode =
								i5pricemod-acnt-to-use-for-price-lookup
							or scp-accountcode = SPACES
						detail
							set lf-saved-stock = scp-stock-code
							set lf-found-stk-identifier = TRUE
							set lf-count += 1
							set tmp-stock-code-ident = scp-stock-code
							insert tmp-stock-identifiers
							on error
								// do not insert if exists
							endon
						endextract
						if lf-found-stk-identifier
						and lf-count < 2
							get stock-master
								key is lf-saved-stock
							on error
								message "Alternative item not valid "
									scp-stock-code
								set reenter-needed = TRUE
								exit
							else
								if scp-conversion-rule = '##'
									set ws-original-code =
										ws-saved-stock-code
								endif
							endon
							set reenter-needed = 9
						elseif lf-found-stk-identifier
						and lf-count >= 2
							do display-multi-stock-identifier
									returning lf-stk-ident-found
							get stock-master
								key is lf-stk-ident-found
							on error
								message "Alternative item not valid "
									lf-stk-ident-found
								set reenter-needed = TRUE
								exit
							else
								// just in case generic or child record found
								// and Bill-to has secondary conversion
								get stock-conversion-procedure
								on index scp-accountcode scp-stock-code
									scp-sequence-no
								key is
									i5pricemod-acnt-to-use-for-price-lookup
									lf-stk-ident-found 1
								on error
								else
									if scp-conversion-rule = '##'
										set ws-original-code = ws-saved-stock-code
									endif
								endon
							endon
							set reenter-needed = 9
							close tmp-stock-identifiers
						elseif not lf-found-stk-identifier
							do i4altitem-locate-via-alternate
								parameters stock-code TRUE FALSE TRUE
								returning stock-code lf-found-apn
									lf-multi-found
							if lf-found-apn
								set reenter-needed = 9
							endif
						endif
					endif
					if lf-found-apn
						set reenter-needed = 9
					endif
					if reenter-needed = 9		//continue with validation
						set reenter-needed = FALSE
					else
						//continue with the search for a item code!!
						do m4enqstkkey-enquire-on-stock-avail-n-price-with-key-words
							parameters
								ws-accept-stk-code		//1. Stock Code/Keyword
								so-order-no
								so-bo-suffix
								sol-line-seq
								M4ENQDEF_KEYWORD_LOOKUP //2. Literal "-keyword"
								'S' 			//3. direct-lookup
								SPACES			//4. display-key-word
								FALSE 			//5. show-boms-only (boolean)
								TRUE 			//6. no-review-for-one (boolean)
								SPACES 			//7. display "not found message"
								SPACES 			//8. Stock-key-word. x(15)
								TRUE		    // 9. Show additional columns
								so-whse-code    //10. need to find 'Available'
								so-cust-type    //11. need to find 'Avg cost'
								so-price-code   //12. need to find 'Avg Cost'
								TRUE			//13. current on sales-order
							returning
								stock-code
						//
						if stock-code > SPACES
							get stock-master lookup
								on index stock-code
								key stock-code
							on error
								set stock-code = SPACES
							endon
						endif
						if stock-code > SPACES
							set ws-accept-stk-code = stock-code
							if stk-issue-control-code in { 'S' 'U' 'A'}
							and (strlen(stock-code) = BMSDEF_STYLE_SIZE
							or strlen(stock-code) = BMSDEF_STYLE_AND_COLOUR_SIZE)
							or stk-issue-control-code = 'A'
								//Go straight to SCS entry as done in the
								//normal item entry. This functionality was
								//initially removed under SMR 59512.
								//validation is also added as per normal
								//item entry.
								push deb-master
								do clibsales-check-stock-restrictions
									parameters are
										so-cust-code
										bill-to
										dr-company-mask
										so-order-type-code
										so-order-source
										stock-code
										stock-group
										stk-user-group[2]
										sales-order.*
										FALSE
									returning
										lf-can-order-item
								pop deb-master
								if not lf-can-order-item
									message-box "This item code not available for sale to this account"
										title "Stock Code"
										message-button MSG_BOX_OK
										icon MSG_BOX_STOP
										tag 100
								else
									do get-style-colour-size-item
								endif
							endif
						else
							set stock-code = ws-saved-stock-code
							position stock-warehouse-detail
								on index whse-code stock-code
								key is whse-code stock-code
						endif
						set reenter-needed = TRUE
						exit
					endif
				endif				// end test for random/barcode lookup.
			else
				position stock-warehouse-detail
					on index whse-code stock-code
					key is whse-code stock-code
				message-box param-text("Item code <<P1>> not valid for warehouse <<P2>>", stock-code,whse-code)
					title "Item Code Invalid"
					icon is MSG_BOX_STOP
					message-buttons MSG_BOX_OK
					tag 1425
				set reenter-needed = TRUE
				exit
			endif
		endon
		//
		if stk-stock-status = 'K' // Kit Item
		and so-order-type-code = 'I' // Job Issue
		and so-order-source = 'J' // Job Costing
			set lf-gl-coding-found = FALSE
			extract sales-order-gl-coding
				on index so-order-no so-bo-suffix sol-line-seq so-gl-debit-credit-indicator
				key is so-order-no so-bo-suffix 0 SPACES
				next same so-order-no so-bo-suffix
			detail
				set lf-gl-coding-found = TRUE
				break
			end-extract
			if lf-gl-coding-found
				message "Can't enter kit items to a sales order created through Quick Pick Issue using Sales Order Edit."
				set reenter-needed = TRUE
				exit
			endif
		endif
		do i4stksub-check-stk-substitution
			parameters so-cust-code stock-code
			returning lf-item-substituted stock-code
		if lf-item-substituted
			message "Automatic Stock Substitution has been applied"
		endif
		//
		if stk-stock-status not in {"L" "Z"}
		and not	ws-ok-to-post-cost
			message ws-not-ok-to-post-cost-message
			set reenter-needed = TRUE
			exit
		elseif not lf-is-specials-accepted
		and stk-stock-status in {"L" "Z"}
		and stk-issue-control-code != "A"
			message "Specials not permitted on transfers or inter whse-group issues" pause
			set reenter-needed = TRUE
			exit
		elseif ws-to-whse-type = IWTYPEDEF_LOAN_DEMO_WHSE
		and stk-serialized-flag <> YES
			message "Cannot transfer non serialised stock to a loan warehouse"
			set reenter-needed = TRUE
			exit
		endif
		set entered-stock-code-status = stk-stock-status
		set lf-valid-stock = FALSE
		if stk-condition-code = 'O' and stk-apn-number != SPACES
			get stock-master lookup
				on index stock-code
				key is stk-apn-number
			on error
			else
				set lf-valid-stock = TRUE
			endon
		endif
		if stk-stock-status = 'X'
		or lf-valid-stock = TRUE
			do i50entry-dereference-stock-code
				returning reenter-needed
					ws-need-to-insert-note
					ws-orig-stock-code
			if reenter-needed
				exit
			endif
			if ws-orig-stock-code != stock-code
				message-box param-text('Using alternative stock <<P1>>',stock-code)
					title "Using Alternative Stock"
					icon is MSG_BOX_STOP
					message-buttons MSG_BOX_OK
					tag 1426
			endif
		else
			set ws-need-to-insert-note = FALSE
		endif
		if stk-stock-status = 'D'
		or stk-condition-code = 'D'
			position stock-notes
				on index stock-code stock-note-type stock-note-sequence
				key is stock-code stock-note-type stock-note-sequence
				get stock-notes
					on index stock-code stock-note-type
							stock-note-sequence
					next same stock-code
					on error
						message 'This stock has been flagged as deleted'
						set reenter-needed = TRUE
						exit
					else
						message stock-note
						set reenter-needed = TRUE
						exit
					endon
		endif
		if stk-condition-code = 'I'
			message 'This item code has been flagged as inactive'
			set reenter-needed = TRUE
			exit
		elseif stk-condition-code = "T"
			message-box 'WARNING: This item code is flagged as discontinued'
				title "Discontinued Item"
				message-buttons MSG_BOX_OK
				default is MSG_BOX_OK
				icon is MSG_BOX_WARNING
				tag 3
				optional
		elseif stk-condition-code = "O"
			if ws-orig-whse-bo-flag not = '0'
				message-box 'WARNING: This item is obsolete.'
					title "Obsolete Item"
					message-buttons MSG_BOX_OK
					default is MSG_BOX_OK
					icon is MSG_BOX_WARNING
					tag 1
					optional
			else
				message-box 'WARNING: This item code is flagged as obsolete'
					title "Obsolete Item"
					message-buttons MSG_BOX_OK
					default is MSG_BOX_OK
					icon is MSG_BOX_WARNING
					tag 2
					optional
			endif
		elseif stk-condition-code = 'P'
			if i50entry-transfer-between-whse = YES
				message 'WARNING: This item is part of a packaged kit' pause
			else
				message 'This item is part of a packaged kit and thus cannot be sold separately' pause
				set reenter-needed = TRUE
				exit
			endif
		elseif stk-condition-code = 'J'
		and i50entry-forward-order = NO
			message 'WARNING: Restricted to forward orders if no stock available'
		elseif stk-issue-control-code in { 'S' 'U' 'A'}
		and (strlen(stock-code) = BMSDEF_STYLE_SIZE
				or strlen(stock-code) = BMSDEF_STYLE_AND_COLOUR_SIZE)
			or stk-issue-control-code = 'A'
			save deb-master
			do clibsales-check-stock-restrictions
				parameters are
					so-cust-code
					bill-to
					dr-company-mask
					so-order-type-code
					so-order-source
					stock-code
					stock-group
					stk-user-group[2]
					sales-order.*
					FALSE
				returning lf-can-order-item
			restore deb-master
			if not lf-can-order-item
				message-box "This item code not available for sale to this account"
					title "Stock Code"
					message-button MSG_BOX_OK
					icon MSG_BOX_STOP
					tag 2
				set reenter-needed = TRUE
				exit
			endif
			do get-style-colour-size-item
			set reenter-needed = TRUE
			exit
		endif
		if (stk-condition-code = 'N'
		or stk-stock-status = 'N')
		and i50entry-sales-credit != YES
		and so-order-type-code != I5SO_TYPE_RMA
			message 'Item not available for sales ' stk-description
			set reenter-needed = TRUE
			exit
		elseif stk-stock-status = 'R'
		and so-order-status not in I5SOSTATII_OUTSTANDING_TRANSFERS_STATII
		and so-order-status != I5SO_FORWARD_TRANSFER
		and so-order-type-code != I5SO_TYPE_JOB_ISSUE
			message 'Item code is a raw material, not for sale directly'
			set reenter-needed = TRUE
			exit
		endif
		// Check if it's on contract
		if i50lines-contracts-used
			save sales-order
			save sales-order-line
			set i50lines-licence-qty-remaining = 0
			set i50lines-licence-start-date = so-order-date
			set i50lines-found-contract = FALSE
			get sales-order
				on index so-order-no so-bo-suffix
				key is ws-proforma-order-no ws-proforma-bo-suffix
			on error
			else
				set i50lines-found-contract = TRUE
				set ws-limit-contract-amount = so-order-total-amount
					- so-order-total-shipped-amount
				set ws-limit-contract-qty = so-order-total-charges
					- so-order-total-shipped-cost
				set ws-contract-price = 0
				extract sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix 0
					next same so-order-no so-bo-suffix
					where stock-code = ws-entered-stock-code
					and (sol-ordered-qty - sol-shipped-qty) > 0
				detail
					set i50lines-licence-qty-remaining +=
						(sol-ordered-qty - sol-shipped-qty)
						* sol-stk-unit-conversion
					set ws-contract-price = sol-item-price
					set ws-contract-disc-rate = sol-disc-rate
					if sol-price-overide-flag in {I5SOSTATII_ALT_PRICE
								I5SOSTATII_ALT_OVER_PRICE}
						set ws-contract-price /= sol-stk-unit-conversion
					endif
				endextract
			endon
			restore sales-order
			restore sales-order-line
			get sales-order lock
			get sales-order-line lock
			on error
			endon
			restore sales-order
			restore sales-order-line
			if i50lines-licence-qty-remaining = 0
			and i50lines-found-contract
			and i50lines-contracts-used = 1
				message "Item not on contract, can't select"
				set reenter-needed = TRUE
				exit
			endif
		endif
		//
		save deb-master
		do clibsales-check-stock-restrictions
			parameters are
				so-cust-code
				bill-to
				dr-company-mask
				so-order-type-code
				so-order-source
				stock-code
				stock-group
				stk-user-group[2]
				sales-order.*
				FALSE
			returning lf-can-order-item
		if lf-can-order-item
			//For colour/size combination code required to check on its parent style
			if stk-issue-control-code in {'S' 'U' 'A'}
			and strlen(stock-code) > BMSDEF_STYLE_SIZE
			and BMSDEF_COLOUR_PART(stock-code) <> SPACES
				do clibsales-check-stock-restrictions
					parameters are
						so-cust-code
						bill-to
						dr-company-mask
						so-order-type-code
						so-order-source
						BMSDEF_STYLE_PART(stock-code)
						stock-group
						stk-user-group[2]
						sales-order.*
						FALSE
					returning lf-can-order-item
			endif
		endif
		restore deb-master
		if not lf-can-order-item
			message 'This item code is not available for sale to this account'
			set reenter-needed = TRUE
			exit
		endif
		if ws-stock-identifiers = YES
			set ws-found-record = FALSE
			extract stock-conversion-procedure
				on index scp-accountcode scp-stock-code scp-sequence-no
				key is i5pricemod-bill-to stock-code
				next same scp-accountcode scp-stock-code
			detail
				if scp-component-code != SPACES
					set ws-found-record = TRUE
					break
				endif
			endextract
			if ws-found-record = FALSE
				message 'WARNING: No stock identification record exists'
				pause
			endif
		endif
		if sys-licence-type = '5'
		and stk-licences-rebate-flag = 'L'
			//Some item's licence code match with the customer's
			//licence code
			extract stock-licences-required
				on index stock-code licence-code licence-stk-start-date
				key is stock-code SPACES ZERO
				next same stock-code
			detail
				set lf-licence-code = licence-code
				//check every stock licence
				set ws-agent-has-licence = FALSE
				//first check the licence of the bill-to customer
				do check-valid-licence
					parameters bill-to
					           licence-code
							   so-order-date
							   "code"
					returning ws-agent-has-licence
				// if no licence for the bill-to customer then
				// check for the so customer
				if not ws-agent-has-licence
					do check-valid-licence
						parameters so-cust-code
								   licence-code
								   so-order-date
								   "code"
						returning ws-agent-has-licence
				endif
				if not ws-agent-has-licence
					//Some item's licence code match with the customer's
					//licence type
					//first check the licence of the bill-to customer
					do check-valid-licence
						parameters bill-to
								   licence-code
								   so-order-date
								   "type"
						returning ws-agent-has-licence
					// if no licence for the bill-to customer then
					// check for the so customer
					if not ws-agent-has-licence
						do check-valid-licence
							parameters so-cust-code
									   licence-code
								       so-order-date
								      "type"
							returning ws-agent-has-licence
					endif
				endif
				if ws-agent-has-licence
					// found a customer licence that matches the stock licence
					break
				endif
			endextract
			if not ws-agent-has-licence
				message 'This account requires a licence for licence goods '
				set reenter-needed = TRUE
				exit
			endif
		endif
		if sys-licence-type = '2'
		and stk-licences-rebate-flag = 'L'
			if ws-agent-sale
			and ws-agent-wears-debt
				extract stock-licences-required
					on index stock-code licence-code licence-stk-start-date
					key is stock-code SPACES ZERO
					next same stock-code
				detail
					//only look at the 1st licence
					set i50lines-licence-problem-flag = YES
					break
				endextract
				set ws-agent-has-licence = TRUE
				if i50lines-licence-problem-flag = YES
					set i50lines-licence-problem-flag = NO
					//Work from bill-to account
					set ws-agent-has-licence = FALSE
					extract deb-licences-and-permits
						on index accountcode licence-code
						key is bill-to licence-code
						next same accountcode licence-code
					detail
						if licence-expiry-date != 0
							if so-order-date between licence-start-date
							and licence-expiry-date
								set ws-agent-has-licence = TRUE
								break
							else
								break
							endif
						else
							set ws-agent-has-licence = TRUE
							break
						endif
					endextract
				endif
			endif
			if ws-order-lines-type = 'N'
			and ws-agent-sale
			and not ws-agent-has-licence
				message "Can't mix licensed and normal items on sale"
				set reenter-needed = TRUE
				exit
			elseif ws-agent-sale
			and ws-order-lines-type != 'L'
				set ws-order-lines-type = 'L'
			endif
			set i50lines-licence-problem-flag = NO
			extract stock-licences-required
				on index stock-code licence-code licence-stk-start-date
				key is stock-code SPACES ZERO
				next same stock-code
			detail
				//only look at the 1st licence
				set i50lines-licence-problem-flag = YES
				break
			endextract
			if i50lines-licence-problem-flag = YES
				set i50lines-licence-problem-flag = NO
				extract deb-licences-and-permits
					on index accountcode licence-code
					key is so-cust-code licence-code
					next same accountcode licence-code
				detail
					if licence-expiry-date != 0
						if so-order-date between licence-start-date
						and licence-expiry-date
							set i50lines-licence-problem-flag = YES
							break
						else
							set i50lines-licence-problem-flag = 'E'
							break
						endif
					else
						set i50lines-licence-problem-flag = YES
						break
					endif
				endextract
				if i50lines-licence-problem-flag = NO
					message 'This account requires a licence for ' licence-code
					set reenter-needed = TRUE
					exit
				elseif i50lines-licence-problem-flag = 'E'
					message 'Licence for this account has expired ' licence-start-date ' - ' licence-expiry-date
					set reenter-needed = TRUE
					exit
				endif
			endif
		elseif sys-licence-type = '2'
		and ws-agent-sale
			if ws-order-lines-type = 'L'
			and not ws-agent-has-licence
				message "Cannot mix licensed and normal items on sale"
				set reenter-needed = TRUE
				exit
			else
				set ws-order-lines-type = 'N'
			endif
		endif
		//
		if ws-mode-type in {'E','D'}
			set sol-stk-unit-desc = stk-unit-desc
		endif
		//
		if ws-saved-stock-code = "RT"
		and so-order-type-code = I5SO_TYPE_SERVICE_CONTRACT
			if stk-stock-status not in {'L','Z'}
				message "Service rate stock must be of type Z or L, not stocked"
				set reenter-needed = TRUE
				exit
			else
				set sol-line-type = 'RN'
			endif
			set ws-saved-stock-code = SPACES
		else
			set sol-line-type = 'SN'
		endif
		//
		if stk-stock-status in {'L','Z'}
			if sol-line-type = "RN"
			and so-order-type-code = I5SO_TYPE_SERVICE_CONTRACT
				if stk-std-cost != 0
					message "WARNING: Cost on rate line is not zero, it should be"
				endif
				set sol-ordered-qty = 0
				set sol-shipped-qty = 0
			else
				set sol-ordered-qty = 1
				set sol-shipped-qty = 1
			endif
		else
			if i50entry-transfer-between-whse = YES
				do clib407-get-cost-method
					parameters
						stock-code
						so-whse-to
						sys-cost-to-use
					returning
						lf-cost-to-use
				//
				get stock-warehouse-detail
					on index whse-code stock-code
					key is so-whse-to stock-code
				on error
					if lf-cost-to-use = 'W'
					and sys-stk-whse-grp-transfers = YES
						do determine-warehouse-cost
							parameters are stock-code so-whse-to
								so-whse-code
							returning lf-cost
						initialize stock-warehouse-detail
							leaving stock-code
						set whse-code = so-whse-to
						set whse-warehouse-cost = lf-cost
					else
						initialize stock-warehouse-detail
							leaving stock-code
						set whse-code = so-whse-to
					endif
					set whse-drp-replenish-multiple = 1
					//
					// Create a new stock-warehouse record
					do clibstk-create-stock-warehouse-detail
						parameters stock-warehouse-detail.*
						returning stock-warehouse-detail.* lf-whse-record-created
				endon
				if stk-condition-code = 'R'
				//must have stock in the to whse
				//otherwise can return stock
					do i50lines-determine-available-stock
						parameters so-order-no so-bo-suffix sol-line-seq
							sol-line-type sol-ordered-qty i5pricemod-bill-to
							whse-code stock-code
							ws-van-id
							TRUE	//Indicative available stock.
							sol-stk-unit-desc
							sol-stk-unit-conversion
						returning ws-available-stk lf-avail-dedicated
							i50entry-dedicated-line
							sol-stk-unit-desc		// used to display available
							sol-stk-unit-conversion	// used to display available
					set ws-to-whse-avail-stk = ws-available-stk
				endif
			endif
			get stock-warehouse-detail
				on index whse-code stock-code
				key is so-whse-code stock-code
			on error
				do get-warehouse-record
				if reenter-needed = TRUE
					exit
				endif
			endon
		endif
		do a900-get-whse-price-rec
		if not ws-found-stk-price
			set reenter-needed = TRUE
			exit
		endif
		//
		//get rest of stock information
		if stk-price-per = 0
			set stk-price-per = 1
		endif
		set sol-price-uom = stk-price-per
		do i5solicost-get-cost		//position after setting of sol-per
		//
		do clib407-get-cost-method
			parameters
				stock-code
				so-whse-code
				sys-cost-to-use
			returning
				lf-cost-to-use
		//
		if sol-item-cost = 0
		and sys-order-hist-used in {'S' 'R'}
		and lf-cost-to-use = "R"
		and sol-line-type = "SN"
		and i50entry-sales-credit != YES
		and i50entry-return-authorisation = NO
		and stk-stock-status <> 'K'
			message "Zero cost item not allowed to be used"
			set reenter-needed = TRUE
			exit
		endif
		save deb-master
		get deb-master
			on index accountcode
			key is i5soldisc-acnt-to-use-for-cgd
		on error
			restore deb-master
		endon
		do i5soldisc-get-cust-disc
		restore deb-master
		if sys-cgd-flg = 'Z'
		and stock-price-disc-array[4] = 1
			message "Account is not permitted to purchase this item"
			set reenter-needed = TRUE
			exit
		endif
		if stk-stock-status in {'L','Z'}
			set ws-available-stk = 0
		else
			do i50lines-determine-available-stock
				parameters so-order-no so-bo-suffix sol-line-seq
					sol-line-type sol-ordered-qty i5pricemod-bill-to
					so-whse-code stock-code
					ws-van-id
					TRUE	//Indicative available stock.
					sol-stk-unit-desc
					sol-stk-unit-conversion
				returning ws-available-stk
					lf-avail-dedicated
					i50entry-dedicated-line
					sol-stk-unit-desc			// used to display available
					sol-stk-unit-conversion		// used to display available
		endif
		//
		if stk-issue-control-code = 'F'
			spl "so/m50extra" parameters "-genbom" stock-code
				returning lf-need-reenter
				leave-files-open
			if lf-need-reenter = 'Y'
				message 'No sale for generic product'
				set reenter-needed = TRUE
				exit
			endif
		endif
		// For direct ship order, check if there is a supplier available for
		// the creation of purchase order.
		if so-order-type-code = I5SO_TYPE_DIRECT_SHIP
		and stk-stock-status != 'K'
			set i4bestsupp-skip-on-hold-supplier = TRUE
			do i4bestsupp-determine-best-supplier
			set i4bestsupp-skip-on-hold-supplier = FALSE
			if not i4bestsupp-valid-supplier
				message-box param-text("No available supplier found for item: <<P1>>",stock-code)
					title "No Available Supplier Found"
					icon is MSG_BOX_STOP
					message-buttons MSG_BOX_OK
					tag 1427
				set reenter-needed = TRUE
				exit
			endif
		endif
		//
		if ws-user-lines-stk-val-prog <> SPACES
			spl ws-user-lines-stk-val-prog
				parameters '-soline'
						str(so-order-no)
						so-bo-suffix
						stock-code
				returning reenter-needed
		endif
	endif
endprocedure //validate-stock-code ---------------------------------------------

procedure check-valid-licence
	parameters
		lp-accountcode			like accountcode
		lp-licence-code			like licence-code
		lp-order-date			like so-order-date
		lp-comparison-type		pic x(4)
	returning
		lr-has-licence			type boolean
	//
	if lp-comparison-type = "code"
		extract deb-licences-and-permits
			on index accountcode licence-code
			key is lp-accountcode lp-licence-code
			next same accountcode licence-code
		detail
			if licence-expiry-date != 0
				if lp-order-date between licence-start-date
				and licence-expiry-date
					set lr-has-licence = TRUE
					break
				endif
			elseif lp-order-date > licence-start-date
				set lr-has-licence = TRUE
				break
			endif
		endextract
	elseif lp-comparison-type = "type"
		extract deb-licences-and-permits
			on index accountcode licence-code
			key is lp-accountcode SPACES
			next same accountcode
			where licence-type = lp-licence-code
		detail
			if licence-expiry-date != 0
				if lp-order-date between licence-start-date
				and licence-expiry-date
					set lr-has-licence = TRUE
					break
				endif
			elseif lp-order-date > licence-start-date
				set lr-has-licence = TRUE
				break
			endif
		endextract
	endif
endprocedure //check-valid-licence----------------------------------------------

screen prompt-for-stock-figures
	returning
		lr-homed-out  					type boolean
		lr-want-stock-figures			pic x
		lr-want-stock-disc			pic x
	//
	window @17,29 to @23,80
		title is "Stock Quantities and Price"
	allowed entry
	form-entry
before
	box @17,29 to @22,80
		title SPACES
	display "Return Item Quantities and Price:" @19,30
	display "Return Item Discount            :" @20,30
	set lr-want-stock-figures = 'N'
	set lr-want-stock-disc = 'N'
detail
	accept lr-want-stock-figures @19,64
		help "Y-Return figures, N-Do not return figures."
		allow 'Y' 'N'
		default lr-want-stock-figures
		uppercase
	accept lr-want-stock-disc @20,64
		help "Y-Return figures, N-Do not return figures."
		when lr-want-stock-figures = YES
		show-value
		allow 'Y' 'N'
		default lr-want-stock-disc
		uppercase
	confirm auto
	confirmed
		set lr-homed-out = FALSE
		exit
	endconfirm
after
	set lr-homed-out = TRUE
endscreen //prompt-for-stock-figures -------------------------------

screen display-multi-stock-identifier
returning
	lr-stock-code				like stock-code
	//
	window @10,65 to @23,80
		title is "Select Item Code"
	primary tmp-stock-identifiers
	datagrid occurs 12
	review-from-start
	allow md-select-stock-ident search
detail
	accept tmp-stock-code-ident @10,66
		title is "Item Code"
		help "Item Code"
	confirm auto
	confirmed
		if screenmode() = md-select-stock-ident
			set lr-stock-code = tmp-stock-code-ident
			exit
		endif
	endconfirm
after
	set lr-stock-code = SPACES
endscreen // display-multi-stock-identifier -----------------------------------

procedure get-style-colour-size-item
	local field
		lf-audit-line-addition			pic x
		lf-new-zero-line				like sol-line-seq
		lf-zero-price-ok				type boolean
		lf-soln-text					like soln-text
	//
	set lf-audit-line-addition = NO
	set ws-transfer-order = SPACES
	if i50entry-transfer-between-whse = YES
		set ws-transfer-order = '-transfer'
	endif
	push sales-order-line
	open tmp-line temporary truncate
	extract sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix 0
		next same so-order-no so-bo-suffix
		where sol-line-type = "SN"
	detail
		set tmp-line-seq = sol-line-seq
		insert tmp-line
	endextract
	pop sales-order-line
	if screenmode() = entry
	and (ws-process-mode = EDIT or
		(ws-process-mode = ENTRY and ws-order-flag = CUSTOMER))
		//Audit the same way as normal item code
		set lf-audit-line-addition = YES
	endif
	if ws-negate-tally-qty
		// Pass in '-negate' to request sign negation of line ordered
		// quantity of tally item for return management in order to
		// align with the behaviour of normal stock item.
		spl 'so/m50lengths'
				parameters are str(so-order-no) so-bo-suffix
				so-cust-code ws-order-type
				stock-code stk-issue-control-code
				ws-transfer-order
				lf-audit-line-addition
				'-negate'
	else
		spl 'so/m50lengths'
				parameters are str(so-order-no) so-bo-suffix
				so-cust-code ws-order-type
				stock-code stk-issue-control-code
				ws-transfer-order
				lf-audit-line-addition
				'-so'
		on error
			exit
		endon
	endif
	push sales-order-line
	extract sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix 0
		next same so-order-no so-bo-suffix
		where sol-line-type = "SN"
	detail
		if sol-item-price = 0
			get tmp-line
				on index tmp-line-seq
				key is sol-line-seq
			on error
				set lf-new-zero-line = sol-line-seq
				if (i50entry-transfer-between-whse = NO
					or (i50entry-transfer-between-whse = YES
					and sys-charge-for-inter-transfers in
						{ 'P' 'O' 'D' 'C' '1' '2' '3' '4' } ))//allow price
					do i50lines-check-zero-price
						parameters are sol-item-price true
						returning lf-zero-price-ok
				endif
				get sales-order-line-notes
					on index so-order-no so-bo-suffix sol-line-seq soln-type
						soln-seq-no
					key is so-order-no so-bo-suffix lf-new-zero-line "~Z" 0
				on error
				else
					set lf-soln-text = soln-text
				endon
				break
			endon
		endif
	endextract
	extract sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix (lf-new-zero-line + 1)
		next same so-order-no so-bo-suffix
		where sol-line-type = "SN"
	detail
		if sol-item-price = 0
			get tmp-line
				on index tmp-line-seq
				key is sol-line-seq
			on error
				get sales-order-line-notes lock
					on index so-order-no so-bo-suffix sol-line-seq soln-type
						soln-seq-no
					key is so-order-no so-bo-suffix sol-line-seq "~Z" 0
				on error
					initialise sales-order-line-notes
						leaving so-order-no so-bo-suffix sol-line-seq
							soln-type
					set soln-seq-no = 0
					//Reason will be characters 9->10
					set soln-text = lf-soln-text
					insert sales-order-line-notes
				else
					set soln-text = lf-soln-text
					update sales-order-line-notes
				endon
			endon
		endif
	endextract
	close tmp-line
	pop sales-order-line
	get sales-order current lock
	set ws-so-date-stamp-to-be-updated = YES
	set i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
	do b300-calc-total-amounts-update-header
	do display-totals
	initialize sales-order-line
				leaving so-order-no so-bo-suffix
	set sol-line-seq = ws-line-seq
endprocedure //get-style-color-size-item ---------------------------------------

procedure get-warehouse-record
	local field lf-cost-to-use				like whse-cost-to-use-flag
				lf-whse-record-created		type boolean
	//
	window @21,45 to @23,80
		title is 'Item Code not in Warehouse'
	//
	do clib407-get-cost-method
		parameters
			stock-code
			whse-code
			sys-cost-to-use
		returning
			lf-cost-to-use		//should be the same as sys-cost-to-use
	//
	if stk-stock-status = "K"
		set reenter-needed = FALSE
		set ws-create-whse = YES
	else
		set reenter-needed = TRUE
		if lf-cost-to-use = 'W'
			display "Warehouse record needs to be created."
				@22,47 background
			pause
		else
			display concat("Create record for ",so-whse-code, " :")
				@22,47 background
		endif
	endif
	accept ws-create-whse @22,72
		help "N - do not create warehouse, Y - create warehouse"
		allow YES NO
		default NO
		uppercase
		no-clear
		when stk-stock-status != "K"
		and lf-cost-to-use != 'W'
	if ws-create-whse = YES
		//
		transaction begin
		//
		initialise stock-warehouse-detail
			leaving stock-code whse-code
		set whse-code = so-whse-code
		set whse-drp-replenish-multiple = 1
		//
		// Create a new stock-warehouse record
		do clibstk-create-stock-warehouse-detail
			parameters stock-warehouse-detail.*
			returning stock-warehouse-detail.* lf-whse-record-created
		//
		if lf-whse-record-created
			transaction commit
		else
			transaction rollback
		endif
		//
		set reenter-needed = FALSE
			//regain currency on correct index
		get stock-warehouse-detail
			on index whse-code stock-code
			key is so-whse-code stock-code
		on error
		endon
	endif
endprocedure //get-warehouse-record --------------------------------------------

procedure a310-check-line-gp
	local field
		lf-total-amt			like sol-line-amount
		lf-total-foreign-amt	like sol-line-amount
		lf-total-local-amt		like sol-line-amount
	//
	set i50entry-qty = sol-ordered-qty
	if sol-line-type in { 'SS','RS' }
		set stk-price-per = sol-price-uom
	endif
	do i50entry-get-conversion-factor
	do clib406-calc-line-cost
		parameters
			sol-item-cost
			sol-ordered-qty
			sol-shipped-qty
			sol-line-type
			sol-stk-unit-conversion
			sol-stk-unit-desc
			stk-price-per
		returning
			ws-total-cost
	//
	set lf-total-amt = sol-line-amount
	//
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_LINE
		//values are ex-tax for consumer-tax
		set lf-total-amt -= sol-ordered-sales-tax-amt
	elseif sys-stax-incl-in-sales-files = YES
		set ws-total-cost += sol-ordered-sales-tax-amt
	else
		set lf-total-amt -= sol-ordered-sales-tax-amt
	endif
	//
	if so-curr-code != sys-local-currency-code
		set lf-total-foreign-amt = lf-total-amt
		do clibcurrency-convert-foreign-to-local
			parameters
				so-curr-code
				lf-total-foreign-amt
				so-curr-final-exchange-rate
			returning
				lf-total-local-amt
		I8GETGP_PERCENT(lf-total-local-amt,ws-total-cost,2,i50entry-gp-string,i50entry-gp)
	else
		I8GETGP_PERCENT(lf-total-amt,ws-total-cost,2,i50entry-gp-string,i50entry-gp)
	endif
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is "WL" sol-whse-code
	on error
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is "WL" so-whse-code
		on error
			set ws-minimum-gp = sys-so-mov
		else
			set ws-minimum-gp = sys-money-value
		endon
	else
		set ws-minimum-gp = sys-money-value
	endon
	//
	if ws-minimum-gp != 0 and i50entry-gp < ws-minimum-gp
	and i50entry-sales-credit = NO
	and i50entry-return-authorisation = NO
	and so-curr-code = SPACES
		set ordlog-type = 2
		set ordlog-old-info = stock-code
		set ordlog-new-info = SPACES
		set ordlog-old-value = lf-total-amt
		set ordlog-new-value = ws-total-cost
		set ordlog-change-value = ZERO
		set ordlog-ordered-change-value = 0
		set ordlog-ordered-tax-chg-value = 0
		set ordlog-line-type =  sol-line-type
		set ordlog-item-wholesale-price = sol-item-wholesale-price
		set ordlog-disc-rate = sol-disc-rate
		do a9000-write-audit-file
	endif
endprocedure //a310-check-line-gp ----------------------------------------------

procedure b300-calc-total-amounts-update-header
	//
	// NOTE: Always update the sales-order!
	//		if you want to increment the ws-line-seq by one, the field
	//		i50lines-cal-display-total must be set to either
	//							START_OF_LINES_AND_CHG_SEQ
	//							CURRENT_LINE_AND_CHG_SEQ
	//
	// Make sure header is current and locked.
	// NOTE: some parameters passed to this program will mean that the
	//		header record does not exist!
	get sales-order lock
		on index so-order-no so-bo-suffix
		key is so-order-no so-bo-suffix
	on error
		set i5headso-dont-touch-header-fields = TRUE
	else
		// ie ALWAYS update the sales order header fields!!
		set i5headso-dont-touch-header-fields = FALSE
		set i5headso-lock-after-update = TRUE
		if get-param(3) in {'-de' '-i'}					// From edit but enquiry only
		and so-order-status in					// SO has been despatched.
			{ I5SO_RDY_TO_UPDATE I5SO_RDY_TO_PRINT_INVOICE }
			// Do not re-calculate order packages and weight from the sales
			// order line.
			set i5headso-dont-touch-pack-and-weight = TRUE
		endif
	endon
	//
	set ws-line-seq = ZERO
	set ws-current-line-seq = sol-line-seq
	//
	// need to save the current values of sales-order-lines and stock-master!
	// this is required, so when in entry mode in screen get-order-lines
	// the stock-master and sales-order-lines will not be the contents
	// of the last line in the extract of sales-order-lines in i50headso!!
	push sales-order-line
	push stock-master
	// now scan through s/o lines!
	do i50headso-calc-total-amounts-update
	pop stock-master
	pop sales-order-line
	//
 	set ws-line-seq = i5headso-last-line-seq
	//
	// shipped totals
	set ws-total-shipped-incl-charges = i5headso-total-shipped
										+ i5headso-total-ordered-charges
	set ws-total-shipped-cost = i5headso-total-shipped-cost
	set ws-total-shipped-tax = i5headso-total-shipped-tax
	set ws-total-shipped-gp-string = i5headso-shipped-gp-string
	set ws-total-shipped-gp-num = i5headso-shipped-gp-num
	//
	// ordered totals
	set ws-total-ordered-incl-charges = i5headso-total-ordered
	set ws-total-ordered-cost = i5headso-total-ordered-cost
	set ws-total-ordered-tax = i5headso-total-tax
	set ws-total-ordered-gp-string = i5headso-ordered-gp-string
	set ws-total-ordered-gp-num = i5headso-ordered-gp-num
	//
	// charges, packages, weight
	set ws-total-charges = i5headso-total-ordered-charges
	set ws-total-pack-weight = i5headso-total-pack-weight
	set ws-total-no-of-normal-stk-lines = i5headso-no-of-normal-stk-line-items
	//
	// reset flags
	set i5headso-dont-touch-header-fields = FALSE
	set i5headso-lock-after-update = FALSE
	set i5headso-dont-touch-pack-and-weight = FALSE
	//
	//
	// need to save current sales order line values, as the following
	// code will get the last line and so the contents will be lost!
	push sales-order-line
	set ws-line-seq = integer(ws-line-seq)
	//only work with whole numbers
	if i50lines-cal-display-totals = START_OF_LINES_AND_CHG_SEQ
		//position at start of lines
		position sales-order-line
			key is so-order-no so-bo-suffix 0
		set ws-line-seq += 1
	elseif i50lines-cal-display-totals = CURRENT_LINE_AND_NO_SEQ
		get sales-order-line lock
			key is so-order-no so-bo-suffix ws-current-line-seq
		on error
		endon
	elseif i50lines-cal-display-totals = CURRENT_LINE_AND_CHG_SEQ
		get sales-order-line lock
			key is so-order-no so-bo-suffix ws-current-line-seq
		on error
		endon
		set ws-line-seq += 1
	endif
	pop sales-order-line
	//
	if i50entry-normal-order = YES
	or i50entry-forward-order = YES
	or i50entry-transfer-between-whse = YES
		if i5headso-bulk-item-found = YES			//ie a bulk item found
		and so-order-type-code != I5SO_TYPE_BULK
			set so-order-type-code = I5SO_TYPE_BULK	//change to bulk item type
		elseif i5headso-bulk-item-found not = YES	//ie a bulk item NOT found
		and so-order-type-code = I5SO_TYPE_BULK
			set so-order-type-code = SPACES			//set back to normal
		endif
	endif
	//
	set i50lines-cal-display-totals = SPACES
endprocedure //b300-calc-total-amounts-update-header -------------------------

procedure alternate-accept
	set ws-numeric-field = 0
	set ws-confirm = 'Y'
	if sys-stock-design-code-size = 17 // conversion table
		spl 'so/m50cut' parameters
			'-alternate' str(so-order-no)
			so-bo-suffix stock-code
			str(sol-ordered-qty)
		on error
			message "Not installed, m50cut"
		endon
	elseif stk-apn-number != SPACES
		set ws-saved-stock-code = stock-code
		set i50lines-reenter-stk-qty-flag = 'S'
		do i50lines-available-for-promise
		if i50lines-reenter-stk-qty-flag = 'S'
			set i50lines-reenter-stk-qty-flag = SPACES
			set ws-accept-stk-code = stock-code
			set ws-numeric-field = 1
		else
			set i50lines-reenter-stk-qty-flag = SPACES
			set ws-accept-stk-code = stock-code
			set ws-numeric-field = 2
		endif
	else
		//Go straight to asking what they
		//want to do - no balances screen
		set i50lines-saved-available-stk = ws-available-stk
		do i50lines-setup-default-for-qty
		do i50lines-create-bo-line entry once
	endif
endprocedure //alternate-accept -------------------------------------------

screen maintain-charge-line
	returning
		lr-line-completed-ok			type boolean
	local field
		lf-ok							type boolean
		lf-ex-tax-amount				like sol-line-amount
		lf-sol-line-amount				like sol-line-amount
		lf-code-selected-from-help		type boolean
		lf-code-selected-from-help-code	like sys-tbl-code
		lf-saved-sol-line-amount		like sol-line-amount
		lf-solt-tax-code				like solt-tax-code
		lf-tax-code-ok					type boolean
		lf-tax-code-error-message		BMSDEF_ERROR_MESSAGE_TYPE
		lf-tax-code-error-title			BMSDEF_ERROR_MESSAGE_TITLE
		lf-inc-in-inventory-cost-flag	like tcm-inc-in-inventory-cost
		lf-composite-code-flag			like tcm-composite-code-flag
	//
	window @1,1 to @10,76 window-position 5
		title is "Charges"
	form-entry
before
	box @1,1 to @9,76
		title SPACES
	//
	if screenmode() = correct
		set lf-sol-line-amount = sol-line-amount
		if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
			set lf-ex-tax-amount = ZERO
		else
			set lf-ex-tax-amount = sol-line-amount - sol-ordered-sales-tax-amt
		endif
		if i50entry-sales-credit = YES
			set lf-ex-tax-amount = 0 - lf-ex-tax-amount
			set lf-sol-line-amount = 0 - lf-sol-line-amount
		endif
		do clibtaxso-save-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
	endif
	set lf-saved-sol-line-amount = sol-line-amount
	//
	do clibtaxso-get-sales-order-line-tax-code-for-display
		parameters
			so-order-no
			so-bo-suffix
			sol-line-seq
		returning
			lf-solt-tax-code
	//
	if screenmode() = entry
		do clibtaxso-populate-sales-order-line-tax-and-get-rate
			parameter
				sales-order.*
				sales-order-line.*
			returning
				sol-tax-rate
	endif
detail
	accept sol-chg-type @2,15
		title 'Type :'
		help 'Enter the charge type 0-9, A-E. NOTE:If you select a code from the help screen, the description & amounts will be overwritten.'
		allow '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E'
		default sol-chg-type
	on help-key
		set sys-tbl-type = "CH"
		do i85codes-table-help
		if sys-tbl-code <> SPACES
			set lf-code-selected-from-help = TRUE
			set lf-code-selected-from-help-code = sys-tbl-code
			set sol-chg-type = substring(sys-tbl-code,2,2)
			do charges-setup-defaults
				parameter
					lf-code-selected-from-help
					lf-code-selected-from-help-code
				returning
					lf-ex-tax-amount
					lf-sol-line-amount
			refresh sol-line-description
			refresh lf-ex-tax-amount
			refresh lf-sol-line-amount
		endif
		reenter optional
	endon
	before-accept
		set lf-code-selected-from-help = FALSE
	end-before-accept
	validation
		if sol-chg-type between '0' and '9'
			set lf-ok = FALSE
			extract special-accounts
				on index s-acc-name
				key is concat('C',sol-chg-type)
				when substring(s-acc-name,1,2) = concat('C',sol-chg-type)
			detail
				set lf-ok = TRUE
				break
			endextract
			if not lf-ok
				message 'Please setup special account for this charge type: ' sol-chg-type
				reenter
			endif
		endif
	endvalidation
	on change
		do clibtaxso-delete-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
		//
		do clibtaxso-populate-sales-order-line-tax-and-get-rate
			parameter
				sales-order.*
				sales-order-line.*
			returning
				sol-tax-rate
		//
		do clibtaxso-get-sales-order-line-tax-code-for-display
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
			returning
				lf-solt-tax-code
		//
		do charges-setup-defaults
			parameter
				lf-code-selected-from-help
				lf-code-selected-from-help-code
			returning
				lf-ex-tax-amount
				lf-sol-line-amount
		set lf-code-selected-from-help = FALSE
		set lf-code-selected-from-help-code = SPACES
		refresh sol-tax-rate
		refresh lf-solt-tax-code
		refresh sol-line-description
		refresh lf-ex-tax-amount
		refresh lf-sol-line-amount
	endon
	//
	accept sol-line-description @3,15
		title 'Desc :'
		help 'Enter a description of the sales order line'
		default sol-line-description
		no-clear
		when ws-order-flag != CUSTOMER
		and sol-print-line != 'V'
	//
	accept sol-item-group @4,15
		title 'Item Group :'
		help 'Enter a item group for this special item [HELP]'
		default sol-item-group
		show-value
		when job-code != SPACES
			and ws-ok-to-post-income
			and (i50entry-transfer-between-whse != YES	//not allow if transfer
				or (i50entry-transfer-between-whse = YES
					and so-price-code != 'I'
					and sys-stk-whse-grp-transfers = YES
					and sys-charge-for-inter-transfers = 'D'))
	on help-key
		set sys-tbl-type = 'PG'
		do i85codes-table-help
		if sys-tbl-code > SPACES
			set sol-item-group = sys-tbl-code
		endif
		reenter optional
	endon
	validation
		get system-table
			key is 'PG' sol-item-group
		on error
			message "Item Group not valid " sol-item-group
			re-enter
		endon
	endvalidation
	//
	accept sol-non-stk-tax-code @5,15
		title "Tax Code:"
		help "Enter override tax code or SPACES for default to apply [HELP]"
		when sys-apply-stax-to-charges = YES
		show-value
	on help-key
		do clibtaxlookup-enquire-on-tax-codes-by-group
			parameters
				sol-non-stk-tax-code			// Tax code
				so-tax-group					// Tax group
				BMSDEF_TAX_OUTPUT_TYPE			// Input/output flag
				TRUE							// Show composites
			returning
				sol-non-stk-tax-code
		reenter sol-non-stk-tax-code
	endon
	validation
		if sol-non-stk-tax-code <> SPACES
			do clibtax-validate-tax-code
				parameter
					sol-non-stk-tax-code		// Tax code
					so-tax-group				// Tax group
					BMSDEF_TAX_OUTPUT_TYPE		// Input/output flag
					TRUE						// Allow composites
				returning
					lf-tax-code-ok
					lf-tax-code-error-message
					lf-tax-code-error-title
					lf-inc-in-inventory-cost-flag
					lf-composite-code-flag
			if not lf-tax-code-ok
				message-box lf-tax-code-error-message
					title lf-tax-code-error-title
					message-buttons MSG_BOX_OK
					icon MSG_BOX_STOP
					tag 100
				reenter sol-non-stk-tax-code
			endif
		endif
	endvalidation
	on change
		do clibtaxso-delete-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
		//
		do clibtaxso-populate-sales-order-line-tax-and-get-rate
			parameter
				sales-order.*
				sales-order-line.*
			returning
				sol-tax-rate
		//
		do clibtaxso-get-sales-order-line-tax-code-for-display
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
			returning
				lf-solt-tax-code
		// if the sales order is a retail order then the charge price needs to be
		// grossed up to include tax
		if so-price-code in I5SOSTATII_RETAIL_PRICE_CODES
			set sol-item-price = lf-ex-tax-amount *
				(1 + (sol-tax-rate / 100))
		endif
		do i50lines-calc-charge-stax
		do set-ex-amount-after-calc-charge-stax
			returning
				lf-ex-tax-amount
		do set-inc-amount-after-calc-charge-stax
			returning
				lf-sol-line-amount
		refresh sol-tax-rate
		refresh lf-solt-tax-code
		refresh lf-ex-tax-amount
		refresh lf-sol-line-amount
	endon
	//
	accept lf-solt-tax-code @6,15
		title ws-tax-prompt
		default lf-solt-tax-code
		read-only
	accept sol-tax-rate @6,26 pic zz9.zzzz%
		read-only
		default sol-tax-rate
	//
	accept lf-ex-tax-amount @7,15 pic s(10)9.99
		title 'Ex Tax Total:'
		help ws-line-amount-help
		default lf-ex-tax-amount
		show-value
		when so-price-code not in I5SOSTATII_RETAIL_PRICE_CODES
	on change
		if i50entry-sales-credit = YES
			if lf-ex-tax-amount < ZERO
				// They have overkeyed a negative amount on a
				// credit note which means a debited charge
				set sol-ordered-qty = 1
				set sol-shipped-qty = 1
			else
				set sol-ordered-qty = -1
				set sol-shipped-qty = -1
			endif
		endif
		//
		if i50entry-sales-credit = YES
		and lf-ex-tax-amount < ZERO
			set sol-item-price = 0 - lf-ex-tax-amount
		else
			set sol-item-price = lf-ex-tax-amount
		endif
		do i50lines-calc-charge-stax
		do set-inc-amount-after-calc-charge-stax
			returning
				lf-sol-line-amount
		refresh lf-sol-line-amount
	endon
	//
	accept lf-sol-line-amount @8,15 pic s(10)9.99
		title 'Total:'
		show-value
		default sol-item-price
		when so-price-code in I5SOSTATII_RETAIL_PRICE_CODES
	validation
	endvalidation
	on change
		if i50entry-sales-credit = YES
			if lf-sol-line-amount < ZERO
				// They have overkeyed a negative amount on a
				// credit note which means a debited charge
				set sol-ordered-qty = 1
				set sol-shipped-qty = 1
			else
				set sol-ordered-qty = -1
				set sol-shipped-qty = -1
			endif
		endif
		//
		if i50entry-sales-credit = YES
		and lf-sol-line-amount < ZERO
			set sol-item-price = 0 - lf-sol-line-amount
		else
			set sol-item-price = lf-sol-line-amount
		endif
		do i50lines-calc-charge-stax
		do set-ex-amount-after-calc-charge-stax
			returning
				lf-ex-tax-amount
		refresh lf-ex-tax-amount
	endon
	//
	accept sol-user-only-alpha4-1 suppress
	accept sol-user-only-alpha4-2 suppress
	accept sol-user-only-date1 suppress
	accept sol-user-only-num1 suppress
	accept sol-user-only-num2 suppress
	//
	confirm
		when screenmode() = correct
		default YES
	before
		if screenmode() in { entry correct }
			do public-allow-pre-confirm-of-line-entry
				parameter
					sales-order.*
					sales-order-line.*
				returning
					lf-ok
			if not lf-ok
				reenter sol-chg-type
			endif
		endif
	confirmed
		if screenmode() = correct
		and lf-saved-sol-line-amount != sol-line-amount
			set ordlog-type = 56
			if str-len(sol-line-description) > 15
				set ordlog-old-info = substring(sol-line-description,1,15)
				set ordlog-new-info = substring(sol-line-description,16,30)
			else
				set ordlog-old-info = sol-line-description
				set ordlog-new-info = SPACES
			endif
			set ordlog-old-value = i50entry-sol-line-amount
			set ordlog-new-value = sol-line-amount
			set ordlog-change-value = ZERO
			set ordlog-ordered-change-value = sol-line-amount - i50entry-sol-line-amount
			set ordlog-line-type =  sol-line-type
			set ordlog-item-wholesale-price	= sol-item-wholesale-price
			set ordlog-disc-rate = sol-disc-rate
			do a9000-write-audit-file
		endif
		//
		set lr-line-completed-ok = TRUE
		exit
	not-confirmed
		if screenmode() = entry
			do clibtaxso-delete-solt-for-sol
				parameters
					so-order-no
					so-bo-suffix
					sol-line-seq
		elseif screenmode() = correct
			do clibtaxso-restore-solt-for-sol
				parameters
					so-order-no
					so-bo-suffix
					sol-line-seq
		endif
		exit
	endconfirm
endscreen // maintain-charge-line ----------------------------------------------

procedure set-ex-amount-after-calc-charge-stax
	returning
		lr-ex-tax-amount					like sol-line-amount
	//
	set lr-ex-tax-amount = sol-line-amount - sol-ordered-sales-tax-amt
	if i50entry-sales-credit = YES
		set lr-ex-tax-amount = 0 - lr-ex-tax-amount
	endif
endprocedure //set-ex-amount-after-calc-charge-stax --------------------------

procedure set-inc-amount-after-calc-charge-stax
	returning
		lr-sol-line-amount					like sol-line-amount
	//
	set lr-sol-line-amount = sol-line-amount
	if i50entry-sales-credit = YES
		set lr-sol-line-amount = 0 - lr-sol-line-amount
	endif
endprocedure //set-inc-amount-after-calc-charge-stax -------------------------

procedure charges-setup-defaults
parameter
		lp-code-selected-from-help			type boolean
		lp-code-selected-from-help-code		like sys-tbl-code
returning
		lr-ex-tax-amount					like sol-line-amount
		lr-sol-line-amount					like sol-line-amount
	//
	set sys-tbl-code = lp-code-selected-from-help-code
	if sys-split-charges-flag = 'W'
		set sys-tbl-code = concat('C',sol-chg-type, so-whse-code)
	elseif sys-split-charges-flag = 'T'
		set sys-tbl-code = concat('C',sol-chg-type, so-territory-code)
	elseif sys-split-charges-flag = SPACES
	and sol-chg-type <> substring(lp-code-selected-from-help-code,2,2)
		set sys-tbl-code = SPACES
	endif
	//
	// This first get will use the sys-tbl-code. If you have selected
	// from the help then sys-tbl-code will be setup with what you
	// selected eg.  C12M, therefore this get will work.  SOOO you
	// will get the description and the amount from the full code and
	// not just the C1!
	// If you have not used the help key this will be SPACES and it
	// will go through the 'on error'
	get system-table
		key is 'CH' sys-tbl-code
	on error
		get system-table
			key is 'CH' concat('C',sol-chg-type)
		on error
			message-box param-text("<<P1>> Charge Type not found, defaulting to charge defined by 0", sol-chg-type)
				title "Charge Type Not Found"
				message-buttons MSG_BOX_OK
				default is MSG_BOX_OK
				icon is MSG_BOX_WARNING
				tag 1
				optional
			//
			get system-table
				key is 'CH' 'C0'
			on error
				set sys-description = 'CHARGE'
				set sys-money-value = ZERO
			endon
			set sol-chg-type = '0'
		endon
	endon
	if screenmode() in { entry, form-entry-defaults }
	or (screenmode() = correct and lp-code-selected-from-help
			and sys-money-value != 0 )
		set sol-line-description = sys-description
		// if in correct mode and the user has selected a code from the
		// help and that code has a non-ZERO amount, then use it and not
		// what was originally entered!
		if so-price-code in I5SOSTATII_RETAIL_PRICE_CODES
			set sol-line-amount = sys-money-value
			set sol-item-price = (sys-money-value *  (1 + (sol-tax-rate / 100)))
			do i50lines-calc-charge-stax
			//
			set lr-ex-tax-amount = sol-line-amount - sol-ordered-sales-tax-amt
			do set-ex-amount-after-calc-charge-stax
				returning
					lr-ex-tax-amount
		else
			// treat sys-money-vlaue as exclusive of tax
			set lr-ex-tax-amount = sys-money-value
			set sol-item-price = sys-money-value
			set sol-line-amount = lr-ex-tax-amount
			do i50lines-calc-charge-stax
			do set-inc-amount-after-calc-charge-stax
				returning
					lr-sol-line-amount
		endif
	endif
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
		// not applicable
		set lr-ex-tax-amount = ZERO
	endif
endprocedure //charges-setup-defaults ----------------------------------------

// The following #defines are used solely in procedure maintain-normal-line

#define RECALC_LINE_TOTALS() \
	if screenmode() <> form-entry-defaults \
		do recalc-line-totals \
			returning \
				lf-ordered-cost \
				lf-shipped-cost \
				lf-sol-backorder-sales-tax-amt \
				lf-sol-backorder-discount-amt \
				lf-sol-backorder-amount \
		refresh data \
	endif

screen maintain-normal-line
	returning
		lr-line-completed-ok			type boolean
	local field
		lf-cost-to-use					like whse-cost-to-use-flag
		lf-ok							type boolean
		lf-multi-disc-rate-ok			type boolean
		lf-reenter						type boolean
		lf-reenter-message				pic x(40)
		lf-reenter-status				pic x
		lf-reenter-needed				pic x(13)
		lf-save-decimals				pic 9
		lf-no-of-decimals				pic 9
		lf-save-unit-desc				like sol-stk-unit-desc
		lf-save-sol-item-price			like sol-item-price
		lf-save-ordered-qty				like sol-ordered-qty
		lf-zero-price-ok				type boolean
		lf-check-uom-decimal-ok			type boolean
		lf-solt-tax-code				like solt-tax-code
		lf-first-time					type boolean
		lf-field-ok						type boolean
		lf-partial-pack-flag			pic x
		lf-new-quantity					like sol-ordered-qty
		lf-link-to-po-found 			type boolean
		lf-available-stk				like whse-qty-on-hand
		lf-available-stk-text			pic x(14)
		lf-unit-of-available-stk		like sol-stk-unit-desc
		lf-stk-apn-number				like stk-apn-number
		lf-price-uom-desc				pic x(4)
		lf-stk-status-desc				pic x(20)
		//
		lf-stk-desc-1					like sol-line-description
		lf-stk-desc-2					like sol-line-description
		lf-stk-desc-3					like sol-line-description
		lf-sol-line-description			like sol-line-description
		//
		lf-ordered-cost					like sol-line-cost
		lf-shipped-cost					like sol-line-cost
		lf-display-item-cost			like sol-item-cost
		lf-ex-tax-amount				like sol-line-amount
		//
		lf-sol-backorder-sales-tax-amt	like sol-shipped-sales-tax-amt
		lf-sol-backorder-discount-amt	like sol-shipped-discount-amt
		lf-sol-backorder-amount			like sol-shipped-amount
		//
		lf-other-whse-lines-detected	type boolean
		lf-accept-substitute			type boolean
		lf-item-substitute				like stock-code
		lf-extra-line-info				like sol-line-description
		lf-confirm						pic x
		lf-rounding						pic 99v9(5)
		lf-stk-qty-pic					pic x(10)
		lf-validated-order-qty			type boolean
		lf-zshortship-link				type boolean
		lf-zshortship-seq				like sol-line-seq
		lf-show-message					type boolean
		lf-saved-sol-update-whse		like sol-update-whse
		lf-sol-item-cost				like sol-item-cost
		lf-base-uom-rounding			like stk-conversion-factor
		lf-base-uom-decimals			like lf-no-of-decimals
		lf-check-base-uom-conversion	type boolean
		lf-promo-exists					type boolean
		lf-retail-promo-inserted		type boolean
		lf-atp-date						type date
	//
	window @1,1 to @22,123 window-position 5
		title concat(if-then-else(sol-line-type = "RN"
						,'Rental/Service line item.  '
						,if-then-else(sol-line-type = "RS"
							,'Asset sale line item.  '
							,if-then-else(sol-line-type = "SN"
								,concat('Normal line item.  ',strconcat(stock-code), ' - ', stk-description)
								,concat(if-then-else(sol-line-type = "KN"
									,'Kit item.  '
									,'Normal line item ( Sourced from other warehouse ).  ')
									,strconcat(stock-code), ' - ', stk-description)))))
	form-entry
	//
before
	//
	box @1,1 to @7,89
		title 'Line Detail'
	//
	box @7.8,1 to @12,32
		title 'Items Details'
	//
	box @7.8,33 to @12,89
		title 'Extra Line Detail'
	//
	box @12.8,1 to @21,32
		title 'Quantity Detail'
	//
	box @12.8,33 to @21,89
		title ws-box-currency-title
	//
	display 'Order' @14,43 pic x(14) right bold
	display 'Ship' @14,58 pic x(14) right bold
	display 'Back Order' @14,73 pic x(14) right bold
	//
	box @1,90 to @12,123
		title ws-box-currency-pricing
	//
	box @12.8,90 to @18,123
		title ws-box-currency-cost
	//
	box @18.8,90 to @21,123
		title "Line Item Action"
	//
	do get-line-desc
		returning lf-stk-status-desc
	//
	do get-avail-stk-and-stk-description
		returning	lf-available-stk
					lf-available-stk-text
					lf-unit-of-available-stk
					lf-stk-desc-1
					lf-stk-desc-2
					lf-stk-desc-3
					lf-stk-apn-number
	//
	do clibstk-item-rounding
		parameters
			stk-unit-desc
		returning
			lf-base-uom-rounding
			lf-base-uom-decimals
	if stk-serialized-flag = 'Y'
		set lf-base-uom-rounding = 1
	endif
	//
	set lf-sol-line-description = lf-stk-desc-1
	//
	do get-price-rule-desc
		returning	ws-option
	//
	do i50entry-get-conversion-factor
	do lookup-stock-unit-conversion
	do clibstk-item-rounding
		parameters
			sol-stk-unit-desc
		returning
			lf-rounding
			lf-save-decimals
	// get the pricing UOM !! as opposed to the qty UOM.
	do get-the-pricing-uom
		returning lf-price-uom-desc
	//
	// get the tax code and rate for display
	if screenmode() = correct
		// Do this here to prevent discrepancies in the case that
		// line did not previously have tax because there was no
		// default set up and tax setup has now changed
		do clibtaxso-populate-sales-order-line-tax-and-get-rate
			parameter
				sales-order.*
				sales-order-line.*
			returning
				sol-tax-rate
	endif
	//
	do clibtaxso-get-sales-order-line-tax-code-for-display
		parameters
			so-order-no
			so-bo-suffix
			sol-line-seq
		returning
			lf-solt-tax-code
	//
	if i50entry-show-costs in { YES 'B' }
		set lf-display-item-cost = sol-item-cost
	else
		set lf-display-item-cost = 0
	endif
	//
	if BMSDEF_IS_ALTERNATE_ITEM
		display "Ordered :" @5,13 right-coord
		set lf-accept-substitute = TRUE
		save stock-master
		get stock-master lookup
			key is sol-line-description
		on error
		else
			set lf-item-substitute = sol-line-description
		endon
		restore stock-master
	endif
	//
	set i50lines-alt-unit-qty = ZERO
	set i50entry-old-shipped-qty = ZERO
	set i50entry-old-backorder-qty = ZERO
	set i50entry-sol-item-price = sol-item-price
	set i50entry-old-update-whse = sol-update-whse
	//
	set i50lines-old-ordered-qty = sol-ordered-qty
	set ws-saved-sol-item-cost = sol-item-cost
	//
	set lf-save-sol-item-price = sol-item-price
	set lf-save-unit-desc = sol-stk-unit-desc
	set lf-save-ordered-qty = sol-ordered-qty
	//
	set lf-first-time = TRUE
	// i5pricemod- arrays need to be set to ZERO after completion of a
	// sales order line to correction of another line
	if not ws-confirm = 'R'
		do i5pricemod-initialise-arrays
	endif
	RECALC_LINE_TOTALS()
	//Check if the sales order line is a kit component linked to
	//a zshortship line.  This is only relevant on a suffixed order
	//where the line is no longer attached to the kit.
	set lf-zshortship-link = FALSE
	if so-bo-suffix <> SPACES
		set lf-zshortship-seq = sol-line-seq - 0.01
		//
		select
			lf-zshortship-link = count()
			from like-sales-order-line
			where so-order-no = :so-order-no
			and so-bo-suffix = :so-bo-suffix
			and sol-line-seq = lf-zshortship-seq
			and stock-code = 'ZSHORTSHIP'
		detail
		endselect
    endif
	//for Z and L type items, the order qty is initialised to 1.
	//if qty entered is 1, the price is not calculated as it will not
	//pass through on change. So price needs to be calculated here as well
	if sol-line-type = 'SN'
	and stk-stock-status in {'Z','L'}
	and sol-ordered-qty = 1
	and sol-price-overide-flag not in { "Y" "B"}
	and screenmode() = entry	// Only recalc if in ENTRY mode ONLY !!!
		do determine-stock-item-price parameter TRUE
		RECALC_LINE_TOTALS()
	endif
detail
	do bb-get-extra-line-info
		returning	lf-extra-line-info
	refresh lf-extra-line-info
	//
	accept lf-sol-line-description @2,15
		title 'Description:'
		default lf-sol-line-description
		when sol-line-type <> "WN"
		and ws-order-flag != CUSTOMER
			and sol-print-line not in { 'J' 'V' }
			and not (BMSDEF_IS_ALT_OR_SUBSD_ITEM)
		show-value
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			reenter lf-sol-line-description
		endif
	endon
	on change
		if sol-line-type in { 'SN','WN','RR' }
		and lf-sol-line-description = SPACES
			set sol-line-description = SPACES
			do get-avail-stk-and-stk-description
				returning	lf-available-stk
							lf-available-stk-text
							lf-unit-of-available-stk
							lf-stk-desc-1
							lf-stk-desc-2
							lf-stk-desc-3
			set lf-sol-line-description = lf-stk-desc-1
			message 'Warning: Item description will be used'
		elseif lf-sol-line-description <> lf-stk-desc-1
			// The stock description has been overwritten!
			set sol-line-description = lf-sol-line-description
			set lf-stk-desc-2 = SPACES
			set lf-stk-desc-3 = SPACES
		endif
		refresh lf-sol-line-description
	endon
	//
	accept lf-stk-desc-2 @3,15
		read-only
		default lf-stk-desc-2
	accept lf-stk-desc-3 @4,15
		read-only
		default lf-stk-desc-3
	//
	accept lf-item-substitute @5,15
		help 'Enter the item code that is being substituted'
		when lf-accept-substitute
		default lf-item-substitute
	on help-key
		save stock-master
		set i50stkenq-order-flag = ws-order-flag
		set i50stkenq-mode-type = ws-mode-type
		do i50stk-stock-enquiry
		if stock-code != SPACES
			set lf-item-substitute = stock-code
		endif
		restore stock-master
		reenter optional
	endon
	validation
		if screenmode() <> form-entry-defaults
			if lf-item-substitute = stock-code
				message 'Substitute and supplied item code are the same. Please reenter ' pause
				reenter optional
			elseif lf-item-substitute = SPACES
				// User has ignored substitution so reset fields
				set sol-chg-type = stk-stock-status
				set sol-line-description = SPACES
				set sol-substitute-flag = SPACES
				do get-avail-stk-and-stk-description
					returning	lf-available-stk
								lf-available-stk-text
								lf-unit-of-available-stk
								lf-stk-desc-1
								lf-stk-desc-2
								lf-stk-desc-3
								lf-stk-apn-number
				set lf-sol-line-description = lf-stk-desc-1
				set lf-accept-substitute = FALSE
				clear @5,2 to @5,87
			else
				save stock-master
				get stock-master lookup
					key is lf-item-substitute
				on error
					restore stock-master
					message-box param-text("Item code <<P1>> not valid", lf-item-substitute)
						title "Item Code Invalid"
						icon is MSG_BOX_STOP
						message-buttons MSG_BOX_OK
						tag 1428
					set lf-item-substitute = SPACES
					reenter optional
				else
					restore stock-master
					set sol-substitute-flag = "@"
					set sol-line-description = lf-item-substitute
				endon
				do bb-get-extra-line-info
					returning	lf-extra-line-info
				refresh lf-extra-line-info
			endif
		endif
	endvalidation
	//
	accept lf-extra-line-info @6,15
		default lf-extra-line-info
		read-only
		title 'Extra Info. :'
	//
	display lf-stk-status-desc @9,11 bold pic x(20)
		title 'Type:'
	//
	switch on lf-save-decimals
	case 4
		set lf-stk-qty-pic = "-(9)9.9999"
	case 3
		set lf-stk-qty-pic = "-(10)9.999"
	case 2
		set lf-stk-qty-pic = "-(11)9.99"
	case 1
		set lf-stk-qty-pic = "-(12)9.9"
	else
		set lf-stk-qty-pic = "-(14)9"
	endswitch
	//
	accept lf-available-stk @10,11 PIC_FOR_LARGE_QTY right bold
		title 'Avail.:'
		read-only
		default lf-available-stk
	display lf-unit-of-available-stk @10,27 foreground prompts
	accept lf-stk-apn-number @11,11
		title "GTIN:"
		read-only
		default lf-stk-apn-number
	//
	accept sol-stk-unit-desc @14,11 pic x(14) //right currenly 4gl problem1/1/08
		title 'Qty. UOM:'
		help "Enter the unit description. ie. KILO, MTRS, KG ,MTHS etc"
		upper_case
		show-value
		default sol-stk-unit-desc
		when sol-line-type in { 'SN','RN','RS' }
			and (sys-price-disc-entered not in { 'A' 'C' }
			or  (sys-price-disc-entered = 'A' and ws-is-user-a-credit-officer = YES))
			and suc-unit-conversion != 0
			and sol-print-line not in { 'J' 'V' }
			and ws-order-flag != CUSTOMER
			and not ws-sopl-record-exists
	on help-key
		do i50lines-maintain-conversion-factors
		if suc-unit-desc > SPACES
			set sol-stk-unit-desc = suc-unit-desc
		endif
		reenter optional
	endon
	time-out is i50lines-time-out
	on error
		if sol-line-type in {'SN' }
		and screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			reenter sol-stk-unit-desc
		endif
	endon
	validation
		if sol-line-type in {'SN' }
			get stock-unit-conversion
				on index stock-code suc-unit-desc
				key is stock-code sol-stk-unit-desc
			on error
				message-box param-text("Stock conversion not valid <<P1>> <<P2>>",stock-code,sol-stk-unit-desc)
					title "Stock Conversion Invalid"
					icon is MSG_BOX_STOP
					message-buttons MSG_BOX_OK
					tag 1429
				reenter
			endon
			//(on change) is called when the value changes, but if the value is not
			//valid for decimal validation, the first time (on change) is called,
			//then you enter the same value at second time (on change) is not called.
			//So it casue the validation of decimals will be passed, even it is not
			//valid, and the price is not re-calcuated.
			if sol-stk-unit-desc != lf-save-unit-desc
			and screen-mode() = correct
				do clibstk-item-rounding
					parameters
						sol-stk-unit-desc
					returning
						lf-rounding
						lf-no-of-decimals
				if lf-no-of-decimals != lf-save-decimals
					set sol-stk-unit-desc = lf-save-unit-desc
					message-box "Can't correct unit, number of decimals will result in inaccuracy"
						title is "Stock UOM"
						message-button MSG_BOX_OK
						icon is MSG_BOX_WARNING
						tag 1430
					reenter
				end-if
			endif
		endif
	endvalidation
	on change
		if sol-line-type in {'SN' }
			if sol-stk-unit-desc = stk-unit-desc
				// Sales order line is in base UOM. The conversion factor
				// to be used should always be 1. Ignore the setting in the
				// Multi UOM table as this can be wrongly set to value other
				// than 1 (due to lack of validation in versions before this
				// change) in historical data.
				set sol-stk-unit-conversion = 1
				if screenmode() = entry
					set sol-price-overide-flag = SPACES
					do determine-stock-item-price parameter TRUE
				endif
			else
				if screen-mode() = correct
				do clibstk-item-rounding
					parameters
						sol-stk-unit-desc
					returning
						lf-rounding
						lf-no-of-decimals
					if lf-no-of-decimals != lf-save-decimals
						set sol-stk-unit-desc = lf-save-unit-desc
						message "Can't correct unit, number of decimals will result in inaccuracy"
						reenter
					endif
				endif
				set sol-stk-unit-conversion = suc-unit-conversion
			endif
			if screenmode() = entry
				do determine-stock-item-price parameter TRUE
			elseif screenmode() = correct
			and sol-price-overide-flag in { "A" "B" SPACES }
				set sol-price-overide-flag = spaces
				do determine-stock-item-price parameter TRUE
			endif
		endif
		//
		set i50entry-sol-shipped-qty *= i50entry-stk-conv-factor
		set i50entry-sol-backorder-qty *= i50entry-stk-conv-factor
		//
		set i50entry-old-shipped-qty = i50entry-sol-shipped-qty
		set i50entry-old-backorder-qty = i50entry-sol-backorder-qty
		//
		do i50entry-get-conversion-factor
		//
		set i50entry-sol-shipped-qty /= i50entry-stk-conv-factor
		set i50entry-sol-backorder-qty /= i50entry-stk-conv-factor
		//
		do get-avail-stk-and-stk-description
			returning	lf-available-stk
						lf-available-stk-text
						lf-unit-of-available-stk
		refresh lf-available-stk
		display lf-unit-of-available-stk @10,27
		do get-the-pricing-uom
			returning lf-price-uom-desc
		refresh lf-price-uom-desc
	endon
	//
	set i50linec-saved-qty = str-ordered-qty												//1.00
	accept sol-ordered-qty @15,11 pic -(8)9t9999
		title 'Order :'
		help "Enter the quantity ordered"
		default sol-ordered-qty
		show-value
		when sol-line-type in {'KN','SN','RR','RN','RS'}
		and sol-print-line <> 'J'
		and not ws-sopl-record-exists
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			reenter sol-ordered-qty
		endif
	endon
	before-accept
		if I5PIECES_PRODUCT
			if screenmode() = correct
				set i5pieces-load-from-existing = TRUE
				set i5pieces-load-from-type = 'SO'
			endif
			if lf-first-time
				do i5pieces-get-tally-info
					parameters are
						stock-code stk-description stk-measurement-flag
					returning lf-field-ok sol-ordered-qty
				set lf-first-time = FALSE
			endif
			if screenmode = correct
				set i5pieces-load-from-existing = FALSE
			endif
		else
			do public-tally-item
				parameter
					stock-master.*
					sales-order-line.*
					ws-mode-type
				returning
					lf-field-ok
					sol-ordered-qty
		endif
		if i50lines-use-prior-sale-flag = TRUE
			set sol-ordered-qty = i50lines-prior-sale-qty
		endif
		if sol-ordered-qty != lf-save-ordered-qty
			if screenmode() <> form-entry-defaults
				if sol-line-type = 'SN'
				and stk-stock-status not in {'L','Z'}
				and (i50entry-sales-credit = YES
				or i50entry-return-authorisation = YES)
					set lf-saved-sol-update-whse = sol-update-whse
					do i50lines-ask-if-it-affects-stock
					if lf-saved-sol-update-whse <> sol-update-whse
					and get-param(5) != '-pos'
						if sol-update-whse = 'Y'
							get stock-master
								key is stock-code
							on error ENOREC
							else
								get stock-warehouse-detail
									key is stock-code so-whse-code
								on error ENOREC
								else
									do i5solicost-get-cost
								endon
							endon
						else
							set sol-item-cost = ZERO
							set sol-line-cost = ZERO
						endif
					endif
				endif
				//
				// The default sol-item-price must be calculated here as if the
				// user hits <F4> it will bypass the before-accept of sol-item-price
				// and not reset the price or the before-accept will no be performed if
				// the item-price is only displayed and not accepted(ie: project issue order)
				if sol-line-type = 'SN'
				and sol-price-overide-flag not in { "Y" "B"}
					// when ws-confirm = "R" in entry mode
				and screenmode() = entry	// Only recalc if in ENTRY mode ONLY !!!
					do determine-stock-item-price parameter TRUE
					RECALC_LINE_TOTALS()
				endif
				if i50lines-use-prior-sale-flag = TRUE
					set sol-item-price = i50lines-prior-sale-item-price
				endif
				if sol-shipped-qty > sol-ordered-qty
				and sol-ordered-qty > ZERO
					set sol-backorder-qty = 0
				elseif stk-condition-code = "O"		// obsolete item, cannot backorder
					if sol-ordered-qty > sol-shipped-qty
					and sol-ordered-qty > ZERO
						set sol-ordered-qty = lf-save-ordered-qty
					else
						set sol-backorder-qty = ZERO
					endif
				elseif so-part-shipment-allowed in {'B' 'C'}
				and sys-ask-for-bo-screens = YES
					// If there is no backorder qty, nothing gets orderd on the
					// linked puchase order if this sales order is a direct shipment
					if not so-order-type-code = I5SO_TYPE_DIRECT_SHIP
						set sol-backorder-qty = 0
					endif
				elseif so-part-shipment-allowed = 'D'
					//Don't set backorder default to 0 if already existing.
				else
					// need to check if this line has 'other whses' allocated to it.
					set lf-other-whse-lines-detected = false
					select *
						from sales-order-line-notes
					when so-order-no = :so-order-no
						and so-bo-suffix = :so-bo-suffix
						and sol-line-seq = :sol-line-seq
						and soln-type = '~W'
					detail
						set lf-other-whse-lines-detected = true
						break
					endselect
					if lf-other-whse-lines-detected
						// if other whse lines, leave b/o qty zero
					else
						set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
					endif
				endif
				//
			endif
		endif
		RECALC_LINE_TOTALS()
		// Need to trap actual value input e.g. -1 or 1
		set lf-validated-order-qty = FALSE
	end-before-accept
	on help-key
		if (sol-line-date != ZERO)
			// Use the expected delivery date for the line item.
			set lf-atp-date = sol-line-date
		else
			// Use the expected delivery date for the sales order.
			set lf-atp-date = so-delivery-date
		endif
		//
		//1.00 start [>
		if stock-code = "300000" and i50linec-calculate
			open tmp-stock-location temporary create
			on error
				open tmp-stock-location temporary create
				on error
					message 'cannot open temporary file'
				else
				endon
			else
			endon
			do insert-tmp-stock-location
			do i50linec-lot-allocation
			//message " line number 17115"
			refresh data
			re-enter optional
		else
		//1.00 end <]
			spl 'stk/m4stkqenq.spl'
				parameters
					stock-code
					"B"
					"-atp"
					login-id()
					julian-to-date(lf-atp-date)
				leave-files-open
			reenter optional
		endif																							//1.00
	endon
	validation
		if screenmode() <> form-entry-defaults
			//
			do check-uom-decimal
				parameter sol-ordered-qty
				returning lf-check-uom-decimal-ok
			if not lf-check-uom-decimal-ok
				reenter sol-ordered-qty
			elseif sol-ordered-qty = 0
				message 'Order Quantity is required. Please enter.' pause
				reenter sol-ordered-qty
			endif
			//
			do public-check-base-uom-conversion
				parameters
					sales-order-line.*
					stock-code
				returning
					lf-check-base-uom-conversion
			//
			if sol-stk-unit-desc != stk-unit-desc
			and (sol-ordered-qty * sol-stk-unit-conversion) % lf-base-uom-rounding
			and lf-check-base-uom-conversion
				message-box "Converted quantity has more decimals than the base unit allows."
					title "Conversion Error"
					message-buttons MSG_BOX_OK
					icon MSG_BOX_STOP
					tag 11
				reenter sol-ordered-qty
			endif
			if not lf-validated-order-qty
				if so-order-type-code = I5SO_TYPE_DIRECT_SHIP
					if sol-line-type = 'SN'
						spl "so/m50extra"
							parameters "-qtycheck" stock-code str(sol-ordered-qty)
										str(sol-stk-unit-conversion) sol-stk-unit-desc so-whse-code
							returning lf-reenter-needed leave-files-open
						set lf-reenter-message = substring(lf-reenter-needed,2,13)
						if substring(lf-reenter-needed,1,1) = 'A'
							message "Can't enter negative quantities for direct ship order."
							reenter optional
						elseif substring(lf-reenter-needed,1,1) = 'B'
							message "Error converting qty to supplier's UOM. Next valid qty is: " lf-reenter-message
							reenter optional
						elseif substring(lf-reenter-needed,1,1) = 'C'
						and sol-ordered-qty != lf-save-ordered-qty
							message "Warning: Order quantity is not a multiple of supplier qty.  Next valid qty: " lf-reenter-message
						elseif substring(lf-reenter-needed,1,1) = 'D'
						and sol-ordered-qty != lf-save-ordered-qty
							message "Warning: Order quantity is less than economic qty " lf-reenter-message
						endif
						//Just in case the ordered quantity is adjusted to less than
						//the shipped quantity.
						if sol-ordered-qty < sol-shipped-qty
							message "Quantity ordered is less than the quantity shipped"
							reenter optional
						endif
					endif
					//When setting the backorder quantity take into account any
					//shipped quantity that may exist.  This can occur when the
					//sales order is modified after the purchase order has been
					//updated, otherwise the shipped quantity will be ZERO.
					set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
					if screenmode() = correct
					and so-order-status != I5SO_BEING_ENTERED
						message 'WARNING: Direct Ship - correcting purchase order'
						set ws-correct-po = TRUE
					endif
				endif
				//If the line is a kit component linked to a ZSHORTSHIP
				//line then do not allow the order quantity to be reduced as
				//this represents an amount that has already been invoiced.
				if lf-zshortship-link
				and sol-ordered-qty < lf-save-ordered-qty
					message-box 'The ordered quantity on a short-shipped kit component cannot be reduced'
						title 'Update Quantity Ordered'
						message-buttons MSG_BOX_OK
						icon MSG_BOX_STOP
						tag 10
					reenter sol-ordered-qty
                endif
                //
				do validate-order-qty same
					returning lf-reenter-status lf-reenter-message
				if lf-reenter-message != SPACES
					message lf-reenter-message
				endif
				if lf-reenter-status = 'R'
					reenter optional
				elseif lf-reenter-status = 'P'
					pause
				else
					refresh sol-ordered-qty
				endif
				// Stop the conversion of the quantity the second time
				// when exiting form entry.
				set lf-validated-order-qty = TRUE
			endif
		endif
	endvalidation
	on change
		if screenmode() <> form-entry-defaults
			if sol-line-type = 'SN'
			and stk-stock-status not in {'L','Z'}
			and (i50entry-sales-credit = YES
			or i50entry-return-authorisation = YES)
				set lf-saved-sol-update-whse = sol-update-whse
				do i50lines-ask-if-it-affects-stock
				if lf-saved-sol-update-whse <> sol-update-whse
				and get-param(5) != '-pos'
					if sol-update-whse = 'Y'
						get stock-master
							key is stock-code
						on error ENOREC
						else
							get stock-warehouse-detail
								key is stock-code so-whse-code
							on error ENOREC
							else
								do i5solicost-get-cost
							endon
						endon
					else
						set sol-item-cost = ZERO
						set sol-line-cost = ZERO
					endif
				endif
			endif
			//
			// The default sol-item-price must be calculated here as if the
			// user hits <F4> it will bypass the before-accept of sol-item-price
			// and not reset the price or the before-accept will no be performed if
			// the item-price is only displayed and not accepted(ie: project issue order)
			if sol-line-type = 'SN'
			and sol-price-overide-flag not in { "Y" "B"}
				// when ws-confirm = "R" in entry mode
			and screenmode() = entry	// Only recalc if in ENTRY mode ONLY !!!
				do determine-stock-item-price parameter TRUE
				RECALC_LINE_TOTALS()
			endif
			if i50lines-use-prior-sale-flag = TRUE
				set sol-item-price = i50lines-prior-sale-item-price
			endif
			if sol-shipped-qty > sol-ordered-qty
			and sol-ordered-qty > ZERO
				set sol-backorder-qty = 0
			elseif stk-condition-code = "O"		// obsolete item, cannot backorder
				if sol-ordered-qty > sol-shipped-qty
				and sol-ordered-qty > ZERO
					reenter sol-ordered-qty
				else
					set sol-backorder-qty = ZERO
				endif
			elseif so-part-shipment-allowed in {'B' 'C'}
			and sys-ask-for-bo-screens = YES
				// If there is no backorder qty, nothing gets orderd on the
				// linked puchase order if this sales order is a direct shipment
				if not so-order-type-code = I5SO_TYPE_DIRECT_SHIP
					set sol-backorder-qty = 0
				endif
			elseif so-part-shipment-allowed = 'D'
				//Don't set backorder default to 0 if already existing.
			else
				// need to check if this line has 'other whses' allocated to it.
				set lf-other-whse-lines-detected = false
				select *
					from sales-order-line-notes
				when so-order-no = :so-order-no
					and so-bo-suffix = :so-bo-suffix
					and sol-line-seq = :sol-line-seq
					and soln-type = '~W'
				detail
					set lf-other-whse-lines-detected = true
					break
				endselect
				if lf-other-whse-lines-detected
					// if other whse lines, leave b/o qty zero
				else
					set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
				endif
			endif
			//
		endif
		RECALC_LINE_TOTALS()
	endon
	//
	accept sol-shipped-qty @16,11 pic -(8)9t9999
		title 'Ship :'
		help "Enter the actual quantity shipped to the customer"
		default sol-shipped-qty
		show-value
		when sol-line-type in { 'SN','KN' }
			and sol-ordered-qty >= 0
			and sol-print-line not in { 'J' 'V' }
			and so-order-type-code not in { I5SO_TYPE_PROFORMA I5SO_TYPE_DIRECT_SHIP }
			and i50entry-sales-credit = NO
			and i50entry-return-authorisation = NO
			and ws-order-flag != CUSTOMER
			and not ws-sopl-record-exists
			and i50lines-other-whses-selected = "N"
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			reenter sol-shipped-qty
		endif
	endon
	before-accept
		if screenmode() = entry
		and I5PIECES_PRODUCT
			do i5pieces-get-tally-info
				parameters are stock-code stk-description
					stk-measurement-flag
				returning lf-field-ok sol-shipped-qty
		endif
		RECALC_LINE_TOTALS()
	end-before-accept
	validation
		if screenmode() <> form-entry-defaults
			if sol-shipped-qty > sol-ordered-qty
			and sol-ordered-qty > ZERO
				message-box "WARNING: Quantity ordered is less than quantity shipped"
					title "Ship Quantity"
					message-button MSG_BOX_OK
					icon MSG_BOX_WARNING
					tag 1431
			endif
			if sol-shipped-qty < 0
			and stk-stock-status not in {'L','Z'}
				message 'Please only enter positive figures'
				reenter
			endif
			//
			do clib407-get-cost-method
				parameters
					stock-code
					so-whse-to
					sys-cost-to-use
				returning
					lf-cost-to-use
			//
			if sol-shipped-qty < 0
			and so-order-status in I5SOSTATII_OUTSTANDING_TRANSFERS_STATII
			and not (lf-cost-to-use = 'A'
					and sys-charge-for-inter-transfers = 'D'
					and stk-stock-status in { 'S' 'M' 'R' }
					and stk-serialized-flag != 'Y'
					and sol-line-type = 'SN'
					and i50lines-whse-type not in IWTYPEDEF_DISTRIB_WHSE
					and ws-to-whse-type not in IWTYPEDEF_DISTRIB_WHSE
					and i50lines-whse-type != IWTYPEDEF_VAN_WHSE
					and ws-to-whse-type != IWTYPEDEF_VAN_WHSE
					and so-whse-to not = SPACES)
				// Negative transfer order is only allowed for transferring normal
				// non-serialized stocked item between normal warehouse when
				// normal pricing is used.
				message 'Please only enter positive figures'
				reenter
			endif
			//
			if ws-orig-whse-bo-flag in {'2' '3'}
			and stk-stock-status not in { 'L','Z' }
			and so-order-source != I5SOURCE_SERVICE_REPAIR
			and sol-shipped-qty > i50entry-sol-shipped-qty
			and sol-shipped-qty != 0
			and not ws-SO-S007
				if sys-avail-stk-calc-for-sale in { "0" "1" "2" }
				and sol-shipped-qty > (ws-available-stk +
									   i50entry-sol-shipped-qty +
									   i50entry-sol-backorder-qty)
					// the original backorder qty and the original shipped qty is
					// included in the available stk calc. So include it.
					message concat("Cannot ship more than available stock ",
						format-picture(ws-available-stk + i50entry-sol-backorder-qty +
							i50entry-sol-shipped-qty, "-(8)9t9999" ))
					reenter
				elseif sys-avail-stk-calc-for-sale in { "3" "4" }
				and	sol-shipped-qty > (ws-available-stk +
									   i50entry-sol-shipped-qty )
					// only the original shipped qty is included in
					// the available stk calc. So include it.
					message concat("Cannot ship more than available stock ",
						format-picture(ws-available-stk +
							i50entry-sol-shipped-qty, "-(8)9t9999" ))
					reenter
				endif
			endif
			if sol-print-line = 'T'	// taken lines
			and sol-shipped-qty <> sol-ordered-qty
			and sol-line-type != 'WN'
				message 'Cannot change ship quantity, these goods are already taken'
				set sol-shipped-qty = sol-ordered-qty
				reenter sol-shipped-qty optional
			endif
			//
			do check-uom-decimal
				parameter sol-shipped-qty
				returning lf-check-uom-decimal-ok
			if not lf-check-uom-decimal-ok
				reenter sol-shipped-qty
			endif
			//
			do public-check-base-uom-conversion
				parameters
					sales-order-line.*
					stock-code
				returning
					lf-check-base-uom-conversion
			//
			if sol-stk-unit-desc != stk-unit-desc
			and (sol-shipped-qty * sol-stk-unit-conversion) % lf-base-uom-rounding
			and lf-check-base-uom-conversion
				message-box "Converted quantity has more decimals than the base unit allows."
					title "Conversion Error"
					message-buttons MSG_BOX_OK
					icon MSG_BOX_STOP
					tag 13
				reenter sol-shipped-qty
			endif
			//
			if sys-whse-detail-stream-update = YES
			and stk-stock-status not in { "K" "L" "Z" }
			and sol-line-type in { "SN" "WN" "RR" }
				do lines-place-stock-reservation
					parameters so-order-no so-bo-suffix sol-line-seq
						stock-code sol-stk-unit-conversion
						so-whse-code sol-ordered-qty sol-line-type
						i5pricemod-bill-to ws-van-id
						so-whse-to i50entry-transfer-between-whse
						sol-stk-unit-desc
					returning lf-reenter
				if lf-reenter
					reenter
				endif
			endif
			//
			if i50entry-sol-shipped-qty = ZERO
			and sol-shipped-qty != i50entry-sol-shipped-qty
				get sales-order-line-purchase
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix sol-line-seq
				on error
					set lf-link-to-po-found = FALSE
				else
					set lf-link-to-po-found = TRUE
				endon
				if lf-link-to-po-found
					message 'Cannot change ship quantity, PO link found. Please remove the link first.'
					set sol-shipped-qty = i50entry-sol-shipped-qty
					refresh data
					reenter sol-ordered-qty
				endif
			endif
			//This should perform every time we pass through sol-shipped-qty
			if stk-condition-code = "O"		// obsolete item, cannot backorder
				if sol-ordered-qty > sol-shipped-qty
				and sol-ordered-qty > ZERO
					message "Obsolete Stock - Cannot backorder this item."
					reenter sol-ordered-qty
				else
					set sol-backorder-qty = ZERO
				endif
			endif
		endif
	endvalidation
	on change
		if screenmode() <> form-entry-defaults
			if sol-shipped-qty > sol-ordered-qty
			and sol-ordered-qty > ZERO
				set sol-backorder-qty = 0
			elseif so-part-shipment-allowed in {'B' 'C'}
			and sys-ask-for-bo-screens = YES
				set sol-backorder-qty = 0
			elseif so-part-shipment-allowed = 'D'
				//Don't set backorder default to 0 if already existing.
			else
				set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
			endif
			//
			if sol-shipped-qty > (ws-available-stk + i50entry-sol-shipped-qty
				+ i50entry-sol-backorder-qty)
			and sol-shipped-qty != 0
			and sol-line-type in { 'SN','KN' }
			and stk-stock-status not in { 'L','Z' }
			and sol-shipped-qty > i50entry-sol-shipped-qty
				if sys-point-of-sale-mode-used = '3'
				and get-param(5) = '-pos'
					message-box 'WARNING: Quantity shipped exceeds available stock'
						title "Stock Warning"
						message-buttons MSG_BOX_OK
						icon is MSG_BOX_WARNING
						optional
						tag 1
					set sol-backorder-qty = ZERO
				elseif ws-orig-whse-bo-flag in {'2' '3'}
				and so-order-source != I5SOURCE_SERVICE_REPAIR
				and not ws-SO-S007
					message 'Error: Quantity shipped exceeds available stock'
					reenter sol-shipped-qty
				else
					message-box 'WARNING: Quantity shipped exceeds available stock'
						title "Stock Warning"
						message-buttons MSG_BOX_OK
						icon is MSG_BOX_WARNING
						optional
						tag 2
				endif
			endif
		endif
		if screenmode() <> form-entry-defaults
		and i50entry-sales-credit = NO
		and i50entry-transfer-between-whse = NO
		and stk-stock-status not in {'L','Z'}
		and sys-confirm-for-broken-pack not between '0' and '9'
			if i50entry-return-authorisation = NO
				do i5brknpack-check-for-broken-pack-quantities
					parameters
						sol-shipped-qty			//quantity to check
						sol-stk-unit-conversion	//conv factor for base unit
						stock-code				//stock-code involved
						NO						//get stock-master (Y/N)
						NO					//automatically round up (Y/N) if
											//sys-confirm-for-broken-pack = 'R'
						NO					//issue warning only (Y/N)
					returning
						lf-partial-pack-flag	//NO = partial pack not allowed
						lf-new-quantity			//could have been rounded up
				if lf-partial-pack-flag = NO
					reenter sol-shipped-qty
				elseif sol-shipped-qty <> lf-new-quantity
					set sol-shipped-qty = lf-new-quantity
					refresh sol-shipped-qty
				endif
			elseif i50entry-return-authorisation = YES
				//Check for broken pack but issue warning only
				do i5brknpack-check-for-broken-pack-quantities
					parameters
						sol-shipped-qty			//quantity to check
						sol-stk-unit-conversion	//conv factor for base unit
						stock-code				//stock-code involved
						NO						//get stock-master (Y/N)
						NO					//automatically round up (Y/N) if
											//sys-confirm-for-broken-pack = 'R'
						YES					//issue warning only (Y/N)
					returning
						lf-partial-pack-flag	//NO = partial pack not allowed
						lf-new-quantity			//could have been rounded up
			endif
		endif
		RECALC_LINE_TOTALS()
	endon
	//
	accept sol-backorder-qty @17,11 pic -(8)9t9999
		title 'Back Ord:'
		help "Enter the quantity of goods put on backorder"
		show-value
		default sol-backorder-qty
		when sol-line-type in { 'SN','KN' }
			and sol-ordered-qty >= 0
			and sol-print-line not in { 'J'	'V' }
			and so-order-type-code not in { I5SO_TYPE_PROFORMA I5SO_TYPE_DIRECT_SHIP }
			and i50entry-sales-credit = NO
			and i50entry-return-authorisation = NO
			and ws-order-flag != CUSTOMER
			and (ws-orig-whse-bo-flag != '2' or (ws-orig-whse-bo-flag in {'2' '3'} and ws-SO-S007))
			and stk-condition-code <> "O"		// obsolete item, cannot backorder
			and not ws-sopl-record-exists
			and i50lines-other-whses-selected = "N"
	before-accept
		RECALC_LINE_TOTALS()
	end-before-accept
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			reenter sol-backorder-qty
		endif
	endon
	validation
		if sol-backorder-qty < 0
			message 'You must enter a positive quantity'
			reenter
		endif
		//
		if stk-condition-code = 'L'
		and sol-backorder-qty != ZERO
			message 'Item flagged for no backorders'
			set sol-backorder-qty = ZERO
			reenter
		endif
		//
		if so-part-shipment-allowed = 'D'
		and sol-backorder-qty > 0
			message "WARNING: Account doesn't usually accept backorders."
		elseif sol-backorder-qty + sol-shipped-qty != sol-ordered-qty
		and ws-orig-whse-bo-flag in {'2' '3'}
		and sol-backorder-qty > 0
			message "Backorder plus shipped quantity does not equal ordered quantity"
			reenter
		endif
		//
		do check-uom-decimal
			parameter sol-backorder-qty
			returning lf-check-uom-decimal-ok
		if not lf-check-uom-decimal-ok
			reenter sol-backorder-qty
		endif
		//
		do public-check-base-uom-conversion
			parameters
				sales-order-line.*
				stock-code
			returning
				lf-check-base-uom-conversion
		//
		if sol-stk-unit-desc != stk-unit-desc
		and (sol-backorder-qty * sol-stk-unit-conversion) % lf-base-uom-rounding
		and lf-check-base-uom-conversion
			message-box "Converted quantity has more decimals than the base unit allows."
					title "Conversion Error"
					message-buttons MSG_BOX_OK
					icon MSG_BOX_STOP
					tag 15
			reenter sol-backorder-qty
		endif
	endvalidation
	on change
		if screenmode() <> form-entry-defaults
		and i50entry-sales-credit = NO
		and i50entry-return-authorisation = NO
		and i50entry-transfer-between-whse = NO
		and stk-stock-status not in {'L','Z'}
		and sys-confirm-for-broken-pack not between '0' and '9'
			do i5brknpack-check-for-broken-pack-quantities
				parameters
					sol-backorder-qty		//quantity to check
					sol-stk-unit-conversion	//conv factor to get to base unit
					stock-code				//stock-code involved
					NO						//get stock-master (Y/N)
					NO						//automatically round up (Y/N) if
											//sys-confirm-for-broken-pack = 'R'
					NO						//issue warning only (Y/N)
				returning
					lf-partial-pack-flag	//NO means partial pack not allowed
					lf-new-quantity			//could have been rounded up
			if lf-partial-pack-flag = NO
				reenter sol-backorder-qty
			elseif sol-backorder-qty <> lf-new-quantity
				set sol-backorder-qty = lf-new-quantity
				refresh sol-backorder-qty
			endif
		endif
	endon
	//
	if sol-print-line != 'J'
	and screenmode() not in { show correct }
		if not ws-ok-to-post-income
		or (ws-zero-price and ws-mode-type = 'E'
		and sol-line-type not in {'SS' 'SC' 'ST'})
		and sol-line-type in { 'SN','SS','RN','RS' }
			if sol-price-overide-flag != "U"
				set sol-price-overide-flag = YES
			endif
			if sys-so-pricing-method = 'C'
				set sol-disc-rate = 0
				set sol-extra-item-disc-amt = 0
			endif
		endif
	endif
	//
	if i50lines-use-prior-sale-flag = FALSE
		set i50lines-prior-sale-item-price = sol-item-price
	endif
	accept sol-item-price @2,104 pic z(12)9.9(4)
		title 'Item Price:'
		help ws-item-price-help
		default i50lines-prior-sale-item-price
		show-value
		when sol-line-type in { 'SN','WN','RR','RN','RS' }
			and ws-ok-to-post-income
			and ws-order-flag != CUSTOMER
			and (sys-price-disc-entered not in { 'A' 'C' 'E'}
				or  (sys-price-disc-entered = 'A'
					and ws-is-user-a-credit-officer = YES)
				or  (sys-price-disc-entered = 'C'
					and sol-line-type = 'SN'
					and stk-stock-status in { 'Z' 'L' }
					and sol-item-price = 0 ))
			and sol-print-line != 'J'
			and not ws-limit-modes-fields-used
			and not (i50entry-transfer-between-whse = YES
					and ws-transfer-user-access = FALSE)
	before-accept
		set lf-show-message = TRUE
		if sol-line-type = 'SN'
		and ws-mode-type = "D"
		and screenmode() = form-entry-defaults
			// Display a default item price prior to accepting quantities when in detail-entry mode.
			do determine-stock-item-price parameter FALSE
			if sol-ordered-qty < 0
			and i50entry-sales-credit = NO
			and i50entry-return-authorisation = NO
			and stk-stock-status not in {'L','Z'}
			and so-order-source = I5SOURCE_SERVICE_REPAIR
				//return and from service repair default item price to zero
				set sol-item-price = 0
			else
				set sol-item-price = i5pricemod-item-price
			endif
			// Fields saved so that if the user overrides price and then resets price to original
			// value all while in detail-entry mode, the rule and discount can be reset also...
			set ws-saved-price-rule = sol-price-rule
			set ws-saved-disc-rate = sol-disc-rate
		endif
		if i50lines-use-prior-sale-flag = TRUE
			set sol-item-price = i50lines-prior-sale-item-price
			set i5pricemod-item-price = i50lines-prior-sale-item-price
		endif
	end-before-accept
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			reenter sol-item-price
		endif
	endon
	validation
		if screenmode() != form-entry-defaults
			if so-order-type-code = I5SO_TYPE_TAX_ONLY
			and sol-item-price != ZERO
				message "Tax Only orders can't have a value other than tax"
				set sol-item-price = ZERO
				reenter sol-item-price
			elseif (i50entry-transfer-between-whse = NO
				or (i50entry-transfer-between-whse = YES
				and sys-charge-for-inter-transfers in
					{ 'P' 'O' 'D' 'C' '1' '2' '3' '4' } ))//allow price
				and (i50entry-forward-transfer = NO
					or (i50entry-forward-transfer = YES
					and sys-charge-for-inter-transfers in
						{ 'P' 'O' 'D' 'C' '1' '2' '3' '4' } ))//allow price
				and lf-show-message
				do i50lines-check-zero-price
					parameters are sol-item-price ws-zero-price
					returning lf-zero-price-ok
				if sol-item-price = 0
					if lf-zero-price-ok = 2
						reenter
					elseif not lf-zero-price-ok
						message-box 'WARNING: Item price is zero'
							title "Item Price"
							icon MSG_BOX_WARNING
							message-buttons MSG_BOX_OK
							optional
							tag 4
					endif
				endif
				set lf-show-message = FALSE
			endif
			//
			if sol-line-type in { 'SN','WN','RR' }
			and screenmode() = entry
				if ws-order-flag = BRANCH
				and sol-item-price != i5pricemod-item-price
					set sol-item-price = i5pricemod-item-price
					message "You can't change the price"
					reenter
				elseif sol-item-price != i5pricemod-item-price
					if sol-price-overide-flag = I5SOSTATII_ALT_PRICE
						set sol-price-overide-flag = I5SOSTATII_ALT_OVER_PRICE
					elseif sol-price-overide-flag
					not in {I5SOSTATII_ALT_OVER_PRICE
								I5SOSTATII_STK_ALT_PRICE "U"}
						set sol-price-overide-flag = YES
					endif
					if sys-so-pricing-method = 'C'
						set sol-disc-rate = 0
						set sol-extra-item-disc-amt = 0
					elseif screenmode() != md-price
					and not i50lines-using-alt-unit-desc
					and sys-so-initial-line-mode = 'D'
					and not ws-no-change-on-disc-rate
						// to be consistent with ws-mode-type = 'E' where if
						// there is a price change,discount is set to zero
						// for ws-mode-type = 'D'
						set sol-disc-rate = 0
						set ws-no-change-on-disc-rate = TRUE
					endif
					if so-price-code in I5SOSTATII_RETAIL_PRICE_CODES
						//this is done so i5linecalc will recalc the wholesale price
						set sol-item-wholesale-price = 0
						do i50entry-do-line-calc same
					endif
				else
					if sol-price-overide-flag
					not in {I5SOSTATII_ALT_PRICE I5SOSTATII_STK_ALT_PRICE "U"
							I5SOSTATII_ALT_OVER_PRICE}
						set sol-price-overide-flag = NO
					endif
				endif
			elseif screenmode() = correct
			and sol-line-type = 'SN'
				if ws-order-flag = BRANCH
				and i50entry-sol-item-price != sol-item-price
					set sol-item-price = i50entry-sol-item-price
					message "You can't change the price"
					reenter
				elseif i50entry-sol-item-price != sol-item-price
					if sol-price-overide-flag = I5SOSTATII_ALT_PRICE
						set sol-price-overide-flag = I5SOSTATII_ALT_OVER_PRICE
					elseif sol-price-overide-flag
					not in {I5SOSTATII_ALT_OVER_PRICE I5SOSTATII_STK_ALT_PRICE
						"U"}
						set sol-price-overide-flag = YES
					endif
					if sys-so-pricing-method = 'C'
						set sol-disc-rate = 0
						set sol-extra-item-disc-amt = 0
					endif
					if so-price-code in I5SOSTATII_RETAIL_PRICE_CODES
						//this is done so i5linecalc will recalc the wholesale price
						set sol-item-wholesale-price = 0
						do i50entry-do-line-calc same
					endif
				endif
			endif
			//
			if screenmode() = correct
				if sol-item-price <> i50entry-sol-item-price
					set sol-price-rule = SPACES
				endif
			else
				if sol-item-price <> i5pricemod-item-price
					set sol-price-rule = SPACES
				endif
			endif
		endif
	endvalidation
	on change
		if screenmode() <> form-entry-defaults
			if sol-line-type in { 'SN','WN','RR' }
			and screenmode() = entry
			and sol-item-price = i5pricemod-item-price
			and not lf-accept-substitute
				// Price was overridden but has been reset to original so reset rule and discount.
				set sol-price-rule = ws-saved-price-rule
				set sol-disc-rate = ws-saved-disc-rate
			endif
			if sol-line-type = 'SN'
			and screenmode() = correct
			and i50entry-sol-item-price = ZERO
			and sol-item-price > 0
			and sys-so-pricing-method in {'A' 'B'}
				// Item price is changed from zero to non-zero. Will have to calculate
				// retail promotion if it is used in pricing rule but not created yet.
				// When previous item price is zero, sales-order-line-retail-promo record
				// which stores the promotion details is not created.
				get sales-order-line-retail-promo lookup
					on index so-order-no so-bo-suffix sol-line-seq
						solrp-promotion solrp-disc-code
					key so-order-no so-bo-suffix sol-line-seq
				on error ENOREC
					do i5linecalc-check-for-price-rule
					if i5linecalc-disc-in-notes = YES
						do i5pricemod-pricing-module
							parameter
								FALSE
						do check-if-promo-exists
							returning lf-promo-exists
						if lf-promo-exists
							do insert-discounts-into-retail-promo
							set lf-retail-promo-inserted = TRUE
						endif
					endif
				endon
			endif
			do get-price-rule-desc
				returning ws-option
			RECALC_LINE_TOTALS()
		endif
	endon
	//
	accept lf-price-uom-desc @3,104 pic x(18) right
		title 'Price Uom :'
		read-only
		default lf-price-uom-desc
	accept stk-pack-qty @4,104 pic z(15).zz
		title 'Pack      :'
		read-only
		default stk-pack-qty
	accept sol-stk-unit-conversion @5,104 pic z(12)9tzzzz
		title 'Conversion:'
		read-only
		default sol-stk-unit-conversion
	//
	accept sol-price-uom @6,104 pic z(16)z9
		title 'Per       :'
		help "Enter the pricing unit of measure"
		default sol-price-uom
		show-value
		when sol-line-type in { 'RR','RN','RS' }	// non stock only
			and ws-order-flag != CUSTOMER
			and sol-print-line != 'J'
			and (sys-price-disc-entered not in { 'A' 'C' 'E'}
				or  (sys-price-disc-entered = 'A'
				and ws-is-user-a-credit-officer = YES))
	before-accept
		RECALC_LINE_TOTALS()
	end-before-accept
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			reenter sol-price-uom
		endif
	endon
	on change
		if sol-line-type in { 'RS' }
			set stk-price-per = sol-price-uom
		endif
	endon
	//
	accept sol-disc-rate @7,104 pic z(13)9.999
		title 'Discount % :'
		help "Enter the discount rate applicable to this line item"
		default sol-disc-rate
		show-value
		when sol-line-type in { 'RS' 'RN' 'SN' 'WN'}
			and sys-cgd-flg in { YES,'M','L','Z' 'X' 'O' 'S' 'T' 'U' '1' '2' '3' '4'}
			and ws-ok-to-post-income
			and ws-order-flag not in { BRANCH CUSTOMER }
			and i50entry-transfer-between-whse != YES
			and i50entry-forward-transfer = NO
			and (sys-price-disc-entered not in { 'A' 'C' }
			or  (sys-price-disc-entered = 'A' and ws-is-user-a-credit-officer = YES))
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			if sol-disc-rate > 100
				message "Discount cannot be more than 100%"
			endif
			reenter sol-disc-rate
		endif
	endon
	before-accept
		if sys-cgd-flg in { 'M' 'L' }
		and sol-line-type = 'SN'
		and screenmode() = entry
		and sol-disc-rate = 0
		and ws-ok-to-post-income
		and i5pricemod-is-disc-to-be-used = YES
			do i50entry-get-multiple-discounts entry once
			if i50entry-reenter-needed = TRUE
				reenter sol-item-price optional
			endif
			set lf-multi-disc-rate-ok = TRUE
			set sol-disc-rate = i50entry-mult-disc-rate
		endif
		RECALC_LINE_TOTALS()
	end-before-accept
	validation
		if sys-cgd-flg in { 'M' 'L' }
		and sol-line-type = 'SN'
		and screenmode() = entry
		and sol-disc-rate = 0
		and ws-ok-to-post-income
		and i5pricemod-is-disc-to-be-used = YES
		and not lf-multi-disc-rate-ok
			// The reason this is duplicated is if the user hits <F4> prior to this
			// the before-accept is bypassed and this procedure is not executed.
			do i50entry-get-multiple-discounts entry once
			set sol-disc-rate = i50entry-mult-disc-rate
			if i50entry-reenter-needed = TRUE
				reenter sol-disc-rate optional
			else
				refresh sol-disc-rate
			endif
		endif
	endvalidation
	on change
		RECALC_LINE_TOTALS()
	endon
	//
	accept lf-solt-tax-code @8,104 pic x(8)
		title ws-tax-prompt
		default lf-solt-tax-code
		read-only
	accept sol-tax-rate @8,113 pic zz9.zzzz%
		default sol-tax-rate
		read-only
	//
	accept sol-item-wholesale-price @9,104 pic z(12)z.zzzz
		title "Wholesale :"
		read-only
		default sol-item-wholesale-price
	//
	accept ws-option @10,104 pic x(18)
		title "Price Source:"
		read-only
		default ws-option
	//
	if sol-print-line = EQUIPMENT_TRADE
		// Do this just to set cost type flag
		I8STKCOST_CALC_STOCK_COST(lf-sol-item-cost)
	endif
	//
	accept lf-display-item-cost @14,104 pic z(8)9.9999
		title ws-item-costs-prompt
		help 'Enter the item buy price from the supplier - Item Cost'
		default lf-display-item-cost
		show-value
		when
			(sol-line-type in {'RN','RS'}			// always show cost
			or (i50entry-show-costs in { YES 'B' }
				and sol-line-type in {'SN','WN','RR'}
				and ((stk-stock-status = 'I' and ws-available-stk <= 0)
					or sol-print-line = 'G'
					or stk-stock-status in { 'L' 'Z' })))
			and ws-ok-to-post-cost
			and ws-order-flag != CUSTOMER
			and not (sol-line-type = "RN" and substring(stock-code ,1,6) = "H     ")
			and not (sol-print-line = EQUIPMENT_TRADE and i8stkcost-cost-used = I8STKCOST_STD)
			and sol-print-line != 'J'
	before-accept
		if sol-line-type = 'SN'			// only normal lines
		and sol-item-cost = 0			// only for zero costs
		and sol-item-price != 0			// and we have a price
		and stk-stock-status in { 'L' 'Z'}
		and so-curr-code = SPACES
			do i50entry-determine-cost-from-gp
		endif
		//
		if not ws-ok-to-post-cost
		and screenmode() = entry
			set sol-item-cost = ZERO
		endif
	end-before-accept
	time-out is i50lines-time-out
	on error
		if screenmode() = entry
			do i50strupd-perform-global-unlock
				parameters so-order-no so-bo-suffix sol-line-seq
					TRUE	//Timed out.
					i50entry-stock-warehouse-locked
					stock-code so-whse-to i50entry-transfer-between-whse
					TRUE	//Remove any stock reservation.
				returning i50entry-stock-warehouse-locked
			exit
		else
			reenter lf-display-item-cost
		endif
	endon
	validation
		set sol-item-cost = lf-display-item-cost
		if i50entry-sales-credit = NO
		and i50entry-return-authorisation = NO
		and sol-item-cost < 0
			message 'Please only enter positive figures'
			reenter optional
		endif
		if sol-print-line = 'G'
		and sol-item-price != sol-item-cost
			message-box "Item price is not the same as the item cost"
				title "Item Price"
				icon MSG_BOX_WARNING
				message-buttons MSG_BOX_OK
				optional
				tag 3
		endif
	endvalidation
	on change
		RECALC_LINE_TOTALS()
	endon
	//
	// This field is set in i5linecalc based on the MFF sys-licence-type = '2'
	// and stk-licences-rebate-flag in { 'L' 'T' }
	// calc. when sys-so-use-of-extra-item-rate = 'F'
	accept sol-extra-item-disc-amt @9,50 pic -(8)z.zzzz
		title "Licence Amount:"
		read-only
		default sol-extra-item-disc-amt
	//
	accept sol-extra-item-rate @10,50 pic -(10)z.zz
		title "Extra Amount  :"
		read-only
		default sol-extra-item-rate
	//
	accept sol-line-amount @15,43 pic -(10)9.99
		title 'Total:'
		read-only
		default sol-line-amount
		when sol-line-type <> 'KN'
		no-warning
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
		set lf-ex-tax-amount = ZERO
	else
		set lf-ex-tax-amount = sol-line-amount - sol-ordered-sales-tax-amt
	endif
	accept lf-ex-tax-amount @16,43 pic -(10)z.zz
		title 'Ex Tax:'
		read-only
		default lf-ex-tax-amount
		when sol-line-type <> 'KN'
		no-warning
	accept sol-ordered-sales-tax-amt @17,43 pic -(10)9.99
		title ws-tax-prompt
		read-only
		default sol-ordered-sales-tax-amt
		when sol-line-type <> 'KN'
		no-warning
	accept sol-ordered-disc-amt @18,43 pic -(10)9.99
		title 'Discount:'
		read-only
		default sol-ordered-disc-amt
		when sol-line-type <> 'KN'
		no-warning
	//
	accept sol-shipped-amount @15,58 pic -(10)9.99
		read-only
		default sol-shipped-amount
		when sol-line-type <> 'KN'
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
		set lf-ex-tax-amount = ZERO
	else
		set lf-ex-tax-amount = sol-shipped-amount - sol-shipped-sales-tax-amt
	endif
	accept lf-ex-tax-amount @16,58 pic -(10)z.zz
		read-only
		default lf-ex-tax-amount
		when sol-line-type <> 'KN'
	accept sol-shipped-sales-tax-amt @17,58 pic -(10)9.99
		read-only
		default sol-shipped-sales-tax-amt
		when sol-line-type <> 'KN'
	accept sol-shipped-discount-amt @18,58 pic -(10)9.99
		read-only
		default sol-shipped-discount-amt
		when sol-line-type <> 'KN'
	//
	accept lf-sol-backorder-amount @15,73 pic -(10)9.99
		read-only
		default lf-sol-backorder-amount
		when sol-line-type <> 'KN'
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
		set lf-ex-tax-amount = ZERO
	else
		set lf-ex-tax-amount = lf-sol-backorder-amount - lf-sol-backorder-sales-tax-amt
	endif
	accept lf-ex-tax-amount @16,73 pic -(10)z.zz
		read-only
		default lf-ex-tax-amount
		when sol-line-type <> 'KN'
	accept lf-sol-backorder-sales-tax-amt @17,73 pic -(10)9.99
		read-only
		default lf-sol-backorder-sales-tax-amt
		when sol-line-type <> 'KN'
	accept lf-sol-backorder-discount-amt @18,73 pic -(10)9.99
		read-only
		default lf-sol-backorder-discount-amt
		when sol-line-type <> 'KN'
	//
	accept lf-ordered-cost @15,104 pic s(10)9.99
		title ws-ordered-costs-prompt
		read-only
		default lf-ordered-cost
		when (i50entry-show-costs in { YES 'B' }
		and sol-line-type in { 'SN','WN' })
		no-warning
	//
	accept lf-shipped-cost @16,104 pic s(10)9.99
		title ws-shipped-costs-prompt
		read-only
		default lf-shipped-cost
		when (i50entry-show-costs in { YES 'B' }
		and sol-line-type in { 'SN','WN' })
		no-warning
	//
	accept i50entry-gp-string @17,104 pic x(14) right-justify
		title ws-gp-prompt
		help 'Enter the gp percentage, to determine the item price or cost'
		default i50entry-gp-string
		when i50entry-show-costs in { YES 'B' }
		read-only
		no-warning
	//
	accept sol-user-only-alpha4-1 suppress
	accept sol-user-only-alpha4-2 suppress
	accept sol-user-only-date1 suppress
	accept sol-user-only-num1 suppress
	accept sol-user-only-num2 suppress
	//
	accept lf-confirm @20,104 pic x(2)
		title 'Action: '
		help "Enter line action or press [HELP]"
		allow SPACES 'D' 'E' 'F' 'H' 'I' 'K' 'M' 'O' 'S' 'T' 'W' 'Z'
		uppercase
		show-value
		when screenmode() = entry
	on help-key
		do help-for-confirm
			parameter 'detail'
			returning lf-confirm
		reenter lf-confirm optional
	endon
	on change
		if lf-confirm = 'D'
			do get-line-delivery-address
			set sol-whse-code = na-type
		elseif lf-confirm = 'E'
			if so-order-type-code = I5SO_TYPE_DIRECT_SHIP
				//Splitting of orders not handled for these orders.
				message "Different expected delivery dates not allowed for direct ship orders."
			else
				do get-delivery-date
			endif
		elseif lf-confirm = 'F'
			set sol-print-line = 'F'
			message  "Line flagged as: F - Factory to Supply Item"
		elseif lf-confirm = 'H'
			set sol-print-line = 'N'
			message 'Line flagged as hidden.'
		elseif lf-confirm = 'I'
			set sol-print-line = 'I'
			message "Line flagged to be sourced Internally"
		elseif lf-confirm = 'K'
			if stk-stock-status in { 'L' 'Z' }
			or sol-shipped-qty != 0
			or sys-raise-po-from-so in {'0' '1' }
				message "This option is not available for shipped or non stocked items"
			else
				set sol-print-line = 'K'
				message 'Treat this item as an Indent item.'
			endif
		elseif lf-confirm = 'M'
			set sol-print-line = 'M' // add to manufacturing order
			message 'Item flagged as Manufactured item!'
			do public-allow-manuf-packing-maintenance
				parameter
					sales-order.*
					sol-line-seq
		elseif lf-confirm = 'O'		//Other Notes
			get stock-master
				on index stock-code
				key is stock-code
			on error
				set stk-issue-control-code = SPACES
				set stk-packaging-flag = SPACES
				set stk-licences-rebate-flag = SPACES
				set stk-outside-supplier-flag = SPACES
				set stk-measurement-flag = SPACES
			endon
			do ask-type-of-note-line
		elseif lf-confirm = 'S'
			if sol-line-type = 'WN'
			or i50lines-other-whses-selected = YES
				message "WARNING: Can't use substitute items as it relates to another warehouse"
			elseif ws-orig-whse-bo-flag = '3'
				message 'Substitute item code not available at this point'
			elseif sol-line-type <> 'SN'
				message 'Substitutes only available for normal item codes'
			else
				set sol-substitute-flag = "@"
				set lf-accept-substitute = TRUE
				set lf-confirm = SPACES
				refresh lf-confirm
				refresh prompts
				reenter lf-item-substitute optional
			endif
		elseif lf-confirm = 'T'
			if sol-backorder-qty != 0
				message 'Can only mark lines as taken, if zero on backorder'
			elseif i50lines-whse-type = IWTYPEDEF_DISTRIB_LOC_PICK
			and get-param(1) != '-cash'
				// -cash is from POS, where the SO status is changed to ready
				// to update.
				message concat('Invalid option selected for type 3 '
						'(WMS controlled) warehouse, reenter.')
			elseif (sol-line-type = 'WN'
				or i50lines-other-whses-selected = YES)
				and sys-supply-from-other-whse not in { 'S' 'N'}
					message 'Can only take when shipping direct from other warehouse'
			else
				set sol-print-line = 'T'
				message 'Item flagged as Taken!'
			endif
		elseif lf-confirm = 'W'
			if i50lines-other-whses-selected = YES
				message 'Other Warehouses have already been selected'
			else
				//Go straight to asking what they want to do - no balances screen
				set i50lines-saved-available-stk = 0
				// Note the other warehouse function only works for the quantity on back order
				if sol-disc-rate <> i5pricemod-discount
				and sol-price-overide-flag in { NO SPACES }
				and i5pricemod-price-used != 0
				and i5pricemod-price-rule[i5pricemod-price-used] not = '06'
					message "Warning: The discount rate may be reset "
						"when selecting a different warehouse."
				endif
				do i50lines-stock-balance-and-select
				//
				set i50entry-qty = sol-shipped-qty
				do i50entry-get-conversion-factor
				do clib406-calc-line-cost
					parameters
						sol-item-cost
						sol-ordered-qty
						sol-shipped-qty
						sol-line-type
						sol-stk-unit-conversion
						sol-stk-unit-desc
						stk-price-per
					returning
						sol-ordered-line-cost
						sol-line-cost
				do i50entry-calc-shipped-totals same
				if i50lines-reenter-stk-qty-flag = 'Q'
					set i50lines-reenter-stk-qty-flag = SPACES
					reenter sol-ordered-qty optional
				endif
			endif
		elseif lf-confirm = 'Z'
			do ask-for-short-ship-reason entry once
		endif
		//
		set lf-confirm = SPACES
		refresh lf-confirm
		do bb-get-extra-line-info
			returning	lf-extra-line-info
		refresh lf-extra-line-info
	endon
	//
	confirm
		default YES
	before
		if I5PIECES_PRODUCT and screenmode() = correct
			set i5pieces-load-from-existing = TRUE
			set i5pieces-load-from-type = 'SO'
			if lf-first-time
				do i5pieces-get-tally-info
					parameters are
						stock-code stk-description stk-measurement-flag
					returning lf-field-ok sol-ordered-qty
				set lf-first-time = FALSE
			endif
		endif
		RECALC_LINE_TOTALS()
		//
		if sol-line-amount > max-value(sol-line-amount)
			message 'WARNING. Qty * Price exceeds maximum allowed ' max-value(sol-line-amount) pause
			reenter sol-ordered-qty optional
		endif
		if screenmode() in { entry correct }
			do public-allow-pre-confirm-of-line-entry
				parameter
					sales-order.*
					sales-order-line.*
				returning
					lf-ok
			if not lf-ok
				reenter lf-sol-line-description
			endif
		endif
	confirmed
		//
		if screenmode() = correct
			if i50entry-sol-shipped-qty != sol-shipped-qty
				set ordlog-type = 26
				set ordlog-old-info = stock-code
				set ordlog-new-info = SPACES
				set ordlog-old-value = i50entry-sol-shipped-qty
				set ordlog-new-value = sol-shipped-qty
				set ordlog-change-value = i50entry-sol-line-amount
				set ordlog-ordered-change-value = sol-line-amount
				set ordlog-line-type = SPACES
				set ordlog-item-wholesale-price	= sol-item-wholesale-price
				set ordlog-ordered-tax-chg-value = sol-line-seq
				do a9000-write-audit-file
			endif
			if i50entry-sol-backorder-qty != sol-backorder-qty
				set ordlog-type = 35
				set ordlog-old-info = stock-code
				set ordlog-old-value = i50entry-sol-backorder-qty
				set ordlog-new-value = sol-backorder-qty
				set ordlog-change-value = sol-backorder-qty - i50entry-sol-backorder-qty
				set ordlog-ordered-change-value = ZERO
				set ordlog-line-type = SPACES
				set ordlog-item-wholesale-price = ZERO
				set ordlog-ordered-tax-chg-value = sol-line-seq
				do a9000-write-audit-file
			endif
			if sol-line-type = 'SN'
			and sys-so-pricing-method in {'A' 'B'}
			and i50entry-sol-item-price <> ZERO
			and sol-item-price = 0
				// Item price is changed-from non-zero to zero. Remove the retail
				// promotion record.
				select *
					from sales-order-line-retail-promo
					where so-order-no = :so-order-no
					and so-bo-suffix = :so-bo-suffix
					and sol-line-seq = :sol-line-seq
					for update
				detail
					delete sales-order-line-retail-promo
				endselect
			endif
		endif
		//
		if sol-print-line <> 'J'
			do check-for-extra-pricing-flags same
				parameters lf-save-sol-item-price sol-item-price lf-save-unit-desc sol-stk-unit-desc
		endif
		//
		set lr-line-completed-ok = TRUE
		RECALC_LINE_TOTALS()
		//Update the ZSHORTSHIP order line if required
		if lf-zshortship-link
			do update-zshortship-order-line
				parameters
					sales-order-line.*
		endif
		exit
	not-confirmed
		if lf-accept-substitute
		and screenmode() <> correct
			set sol-chg-type = SPACES
		endif
		if lf-retail-promo-inserted
		and i50entry-sol-item-price = ZERO
			select *
				from sales-order-line-retail-promo
				where so-order-no = :so-order-no
				and so-bo-suffix = :so-bo-suffix
				and sol-line-seq = :sol-line-seq
				for update
			detail
				delete sales-order-line-retail-promo
			endselect
		endif
		exit
	endconfirm
endscreen // maintain-normal-line --------------------------------------------

procedure determine-stock-item-price
	parameter
		lp-get-whse-price-rec			type boolean
	//
	if lp-get-whse-price-rec
		// i5pricemod requires currency on stock-price and stock-warehouse-detail
		// so set parameter to TRUE if not already current on these objects.
		// NB: When in entry mode this is already called in validate-stock-code.
		do a900-get-whse-price-rec
	endif
	//
	if i50entry-transfer-between-whse = YES
		do i50tp-determine-transfer-price
	else
		if sys-so-use-of-price-ref = 'C'
			//If user nominates an explicit catalogue via procedure accept-catalog-no
			//then ws-catalog-no has a non-zero value and i5pricemode will use this.
			//Otherwise, i5pricemod needs to scan all catalogues to find appropriate price.
			//For i5pricemod to do this scan, sol-price-ref needs to be reset to ZERO.
			//BTW. We divide by 100 to store deb-catalog-no N(8) in sol-price-ref N6.2
			//ie: deb-catalog-no = '12345678' is written to sol-price-ref as '123456.78'
			set sol-price-ref = ws-catalog-no / 100
		endif
		do i5pricemod-pricing-module
			parameter
				FALSE
		if sys-so-base-price-to-store = "1"
			set sol-base-item-price = i5pricemod-rrp
		endif
		if i5pricemod-price-used <> ZERO
			set sol-price-rule = i5pricemod-price-rule[i5pricemod-price-used]
		endif
		do get-price-rule-desc
			returning	ws-option
		if i5pricemod-is-disc-to-be-used = NO
			set sol-disc-rate = 0
		endif
	endif
	if sol-price-overide-flag in { "A" "B"}
	and not (i5pricemod-alt-prc-found	// Special price in alternate UOM is not in use
			and i5pricemod-item-price = i5pricemod-special-uom-price)
		set i5pricemod-item-price *= (stk-conversion-factor / stk-price-per)
	endif
	set sol-item-wholesale-price = i5pricemod-deemed-wholesale-price
	set sol-item-price = i5pricemod-item-price
	//
	// Need to set i50entry-sol-item-price to i5pricemod-item-price as a change
	// to i5pricemod-item-price here is due to quantity breaks not a price override
	set i50entry-sol-item-price = i5pricemod-item-price
endprocedure //determine-stock-item-price ------------------------------------

screen maintain-special-line
	returning
		lr-line-completed-ok			type boolean
	local field
		lf-save-unit-desc				like sol-stk-unit-desc
		lf-save-sol-item-price			like sol-item-price
		lf-zero-price-ok				type boolean
		lf-check-uom-decimal-ok			type boolean
		lf-link-to-po-found 			type boolean
		lf-ok							type boolean
		lf-reenter-message				pic x(40)
		lf-reenter-status				pic x
		lf-ordered-cost					like sol-line-cost
		lf-shipped-cost					like sol-line-cost
		lf-ex-tax-amount				like sol-line-amount
		lf-sol-backorder-sales-tax-amt	like sol-shipped-sales-tax-amt
		lf-sol-backorder-discount-amt	like sol-shipped-discount-amt
		lf-sol-backorder-amount			like sol-shipped-amount
		lf-solt-tax-code				like solt-tax-code
		lf-tax-code-ok					type boolean
		lf-tax-code-error-message		BMSDEF_ERROR_MESSAGE_TYPE
		lf-tax-code-error-title			BMSDEF_ERROR_MESSAGE_TITLE
		lf-inc-in-inventory-cost-flag	like tcm-inc-in-inventory-cost
		lf-composite-code-flag			like tcm-composite-code-flag
		lf-validated-order-qty			type boolean
	//
	window @1,1 to @18,123 window-position 8
		title is "Specials"
	form-entry
	//
before
	//
	box @1,1 to @7,89
		title 'Line Detail'
	//
	box @7.8,1 to @14,32
		title 'Quantity Detail'
	//
	box @7.8,33 to @14,89
		title ws-box-currency-title
	//
	display 'Order' @9,43 pic x(14) right bold
	display 'Ship' @9,58 pic x(14) right bold
	display 'Back Order' @9,73 pic x(14) right bold
	//
	box @1,90 to @7,123
		title ws-box-currency-pricing
	//
	box @7.8,90 to @17,123
		title ws-box-currency-cost
	//
	box @14.8,1 to @17,89
		title 'Extra Line Detail'
	//
	// setup defaults
	if screenmode() = correct
		set lf-save-sol-item-price = sol-item-price
		set lf-save-unit-desc = sol-stk-unit-desc
		if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
			set lf-ex-tax-amount = ZERO
		else
			set lf-ex-tax-amount = sol-line-amount - sol-ordered-sales-tax-amt
		endif
		do clibtaxso-save-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
	else
		set sol-disc-rate = i5soldisc-general-disc-rate
		set sol-price-uom = 1
		set sol-item-price = ZERO
		set stock-code = SPACES
		if sol-stk-unit-desc = SPACES
			do clibstk-get-default-uom
				parameter sol-stk-unit-desc
				returning sol-stk-unit-desc
		endif
	endif
	set i50lines-alt-unit-qty = ZERO
	set i50entry-old-shipped-qty = ZERO
	set i50entry-old-backorder-qty = ZERO
	set i50lines-old-ordered-qty = sol-ordered-qty
	set i50entry-sol-item-price = sol-item-price
	//
	do clibtaxso-get-sales-order-line-tax-code-for-display
		parameters
			so-order-no
			so-bo-suffix
			sol-line-seq
		returning
			lf-solt-tax-code
	//
	//Clear the i5pricemod arrays to ensure values from the
	//previous item are not carried over in error.
	do i5pricemod-initialise-arrays
	RECALC_LINE_TOTALS()
detail
	accept sol-print-line @2,15
		title 'Print Flag :'
		help "Y-print Item code, N-don't print Item code, [HELP]"
		allowed 'A' 'B' 'D' 'E' 'F' 'H' 'J' 'L' 'M' 'N' 'O' 'R' 'S' 'T' 'U' 'Y' SPACES
		uppercase
		show-value
		default 'Y'
		when so-order-type-code != I5SO_TYPE_PROFORMA
			and sol-print-line != 'J'
	validation
		if so-order-source not in {I5SOURCE_SERVICE_PM_CALL I5SOURCE_SERVICE_REPAIR}
			and sol-print-line = SPACES
			message-box translate "BLANK print flag is only allowed for Service sales orders."
				title "Print Flag"
				icon MSG_BOX_STOP
				message-buttons MSG_BOX_OK
				tag 1432
			reenter sol-print-line
		endif
	endvalidation
	//
	accept sol-line-description @3,15 pic x(50)
		title 'Description:'
		default sol-line-description
		when ws-order-flag != CUSTOMER
			and sol-print-line not in { 'J' 'V' }
			no-warning
	time-out is i50lines-time-out
	on error
		exit
	endon
	//
	accept stock-code @4,15 pic x(10)
		title 'Supplier   :'
		help 'If you want to create a purchase order,enter a suppliers code or spaces'
		default stock-code
		uppercase
		show-value
		when ws-ok-to-post-cost
			and sys-raise-po-from-so in { '2' '3' '4' '5' }
	on help-key
		do m2enqcre-enquire-on-creditors
			parameters stock-code SPACES SPACES
			returning stock-code
		reenter stock-code optional
	endon
	validation
		if stock-code != SPACES
			if stock-code = 'Z'
			or substring(stock-code,1,2) = 'Z '
				message 'Use Extra Mode L-Link to create purchase order'
				reenter
			else
				//ie. hasn't been converted to pur.order
				get cre-master
					key is stock-code
				on error
					if so-order-source not in {'J' 'U' 'T'}
					// Special lines created by service/project will actually
					//	have stock-code in the item code field
						message 'Supplier not valid '
						reenter
					else
						message 'WARNING supplier not found'
					endif
				else
					if cr-account-status = "N"
						message-box "Supplier is currently on No Supply"
							title "Enter Supplier"
							message-button MSG_BOX_OK
							icon MSG_BOX_WARNING
					elseif cr-account-status = "H"
						message-box "Supplier is currently on QA Hold"
							title "Enter Supplier"
							message-button MSG_BOX_OK
							icon MSG_BOX_STOP
						reenter
					elseif cr-account-status = "C"
						message-box "Supplier is currently Closed"
							title "Enter Supplier"
							message-button MSG_BOX_OK
							icon MSG_BOX_STOP
						reenter
					elseif cr-account-status = "V"
						message-box "Supplier is currently Inactive"
							title "Enter Supplier"
							message-button MSG_BOX_OK
							icon MSG_BOX_STOP
						reenter
					endif
				endon
			endif
		elseif so-order-type-code = I5SO_TYPE_DIRECT_SHIP
			message "Supplier must be entered for direct ship order"
			reenter
		endif
	endvalidation
	get cre-master
		key is stock-code
	on error
		set cr-shortname = SPACES
		set cr-curr-code = SPACES
	endon
	display cr-shortname @4,28 pic x(30) prompt
	//
	accept sol-item-group @5,15 pic x(10)
		title 'Item Group :'
		help 'Enter a item group for this special item '
		default sol-item-group
		show-value
		when sol-print-line != 'J'
			and ( i50entry-transfer-between-whse != YES		// don't allow if transfer
			or (i50entry-transfer-between-whse = YES
				and so-price-code != 'I'
				and sys-stk-whse-grp-transfers = YES
				and sys-charge-for-inter-transfers = 'D'))
	on help-key
		set sys-tbl-type = 'PG'
		do i85codes-table-help
		if sys-tbl-code > SPACES
			set sol-item-group = sys-tbl-code
		endif
		reenter optional
	endon
	validation
		if screenmode() <> form-entry-defaults
			get system-table
				key is 'PG' sol-item-group
			on error
				message "Item Group not valid " sol-item-group
				re-enter
			endon
        endif
	endvalidation
	on change
		do clibtaxso-delete-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
		//
		do clibtaxso-populate-sales-order-line-tax-and-get-rate
			parameter
				sales-order.*
				sales-order-line.*
			returning
				sol-tax-rate
		//
		do clibtaxso-get-sales-order-line-tax-code-for-display
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
			returning
				lf-solt-tax-code
		refresh sol-tax-rate
		refresh lf-solt-tax-code
	endon
	get system-table
		key is 'PG' sol-item-group
	on error
		set sys-description = SPACES
	endon
	display sys-description @5,28 pic x(30) prompt
	//
	accept sol-non-stk-tax-code @6,15
		title "Tax Code:"
		help "Enter override tax code or SPACES for default to apply [HELP]"
		show-value
	before-accept
		RECALC_LINE_TOTALS()
	end-before-accept
	on help-key
		do clibtaxlookup-enquire-on-tax-codes-by-group
			parameters
				sol-non-stk-tax-code			// Tax code
				so-tax-group					// Tax group
				BMSDEF_TAX_OUTPUT_TYPE			// Input/output flag
				TRUE							// Show composites
			returning
				sol-non-stk-tax-code
		reenter sol-non-stk-tax-code
	endon
	validation
		if sol-non-stk-tax-code <> SPACES
			do clibtax-validate-tax-code
				parameter
					sol-non-stk-tax-code		// Tax code
					so-tax-group				// Tax group
					BMSDEF_TAX_OUTPUT_TYPE		// Input/output flag
					TRUE						// Allow composites
				returning
					lf-tax-code-ok
					lf-tax-code-error-message
					lf-tax-code-error-title
					lf-inc-in-inventory-cost-flag
					lf-composite-code-flag
			if not lf-tax-code-ok
				message-box lf-tax-code-error-message
					title lf-tax-code-error-title
					message-buttons MSG_BOX_OK
					icon MSG_BOX_STOP
					tag 100
				reenter sol-non-stk-tax-code
			endif
		endif
	endvalidation
	on change
		do clibtaxso-delete-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
		//
		do clibtaxso-populate-sales-order-line-tax-and-get-rate
			parameter
				sales-order.*
				sales-order-line.*
			returning
				sol-tax-rate
		//
		do clibtaxso-get-sales-order-line-tax-code-for-display
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
			returning
				lf-solt-tax-code
		refresh sol-tax-rate
		refresh lf-solt-tax-code
	endon
	//
	accept sol-stk-unit-desc @9,11 pic x(14) //right currenly 4gl problem1/1/08
		title 'Qty. UOM:'
		help "Enter the unit description. ie. KILO, MTRS, KG ,MTHS etc"
		upper_case
		show-value
		default sol-stk-unit-desc
		when  ws-order-flag != CUSTOMER
			and sol-print-line not in { 'J' 'V' }
	on help-key
		save system-table
		set sys-tbl-type = 'UM'
		do i85codes-table-help
		if sys-tbl-code > SPACES
			set sol-stk-unit-desc = sys-tbl-code
		endif
		restore system-table
		reenter optional
	endon
	time-out is i50lines-time-out
	on error
		exit
	endon
	validations
		save system-table
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'UM' sol-stk-unit-desc
		on error
			message "Invalid UOM.  Re-enter.  Help available."
			reenter
		endon
		restore system-table
		//
		set i50entry-sol-shipped-qty *= i50entry-stk-conv-factor
		set i50entry-sol-backorder-qty *= i50entry-stk-conv-factor
		set i50entry-old-shipped-qty = i50entry-sol-shipped-qty
		set i50entry-old-backorder-qty = i50entry-sol-backorder-qty
		do i50entry-get-conversion-factor
		set i50entry-sol-shipped-qty /= i50entry-stk-conv-factor
		set i50entry-sol-backorder-qty /= i50entry-stk-conv-factor
	endvalidations
	//
	accept sol-ordered-qty @10,11 pic -(8)9t9999
		title 'Order :'
		help "Enter the quantity ordered"
		default sol-ordered-qty
		show-value
		when sol-print-line not in { 'J' 'V' }
	time-out is i50lines-time-out
	on error
		exit
	endon
	before-accept
		RECALC_LINE_TOTALS()
		// Need to trap actual value input e.g. -1 or 1
		set lf-validated-order-qty = FALSE
		set i50lines-old-ordered-qty = sol-ordered-qty
	end-before-accept
	on help-key
		spl 'stk/m4stkqenq.spl' parameters are stock-code "B"
			leave-files-open
		reenter optional
	endon
	validation
		if so-order-type-code = I5SO_TYPE_DIRECT_SHIP
			//When setting the backorder quantity take into account any
			//shipped quantity that may exist.  This can occur when the
			//sales order is modified after the purchase order has been
			//updated, otherwise the shipped quantity will be ZERO.
			set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
			if screenmode() = correct
			and so-order-status != I5SO_BEING_ENTERED
				message 'WARNING: Direct Ship - correcting purchase order'
				set ws-correct-po = TRUE
			endif
		endif
		do check-uom-decimal
			parameter sol-ordered-qty
			returning lf-check-uom-decimal-ok
		if lf-check-uom-decimal-ok = FALSE
			reenter sol-ordered-qty
		endif
		if screenmode() <> form-entry-defaults
		and not lf-validated-order-qty
			do validate-order-qty same
				returning lf-reenter-status lf-reenter-message
			if lf-reenter-message != SPACES
				message lf-reenter-message
			endif
			if lf-reenter-status = 'R'
				reenter optional
			elseif lf-reenter-status = 'P'
				pause
			else
				refresh sol-ordered-qty
			endif
			// Stop the conversion of the quantity the second time
			// when exiting form entry.
			set lf-validated-order-qty = TRUE
		endif
	endvalidation
	on change
		//
		if sol-shipped-qty > sol-ordered-qty
		and sol-ordered-qty > ZERO
			set sol-backorder-qty = 0
		elseif so-part-shipment-allowed in {'B' 'C'}
		and sys-ask-for-bo-screens = YES
			set sol-backorder-qty = 0
		elseif so-part-shipment-allowed = 'D'
			//Don't set backorder default to 0 if already existing.
		else
			// sol-backorder-qty allowed to be ZERO to record lost sales
			set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
		endif
		RECALC_LINE_TOTALS()
	endon
	//
	accept sol-shipped-qty @11,11 pic -(8)9t9999
		title 'Ship :'
		help "Enter the actual quantity shipped to the customer"
		default sol-shipped-qty
		show-value
		when i50entry-sales-credit = NO
			and i50entry-return-authorisation = NO
			and so-order-type-code not in { I5SO_TYPE_PROFORMA I5SO_TYPE_DIRECT_SHIP }
			and ws-order-flag != CUSTOMER
			and sol-print-line not in { 'J' 'V' }
	time-out is i50lines-time-out
	on error
		exit
	endon
	before-accept
		RECALC_LINE_TOTALS()
	end-before-accept
	validation
		if screenmode() = correct
		and sol-print-line = 'T' // taken lines
		and sol-shipped-qty <> sol-ordered-qty
		and sol-line-type != 'WN'
			message 'Cannot change ship quantity, these goods are already taken'
			set sol-shipped-qty = sol-ordered-qty
			reenter sol-shipped-qty optional
		endif
		//
		do check-uom-decimal
			parameter sol-shipped-qty
			returning lf-check-uom-decimal-ok
		if lf-check-uom-decimal-ok = FALSE
			reenter sol-shipped-qty
		endif
		//
		if i50entry-sol-shipped-qty = ZERO
		and sol-shipped-qty != i50entry-sol-shipped-qty
		and screenmode() = correct
			get sales-order-line-purchase
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix sol-line-seq
			on error
				set lf-link-to-po-found = FALSE
			else
				set lf-link-to-po-found = TRUE
			endon
			if lf-link-to-po-found
				message 'Cannot change ship quantity, PO link found. Please remove the link first.'
				set sol-shipped-qty = i50entry-sol-shipped-qty
				refresh data
				reenter sol-ordered-qty
			endif
		endif
	endvalidation
	on change
		if sol-shipped-qty > sol-ordered-qty
		and sol-ordered-qty > ZERO
			message 'WARNING: Quantity ordered is less than quantity shipped'
			set sol-backorder-qty = 0
		elseif so-part-shipment-allowed in {'B' 'C'}
		and sys-ask-for-bo-screens = YES
			set sol-backorder-qty = 0
		elseif so-part-shipment-allowed = 'D'
			//Don't set backorder default to 0 if already existing.
		else
			// sol-backorder-qty allowed to be ZERO to record lost sales
			set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
		endif
		RECALC_LINE_TOTALS()
	endon
	//
	accept sol-backorder-qty @12,11 pic -(8)9t9999
		title 'Back Ord:'
		help "Enter the quantity of goods put on backorder"
		show-value
		default sol-backorder-qty
		when i50entry-sales-credit = NO
			and i50entry-return-authorisation = NO
			and so-order-type-code not in { I5SO_TYPE_PROFORMA I5SO_TYPE_DIRECT_SHIP }
			and sol-ordered-qty >= 0
			and ws-order-flag != CUSTOMER
			and (ws-orig-whse-bo-flag != '2' or ws-orig-whse-bo-flag in {'2' '3'} and ws-SO-S007)
			and sol-print-line not in { 'J'	'V' }
	time-out is i50lines-time-out
	on error
		exit
	endon
	before-accept
		RECALC_LINE_TOTALS()
	end-before-accept
	validation
		if sol-backorder-qty < 0
			message 'You must enter a positive quantity'
			reenter
		endif
		if so-part-shipment-allowed = 'D'
		and sol-backorder-qty > 0
			message "WARNING: Account doesn't usually accept backorders."
		elseif sol-backorder-qty + sol-shipped-qty != sol-ordered-qty
		and ws-orig-whse-bo-flag in {'2' '3'}
		and sol-backorder-qty > 0
			message "Backorder plus shipped quantity don't equal ordered quantity"
			reenter
		endif
		if screenmode() = correct
		and sol-print-line = 'T'
		and sol-backorder-qty <> 0
			message 'Cannot backorders, goods already taken'
			set sol-backorder-qty = 0
			reenter sol-backorder-qty optional
		endif
		do check-uom-decimal
			parameter sol-backorder-qty
			returning lf-check-uom-decimal-ok
		if lf-check-uom-decimal-ok = FALSE
			reenter sol-backorder-qty
		endif
	endvalidation
	//
	if screenmode() != show
	and sol-print-line != 'J'
	and not ws-ok-to-post-income
		if sol-price-overide-flag != "U"
			set sol-price-overide-flag = YES
		endif
		if sys-so-pricing-method = 'C'
			set sol-disc-rate = 0
			set sol-extra-item-disc-amt = 0
		endif
	endif
	//
	accept sol-item-price @2,104 pic z(12)9.9(4)
		title 'Item Price:'
		help ws-item-price-help
		default sol-item-price
		show-value
		when ws-ok-to-post-income
			and ws-order-flag != CUSTOMER
			and sol-print-line != 'J'
			and not ws-limit-modes-fields-used
			and not (i50entry-transfer-between-whse = YES
					and sol-line-type != 'SS'
					and ws-transfer-user-access = FALSE)
	time-out is i50lines-time-out
	on error
		exit
	endon
	before-accept
		RECALC_LINE_TOTALS()
	end-before-accept
	validation
		if screenmode() != form-entry-defaults
			if so-order-type-code = I5SO_TYPE_TAX_ONLY
			and sol-item-price != ZERO
				message "Tax Only orders can't have a value other than tax"
				set sol-item-price = ZERO
				reenter sol-item-price
			elseif (i50entry-transfer-between-whse = NO
					or (i50entry-transfer-between-whse = YES
					and sys-charge-for-inter-transfers in
						{ 'P' 'O' 'D' 'C' '1' '2' '3' '4' } ))//allow price
				and (i50entry-forward-transfer = NO
					or (i50entry-forward-transfer = YES
					and sys-charge-for-inter-transfers in
						{ 'P' 'O' 'D' 'C' '1' '2' '3' '4' } ))//allow price
				do i50lines-check-zero-price
					parameters are sol-item-price ws-zero-price
					returning lf-zero-price-ok
				if sol-item-price = 0
					if lf-zero-price-ok = 2
						reenter
					elseif not lf-zero-price-ok
						message-box 'WARNING: Item price is zero'
							title "Item Price"
							icon MSG_BOX_WARNING
							message-buttons MSG_BOX_OK
							optional
							tag 1
					endif
				endif
			endif
			//
			if sys-so-pricing-method = "F"
				if (sol-item-price != 0 and screenmode() = entry)
				or sol-item-price != i5pricemod-item-price
					if sol-price-overide-flag != "U"
						set sol-price-overide-flag = YES
					endif
				endif
			endif
			if screenmode() = correct
				if sol-item-price <> i50entry-sol-item-price
					set sol-price-rule = SPACES
				endif
			else
				if sol-item-price <> i5pricemod-item-price
				and i5pricemod-is-disc-to-be-used <> YES
					set sol-price-rule = SPACES
				endif
			endif
		endif
	endvalidation
	//
	accept sol-price-uom @3,104 pic z(17)9
		title 'Per       :'
		help "Enter the pricing unit of measure"
		default sol-price-uom
		when ws-order-flag != CUSTOMER
			and sol-print-line != 'J'
			and (sys-price-disc-entered not in { 'A' 'C' 'E'}
				or  (sys-price-disc-entered = 'A'
				and ws-is-user-a-credit-officer = YES))
				no-warning
	before-accept
		RECALC_LINE_TOTALS()
	end-before-accept
	time-out is i50lines-time-out
	on error
		exit
	endon
	//
	accept sol-disc-rate @4,104 pic z(13)9.999
		title 'Discount % :'
		help "Enter the discount rate applicable to this line item"
		default sol-disc-rate
		show-value
		when sys-cgd-flg in { YES,'M','L','Z' 'X' 'O' 'S' 'T' 'U' '1' '2' '3' '4'}
			and ws-ok-to-post-income
			and ws-order-flag != CUSTOMER
			and i50entry-transfer-between-whse != YES
			and i50entry-forward-transfer = NO
			and (sys-price-disc-entered not in { 'A' 'C' }
			or  (sys-price-disc-entered = 'A' and ws-is-user-a-credit-officer = YES))
	time-out is i50lines-time-out
	on error
		if screenmode() = correct
			exit
		else
			if sol-disc-rate > 100
				message "Discount cannot be more than 100%"
			endif
			reenter sol-disc-rate
		endif
	endon
	before-accept
		RECALC_LINE_TOTALS()
	end-before-accept
	validation
		if sol-disc-rate <> i5pricemod-discount
		and i5pricemod-is-disc-to-be-used = YES
			set sol-price-rule = SPACES
		endif
	endvalidation
	on change
		RECALC_LINE_TOTALS()
	endon
	//
	accept lf-solt-tax-code @5,104 pic x(8)
		title ws-tax-prompt
		default lf-solt-tax-code
		read-only
	accept sol-tax-rate @5,113 pic zz9.zzzz%
		default sol-tax-rate
		read-only
	//
	accept sol-item-wholesale-price @6,104 pic z(12)z.zzzz
		title "Wholesale :"
		read-only
		default sol-item-wholesale-price
	//
	accept sol-line-amount @10,43 pic -(10)9.99
		title 'Total:'
		read-only
		default sol-line-amount
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
		set lf-ex-tax-amount = ZERO
	else
		set lf-ex-tax-amount = sol-line-amount - sol-ordered-sales-tax-amt
	endif
	accept lf-ex-tax-amount @11,43 pic -(10)z.zz
		title 'Ex Tax:'
		read-only
		default lf-ex-tax-amount
	accept sol-ordered-sales-tax-amt @12,43 pic -(10)9.99
		title ws-tax-prompt
		read-only
		default sol-ordered-sales-tax-amt
	accept sol-ordered-disc-amt @13,43 pic -(10)9.99
		title 'Discount:'
		read-only
		default sol-ordered-disc-amt
	//
	accept sol-shipped-amount @10,58 pic -(10)9.99
		read-only
		default sol-shipped-amount
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
		set lf-ex-tax-amount = ZERO
	else
		set lf-ex-tax-amount = sol-shipped-amount - sol-shipped-sales-tax-amt
	endif
	accept lf-ex-tax-amount @11,58 pic -(10)z.zz
		read-only
		default lf-ex-tax-amount
	accept sol-shipped-sales-tax-amt @12,58 pic -(10)9.99
		read-only
		default sol-shipped-sales-tax-amt
	accept sol-shipped-discount-amt @13,58 pic -(10)9.99
		read-only
		default sol-shipped-discount-amt
	//
	accept lf-sol-backorder-amount @10,73 pic -(10)9.99
		read-only
		default lf-sol-backorder-amount
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
		set lf-ex-tax-amount = ZERO
	else
		set lf-ex-tax-amount = lf-sol-backorder-amount - lf-sol-backorder-sales-tax-amt
	endif
	accept lf-ex-tax-amount @11,73 pic -(10)z.zz
		read-only
		default lf-ex-tax-amount
	accept lf-sol-backorder-sales-tax-amt @12,73 pic -(10)9.99
		read-only
		default lf-sol-backorder-sales-tax-amt
	accept lf-sol-backorder-discount-amt @13,73 pic -(10)9.99
		read-only
		default lf-sol-backorder-discount-amt
	//
	accept sol-item-cost @9,104 pic z(8)9.9999
		title 'Item Cost :'
		help 'Enter the item buy price from the supplier - Item Cost'
		default sol-item-cost
		when ws-ok-to-post-cost
			and not ( job-code > SPACES
				and so-order-source in {I5SOURCE_SERVICE_REPAIR I5SOURCE_SERVICE_PM_CALL
										I5SOURCE_SERVICE_PM_3_CALL I5SOURCE_SERVICE_FDE_PM_CALL}
				and ws-mode-type = "C" )
			and ws-order-flag != CUSTOMER
			and sol-print-line != 'J'
			no-warning
	before-accept
		if cr-curr-code != SPACES
		and stock-code != SPACES
			do i50lines-accept-foreign-cost
		endif
	end-before-accept
	time-out is i50lines-time-out
	on error
		exit
	endon
	on change
		RECALC_LINE_TOTALS()
	endon
	validation
		if i50entry-sales-credit = NO
		and i50entry-return-authorisation = NO
		and sol-item-cost < 0
			message 'Please only enter positive figures'
			reenter optional
		endif
		if strlen(stock-code) > 1
		and job-code = SPACES
			//must be a supplier
			if sol-item-cost = 0
				message 'You must enter a cost for a special line item'
				reenter
			endif
		endif
		if so-price-code in I5SOSTATII_RETAIL_PRICE_CODES
			set sol-item-wholesale-price  = sol-item-cost
		endif
		if sol-print-line = 'G'
		and sol-item-price != sol-item-cost
			message-box "Item price is not the same as the item cost"
				title "Item Price"
				icon MSG_BOX_WARNING
				message-buttons MSG_BOX_OK
				optional
				tag 3
		endif
	endvalidation
	//
	accept lf-ordered-cost @10,104 pic s(10)9.99
		title 'Order Cost:'
		read-only
		default lf-ordered-cost
	//
	accept lf-shipped-cost @11,104 pic s(10)9.99
		title 'Ship Cost:'
		read-only
		default lf-shipped-cost
	//
	// need to display % as bug in runtime with pic z(9)9.99% (16/12/07)
	do calc-the-gp-percent
		parameters
			lf-ordered-cost
			sol-line-amount
			sol-ordered-sales-tax-amt
			sol-tax-rate
		returning
			i50entry-gp
	//
	accept i50entry-gp @12,104 pic -(10)9.99
		title ws-gp-prompt
		help 'Enter the gp percentage, to determine the item price or cost'
		default i50entry-gp
		read-only
	//
	// calc. when sys-so-use-of-extra-item-rate = 'F'
	accept sol-extra-item-rate @16,18 pic -(10)z.zz
		title "Extra Amount  :"
		read-only
		default sol-extra-item-rate
	//
	accept sol-user-only-alpha4-1 suppress
	accept sol-user-only-alpha4-2 suppress
	accept sol-user-only-date1 suppress
	accept sol-user-only-num1 suppress
	accept sol-user-only-num2 suppress
	//
	confirm
		default YES
	before
		if sol-line-amount > max-value(sol-line-amount)
			message 'WARNING. Qty * Price exceeds maximum allowed ' max-value(sol-line-amount) pause
			reenter sol-ordered-qty optional
		endif
		if screenmode() in { entry correct }
			do public-allow-pre-confirm-of-line-entry
				parameter
					sales-order.*
					sales-order-line.*
				returning
					lf-ok
			if not lf-ok
				reenter sol-print-line
			endif
		endif
	confirmed
		if screenmode() = correct
			if sol-print-line = 'P'
				set sol-print-line = SPACES
			endif
			if i50entry-sol-shipped-qty != sol-shipped-qty
				set ordlog-type = 26
				set ordlog-old-info = stock-code
				set ordlog-new-info = SPACES
				set ordlog-old-value = i50entry-sol-shipped-qty
				set ordlog-new-value = sol-shipped-qty
				set ordlog-change-value = i50entry-sol-line-amount
				set ordlog-ordered-change-value = sol-line-amount
				set ordlog-line-type = SPACES
				set ordlog-item-wholesale-price	= sol-item-wholesale-price
				set ordlog-ordered-tax-chg-value = sol-line-seq
				do a9000-write-audit-file
			endif
			if i50entry-sol-backorder-qty != sol-backorder-qty
				set ordlog-type = 35
				set ordlog-old-info = stock-code
				set ordlog-old-value = i50entry-sol-backorder-qty
				set ordlog-new-value = sol-backorder-qty
				set ordlog-change-value = sol-backorder-qty - i50entry-sol-backorder-qty
				set ordlog-ordered-change-value = ZERO
				set ordlog-line-type = SPACES
				set ordlog-item-wholesale-price = ZERO
				set ordlog-ordered-tax-chg-value = sol-line-seq
				do a9000-write-audit-file
			endif
		endif
		if sol-print-line <> 'J'
			do check-for-extra-pricing-flags same
				parameters lf-save-sol-item-price sol-item-price lf-save-unit-desc sol-stk-unit-desc
		endif
		if so-curr-code != sys-local-currency-code
		and i50lines-foreign-cost != ZERO
		and screenmode() in {entry correct }
			get sales-order-line-notes lock
				on index so-order-no so-bo-suffix sol-line-seq soln-type soln-seq-no
				key is so-order-no so-bo-suffix sol-line-seq '~F' 1
			on error
				initialise sales-order-line-notes
					leaving so-order-no so-bo-suffix sol-line-seq
				set soln-type = '~F'
				set soln-seq-no = 1
				set soln-text = fstr(i50lines-foreign-cost,16,2)
				insert sales-order-line-notes
			else
				set soln-text = fstr(i50lines-foreign-cost,16,2)
				update sales-order-line-notes
			endon
		endif
		set lr-line-completed-ok = TRUE
		exit
	not-confirmed
		if screenmode() = entry
			do clibtaxso-delete-solt-for-sol
				parameters
					so-order-no
					so-bo-suffix
					sol-line-seq
		elseif screenmode() = correct
			do clibtaxso-restore-solt-for-sol
				parameters
					so-order-no
					so-bo-suffix
					sol-line-seq
		endif
		exit
	endconfirm
endscreen //maintain-special-line --------------------------------------------

screen maintain-tax-line
	returning
		lr-line-completed-ok			type boolean
	local field
		lf-solt-tax-code				like solt-tax-code
		lf-tax-code-ok					type boolean
		lf-tax-code-error-message		BMSDEF_ERROR_MESSAGE_TYPE
		lf-tax-code-error-title			BMSDEF_ERROR_MESSAGE_TITLE
		lf-inc-in-inventory-cost-flag	like tcm-inc-in-inventory-cost
		lf-composite-code-flag			like tcm-composite-code-flag
	//
	window @1,1 to @7,76 window-position 5
		title is "Tax"
	form-entry
	//
	local field
		lf-ok							type boolean
before
	box @1,1 to @6,79
		title SPACES
	if screenmode() = correct
		do clibtaxso-save-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
	endif
	do clibtaxso-get-sales-order-line-tax-code-for-display
		parameters
			so-order-no
			so-bo-suffix
			sol-line-seq
		returning
			lf-solt-tax-code
detail
	accept sol-line-description @2,13 pic x(30)
		title 'Desc :'
		help 'Enter a description of the sales order line'
		default sol-line-description
		no-clear
		when ws-order-flag != CUSTOMER
			and sol-print-line != 'J'
			and sol-print-line != 'V'
	//
	accept sol-non-stk-tax-code @3,13
		title "Tax Code:"
		help "Enter override tax code or SPACES for default to apply [HELP]"
		show-value
	on help-key
		do clibtaxlookup-enquire-on-tax-codes-by-group
			parameters
				sol-non-stk-tax-code			// Tax code
				so-tax-group					// Tax group
				BMSDEF_TAX_OUTPUT_TYPE			// Input/output flag
				TRUE							// Show composites
			returning
				sol-non-stk-tax-code
		reenter sol-non-stk-tax-code
	endon
	validation
		if sol-non-stk-tax-code <> SPACES
			do clibtax-validate-tax-code
				parameter
					sol-non-stk-tax-code		// Tax code
					so-tax-group				// Tax group
					BMSDEF_TAX_OUTPUT_TYPE		// Input/output flag
					TRUE						// Allow composites
				returning
					lf-tax-code-ok
					lf-tax-code-error-message
					lf-tax-code-error-title
					lf-inc-in-inventory-cost-flag
					lf-composite-code-flag
			if not lf-tax-code-ok
				message-box lf-tax-code-error-message
					title lf-tax-code-error-title
					message-buttons MSG_BOX_OK
					icon MSG_BOX_STOP
					tag 100
				reenter sol-non-stk-tax-code
			endif
		endif
	endvalidation
	on change
		do clibtaxso-delete-solt-for-sol
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
		//
		do clibtaxso-populate-sales-order-line-tax-and-get-rate
			parameter
				sales-order.*
				sales-order-line.*
			returning
				sol-tax-rate
		//
		if sol-tax-rate = ZERO
			message-box "Tax rate is ZERO, please reenter"
				title "Invalid Tax Rate"
				message-buttons MSG_BOX_OK
				icon MSG_BOX_STOP
				tag 100
			reenter sol-non-stk-tax-code
		endif
		//
		do clibtaxso-get-sales-order-line-tax-code-for-display
			parameters
				so-order-no
				so-bo-suffix
				sol-line-seq
			returning
				lf-solt-tax-code
		refresh sol-tax-rate
		refresh lf-solt-tax-code
	endon
	//
	accept lf-solt-tax-code @4,13
		title ws-tax-prompt
		default lf-solt-tax-code
		read-only
	accept sol-tax-rate @4,26 pic zz9.zzzz%
		read-only
		default sol-tax-rate
	//
	accept sol-line-amount @5,13 pic s(8)9.99
		title 'Total :'
		help ws-line-amount-help
		default sol-line-amount
		show-value
	on change
		if i50entry-sales-credit = YES
			set sol-line-amount = 0 - sol-line-amount
			refresh sol-line-amount
		endif
		set sol-shipped-amount = sol-line-amount
		set i50entry-line-amt = sol-line-amount
		set i50entry-stax-amt = sol-line-amount
		set sol-ordered-sales-tax-amt = i50entry-stax-amt
		set sol-shipped-sales-tax-amt = i50entry-stax-amt
	endon
	//
	accept sol-user-only-alpha4-1 suppress
	accept sol-user-only-alpha4-2 suppress
	accept sol-user-only-date1 suppress
	accept sol-user-only-num1 suppress
	accept sol-user-only-num2 suppress
	//
	confirm auto
	before
		if screenmode() in { entry correct }
			do public-allow-pre-confirm-of-line-entry
				parameter
					sales-order.*
					sales-order-line.*
				returning
					lf-ok
			if not lf-ok
				reenter sol-line-description
			endif
		endif
	confirmed
		set lr-line-completed-ok = TRUE
		exit
	not-confirmed
		if screenmode() = entry
			do clibtaxso-delete-solt-for-sol
				parameters
					so-order-no
					so-bo-suffix
					sol-line-seq
		elseif screenmode() = correct
			do clibtaxso-restore-solt-for-sol
				parameters
					so-order-no
					so-bo-suffix
					sol-line-seq
		endif
		exit
	endconfirm
endscreen // maintain-tax-line -----------------------------------------------

procedure validate-order-qty
	local field
		lf-partial-pack-flag			pic x
		lf-new-quantity					like sol-ordered-qty
		lf-cost-to-use					like whse-cost-to-use-flag
	returning
		lr-status						pic x
		lr-message						pic x(40)
	//
	set i50lines-qty-screen-displayed = FALSE
	//
	if screenmode() <> form-entry-defaults
	and i50entry-sales-credit = NO
	and i50entry-transfer-between-whse = NO
	and stk-stock-status not in {'L','Z'}
	and sys-confirm-for-broken-pack not between '0' and '9'
		if i50entry-return-authorisation = NO
			do i5brknpack-check-for-broken-pack-quantities
				parameters
					sol-ordered-qty			//quantity to check
					sol-stk-unit-conversion	//conv factor to get to base unit
					stock-code				//stock-code involved
					NO						//get stock-master (Y/N)
					NO						//automatically round up (Y/N) if
											//sys-confirm-for-broken-pack = 'R'
					NO						//issue warning only (Y/N)
				returning
					lf-partial-pack-flag	//NO means partial pack not allowed
					lf-new-quantity			//could have been rounded up
			if lf-partial-pack-flag = NO
				set lr-status = 'R'
				exit
			elseif sol-ordered-qty <> lf-new-quantity
				set sol-ordered-qty = lf-new-quantity
			endif
		elseif i50entry-return-authorisation = YES
			//Check for broken pack but issue warning only
			do i5brknpack-check-for-broken-pack-quantities
				parameters
					sol-ordered-qty			//quantity to check
					sol-stk-unit-conversion	//conv factor to get to base unit
					stock-code				//stock-code involved
					NO						//get stock-master (Y/N)
					NO						//automatically round up (Y/N) if
											//sys-confirm-for-broken-pack = 'R'
					YES						//issue warning only (Y/N)
				returning
					lf-partial-pack-flag	//NO means partial pack not allowed
					lf-new-quantity			//could have been rounded up
		endif
	elseif i50entry-sales-credit = NO
	and i50entry-return-authorisation = NO
	and i50entry-transfer-between-whse = NO
	and stk-stock-status not in {'L','Z'}
	and sys-confirm-for-broken-pack between '0' and '9'
	// this scenario is added to work the same way as normal line entry ie
	// apply broken pack charge levy
		do i5brknpack-check-for-broken-pack-quantities
			parameters
				sol-ordered-qty			//quantity to check
				sol-stk-unit-conversion	//conv factor to get to base unit
				ws-accept-stk-code		//stock-code involved
				NO						//get stock-master (Y/N)
				YES						//automatically round up (Y/N) if
										//sys-confirm-for-broken-pack = 'R'
				NO						//issue warning only (Y/N)
			returning
				lf-partial-pack-flag	//NO means partial pack not allowed
				lf-new-quantity			//could have been rounded up
		if lf-partial-pack-flag = 'C'
			set i50lines-pack-charge-applies = TRUE
		endif
	endif
	//
	if sol-ordered-qty < 0
	and i50entry-sales-credit = NO
	and i50entry-transfer-between-whse = NO
	and i50entry-return-authorisation = NO
	and stk-stock-status not in {'L','Z'}
	and sol-line-type != "SS"
		if (so-order-source = I5SOURCE_SERVICE_REPAIR
		or (i50lines-neg-invoices-allowed
		and i50entry-normal-order = YES) )
		and i50lines-whse-type not in IWTYPEDEF_DISTRIB_WHSE
		and i50lines-whse-type != IWTYPEDEF_VAN_WHSE
		and stk-stock-status != 'K'	// ignore kits
			//now allowed to enter negative
			//qtys for service repairs, HOWEVER
			//if a neg. is entered, then the shipped
			//qty must always equal the ordered qty.
		else
			if i50lines-old-ordered-qty != sol-ordered-qty
				set lr-message =  'Please only enter positive figures'
				set lr-status = 'R'
				exit
			endif
		endif
	endif
	//
	do clib407-get-cost-method
		parameters
			stock-code
			so-whse-to
			sys-cost-to-use
		returning
			lf-cost-to-use
	//
	if sol-ordered-qty < 0
	and so-order-status in I5SOSTATII_OUTSTANDING_TRANSFERS_STATII
	and not (lf-cost-to-use = 'A'
			and sys-charge-for-inter-transfers = 'D'
			and stk-stock-status in { 'S' 'M' 'R' }
			and stk-serialized-flag != 'Y'
			and sol-line-type = 'SN'
			and i50lines-whse-type not in IWTYPEDEF_DISTRIB_WHSE
			and ws-to-whse-type not in IWTYPEDEF_DISTRIB_WHSE
			and i50lines-whse-type != IWTYPEDEF_VAN_WHSE
			and ws-to-whse-type != IWTYPEDEF_VAN_WHSE
			and so-whse-to not = SPACES)
		// Negative transfer order is only allowed for transferring normal
		// non-serialized stocked item between normal warehouse when normal
		// pricing is used.
		set lr-message =  'Please only enter positive figures'
		set lr-status = 'R'
		exit
	endif
	//
	if (i50entry-sales-credit = YES
	or i50entry-return-authorisation = YES )
	or (so-order-status in I5SOSTATII_OUTSTANDING_TRANSFERS_STATII
		and lf-cost-to-use = 'A'
		and sys-charge-for-inter-transfers = 'D'
		and stk-stock-status in { 'S' 'M' 'R' }
		and stk-serialized-flag != 'Y'
		and sol-line-type = 'SN'
		and sol-ordered-qty < 0
		and i50lines-whse-type not in IWTYPEDEF_DISTRIB_WHSE
		and ws-to-whse-type not in IWTYPEDEF_DISTRIB_WHSE
		and i50lines-whse-type != IWTYPEDEF_VAN_WHSE
		and ws-to-whse-type != IWTYPEDEF_VAN_WHSE
		and so-whse-to not = SPACES)
		// Allow negative shipped quantity for transfer order if normal pricing
		// is applied for the transfer between normal warehouses. Negative
		// transfer order only handle normal non-serialized stocked item.
		//
		if ( ws-mode-type in {'E' 'D'}
			and ws-confirm != 'R' )
		or ( ws-mode-type = 'C'
			and (sol-ordered-qty > ZERO
			and i50lines-old-ordered-qty <= ZERO
			and ((so-order-status in I5SOSTATII_SO_CREDIT_NOTE_STATII)
			  or (so-order-status in I5SOSTATII_OUTSTANDING_RMA_STATII)
			  or (so-credit-note-no != ZERO
				and so-order-status != I5SO_UPDATED))))
			set sol-ordered-qty = 0 - sol-ordered-qty
		endif
		//
		set sol-shipped-qty = sol-ordered-qty
		set sol-backorder-qty = 0
		exit
	endif
	//
	if sol-ordered-qty < 0
	and sys-so-allow-negative-qty = NO
	and i50entry-normal-order = YES
	and i50lines-whse-type in IWTYPEDEF_NORMAL_WHSE_TYPE
	and not (so-order-source = I5SOURCE_SERVICE_REPAIR
			or so-order-type-code = I5SO_TYPE_JOB_ISSUE)
		set lr-message = "Can't enter negative quantities, reenter"
		set lr-status = 'R'
		exit
	endif
	//
	if sol-ordered-qty < 0
	and (stk-stock-status in {'L','Z'}
	or so-order-source = I5SOURCE_SERVICE_REPAIR
	or (i50lines-neg-invoices-allowed
	and i50entry-normal-order = YES) )
		set sol-shipped-qty = sol-ordered-qty
		set sol-backorder-qty = 0
	endif
	//
	if sol-line-type in {'SS','RN','RS'}
		if screenmode() != correct
			set sol-disc-rate = i5soldisc-general-disc-rate
		endif
		if sol-line-type in {'RN','RS'}
		or (sol-line-type = 'SS'	//unless in detail entry
		and ws-mode-type in {'E','D'} )	//or normal entry
			set sol-price-uom = 1
			if so-order-type-code = I5SO_TYPE_DIRECT_SHIP
			and sol-line-type = 'SS'
				set sol-backorder-qty = sol-ordered-qty
			elseif sol-line-type = 'SS'
			and sol-ordered-qty >= sol-backorder-qty
				set sol-shipped-qty = sol-ordered-qty - sol-backorder-qty
			else
				set sol-shipped-qty = sol-ordered-qty
			endif
		endif
	endif
	//
	if sol-line-type = 'SN' and ws-mode-type = 'D'
		if ws-confirm = 'R'
			if ws-orig-whse-bo-flag in {'2' '3'}
			and not ws-SO-S007
				do i50lines-determine-quantities
				if i50lines-reenter-stk-qty-flag in {'S','Q'}
					set lr-status = 'R'
					exit
				endif
				set i50entry-qty = sol-shipped-qty
				do i50entry-get-conversion-factor
				do clib406-calc-line-cost
					parameters
						sol-item-cost
						sol-ordered-qty
						sol-shipped-qty
						sol-line-type
						sol-stk-unit-conversion
						sol-stk-unit-desc
						stk-price-per
					returning
						sol-ordered-line-cost
						sol-line-cost
			endif
		else
			if sys-so-header-defaults = '3'
				//
			else
				// default sol quantities are calculated here
				do i50lines-determine-quantities
				if i50lines-reenter-stk-qty-flag in {'S','Q'}
					set lr-status = 'R'
					exit
				endif
			endif
		endif
	elseif ws-order-flag = CUSTOMER
	and sol-line-type = 'SN' and ws-mode-type = 'C'
		//both shipped & bo qty NOT allowed to be edited by
		//the customer, thus need to force set these for
		//line correction
		if sol-shipped-qty = 0
			set sol-backorder-qty = sol-ordered-qty
		else
			if sol-ordered-qty <= sol-shipped-qty
				set sol-shipped-qty = sol-ordered-qty
				set sol-backorder-qty = 0
			else
				set sol-backorder-qty = sol-ordered-qty
					- sol-shipped-qty
			endif
		endif
	endif
	//
	if so-order-status = I5SO_PROFORMA_ORDER
	and so-order-source = I5SOURCE_MCPHERSON_STANDING_ORDERS
		set sol-shipped-qty = sol-ordered-qty
		set sol-backorder-qty = 0
	endif
	//
	if screenmode() = correct
	and sol-ordered-qty <> i50lines-old-ordered-qty
		get stock-master
		on error
			// not possible
		else
			if stk-serialized-flag = 'Y'
				get sales-order-line-purchase
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix sol-line-seq
				on error
				// ok to proceed
				else
					set lr-message = 'Item serialised and linked to PO'
				endon
			endif
		endon
	endif
endprocedure //validate-order-qty ----------------------------------------------

procedure b430-find-stk
	window @21,14 to @23,80
		title 'Stock Search'
	//
	// save the values of the current record, just in case there is
	// no match.
	// NB. not using push/pop because if we found a match, we
	// will not need the currency of this record.
	save sales-order-line
	display "Enter the required item code or part thereof :" @22,15 background
	accept ws-find-stk @22,63
		help "Enter required item code or part of the item code"
		upper_case
		default ws-find-stk
	validation
		if ws-find-stk = SPACES
			message 'Please enter an item code'
			reenter optional
		endif
	endvalidation
	set ws-saved-line-seq = sol-line-seq
	set i = strlen(ws-find-stk)
	// obtain record currency on the like object
	get like-sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no so-bo-suffix sol-line-seq
	//
	//if eof encountered loop back to the start
	//and continue searching
	set ws-found-stk = FALSE
	get like-sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		next same so-order-no so-bo-suffix
	on error EENDFILE
		//go back to start and continue reading
		get like-sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix 0
		on error ENOREC
			get like-sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				next same so-order-no so-bo-suffix
			on error EENDFILE
				// that's OK, at the end of the order
			end
		endon
	end
	while ws-found-stk = FALSE and ws-saved-line-seq != sol-line-seq
		if sol-line-type in { 'SN','WN','RR','KN' }
			get stock-master
				on index stock-code
			on error ENOREC
				initialise stock-master
					leaving stock-code
			endon
		endif
		if sol-line-type in { 'SN','WN','RR','KN' }
		and (pattern(uppercase(stk-description),substring(ws-find-stk,1,i)) != 0
		or pattern(uppercase(stk-desc-line-2),substring(ws-find-stk,1,i)) != 0
		or pattern(uppercase(stk-desc-line-3),substring(ws-find-stk,1,i)) != 0)
			set ws-found-stk = TRUE
		elseif sol-line-type in { 'SN','WN','RR','KN' }
		and ws-find-stk = substring(stock-code,1,i)
			set ws-found-stk = TRUE
		else
			get like-sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				next same so-order-no so-bo-suffix
			on error EENDFILE
				//go back to start and continue reading
				get like-sales-order-line
					on index so-order-no so-bo-suffix sol-line-seq
					key is so-order-no so-bo-suffix 0
				on error ENOREC
					//This should NEVER happen
					get like-sales-order-line
						on index so-order-no so-bo-suffix sol-line-seq
						next same so-order-no so-bo-suffix
					on error EENDFILE
						// that's OK, at the end of the order
					endon
				endon
			endon
		endif
	endwhile
	//
	if ws-found-stk
		get sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix sol-line-seq
	else
		restore sales-order-line
	endif
endprocedure //b430-find-stk -------------------------------------------------

procedure a900-get-whse-price-rec
	set ws-found-stk-price = FALSE
	if stk-stock-status in {'L','Z'}
		set whse-avg-cost = 0
	else
		get stock-warehouse-detail
			on index whse-code stock-code
			key is so-whse-code stock-code
		on error
			message-box param-text("Stock warehouse not valid <<P1>> <<P2>>",so-whse-code,stock-code)
				title "Stock Warehouse Invalid"
				icon is MSG_BOX_STOP
				message-buttons MSG_BOX_OK
				tag 1433
			exit
		endon
	endif
	do i4getprice-get-stock-price-record
		parameter stock-code so-whse-code so-cust-type
		returning ws-found-stk-price
					prc-region-code
	if not ws-found-stk-price
		message "Price record doesn't exist for region " prc-region-code
		exit
	endif
endprocedure //a900-get-whse-price-rec -----------------------------------------

screen process-rotatable-item
	window @16,35 to @24,80
		title is "Rotable/Exchange Items"
	allow entry
	local field
		lf-avail-dedicated			like whse-qty-on-hand
		lf-whse-record-created		type boolean
		lf-x-returned-price			like sol-item-price
before
	set ws-saved-stock-code = stock-code
	if ws-saved-stock-code = 'X'
		display "Item Code             :" @18,36
		display "Price of exchanged    :" @21,36
		display "Price of returned     :" @22,36
	else
		display "Returned?             :" @17,36
		display "Price of returned item:" @21,36
	endif
	display "Quantity returned     :" @19,36
	set lf-x-returned-price = ZERO
detail
	accept stock-code @18,60
		help 'Please enter the required item code'
		default stock-code
		when ws-saved-stock-code = 'X'
	on help-key
		get stock-master
		on error
		endon
		set i50stkenq-order-flag = ws-order-flag
		set i50stkenq-mode-type = ws-mode-type
		do i50stk-stock-enquiry
		reenter optional
	endon
	validation
		do validate-stock-code
		if reenter-needed
			reenter optional
		endif
		if stk-stock-status = 'K'	// Can't have kit rotables
			message "Kits can't be exchanged"
			reenter optional
		elseif stk-stock-status in { 'L' 'Z' }
			message "Labour or special items can't be exchanged"
			reenter optional
		endif
		set i50lines-special-status = YES
	endvalidation
	accept i50lines-special-status @17,60
		allow YES NO
		help "Y - item returned, process as rotable, N - treat as normal item"
		uppercase
		no-clear
		when ws-saved-stock-code != 'X'
	accept sol-ordered-qty @19,60 PIC_FOR_DETAIL_QTY
		help "Please enter the quantity returned"
		default 1
		when i50lines-special-status = YES
	validation
		if sol-ordered-qty <= 0
			message 'Please enter only positive quantities'
			reenter
		endif
		if i50entry-transfer-between-whse = YES
			//MORE conversion factor ?
				and sol-ordered-qty > ws-to-whse-avail-stk
			message 'Insufficient stock in the to warehouse ' so-whse-to
			reenter sol-ordered-qty
		endif
		do i5pricemod-pricing-module
			parameter
				FALSE
		if sys-so-base-price-to-store = "1"
			set sol-base-item-price = i5pricemod-rrp
		endif
		if i5pricemod-is-disc-to-be-used = NO
			set sol-disc-rate = 0
		endif
		set sol-item-wholesale-price = i5pricemod-deemed-wholesale-price
		set sol-item-price = i5pricemod-item-price
		//rotable pricing rules.
		//1. First set rot-price = 25% of the recommend retail
		//2. if rot price calculated < min-rot-price and the
		//   wholesale price is >= min-rot-price then
		//   set rot price = min-rot-price
		//3. if rot price calculated < min-rot-price and the
		//	 wholesale price is < min-rot-price then
		//   set rot-price = wholesale price.
		//
		//	reduce price by 25%
		set i50entry-sol-item-price = (prc-recommend-retail * 25 / 100)
		if i50entry-sol-item-price < sys-min-rotatable-price
			if sol-item-wholesale-price >= sys-min-rotatable-price
				set i50entry-sol-item-price = sys-min-rotatable-price
			else
				set i50entry-sol-item-price = sol-item-wholesale-price
			endif
		endif
		if ws-zero-price
			set i50entry-sol-item-price = 0
			set sol-item-price = 0
		endif
	endvalidation
	accept i50entry-sol-item-price @21,60
		help "Enter the return item price of this rotable item"
		default i50entry-sol-item-price
		when i50lines-special-status = YES
	accept lf-x-returned-price @22,60
		help "Enter the return item price of this rotable item"
		default lf-x-returned-price
		when (i50lines-special-status = YES
		and ws-saved-stock-code = 'X')
	confirm default is YES
	confirmed
		if i50lines-special-status = YES
			set sol-item-wholesale-price = i50entry-sol-item-price
			//note if goods are returned rotable, then there is
			//no s/tax. ie sales tax already paid
			set sol-disc-rate = 0
			set ws-sol-item-cost = sol-item-cost	// save current
			if i50lines-used-whse = so-whse-code
			or so-order-source = I5SOURCE_SERVICE_REPAIR
				//if used=so-whse-code then no need to setup WN
				set ws-rot-whse-to-be-used = NO
			else
				get stock-warehouse-detail
					key is stock-code i50lines-used-whse
				on error
					set ws-rot-whse-to-be-used = NO
				else
					//get the cost from the used whse
					do i5solicost-get-cost
					do i50lines-determine-available-stock
						parameters so-order-no so-bo-suffix sol-line-seq
							sol-line-type sol-ordered-qty i5pricemod-bill-to
							whse-code
							stock-code
							ws-van-id
							TRUE	//Indicative available stock.
							sol-stk-unit-desc
							sol-stk-unit-conversion
						returning ws-available-stk
							lf-avail-dedicated
							i50entry-dedicated-line
							sol-stk-unit-desc		// used to display available
							sol-stk-unit-conversion	// used to display available
					if ws-available-stk > 0
						set ws-rot-whse-to-be-used = YES
							//note: qty's are back to front
							//as they are reversed in
							//split routine
						set sol-backorder-qty = sol-ordered-qty
						set sol-shipped-qty = 0
					endif
				endon
			endif
			get stock-warehouse-detail	//regain currency
				on index whse-code stock-code
				key is so-whse-code stock-code
			on error
			endon
			if ws-rot-whse-to-be-used = YES
				set sol-line-type = 'WN'
				set sol-whse-code = i50lines-used-whse
			else
			//Not available in USED whse, so see if it is
			//available in the NEW whse, if not
			//backorder it from the USED whse
				do i50lines-determine-available-stock
					parameters so-order-no so-bo-suffix sol-line-seq
						sol-line-type sol-ordered-qty i5pricemod-bill-to
						whse-code stock-code
						ws-van-id
						TRUE					//Indicative available stock.
						sol-stk-unit-desc
						sol-stk-unit-conversion
					returning ws-available-stk
						lf-avail-dedicated
						i50entry-dedicated-line
						sol-stk-unit-desc		// used to display available
						sol-stk-unit-conversion	// used to display available
					//however is sourced from the SERV module alway shipped it
				if so-order-source = I5SOURCE_SERVICE_REPAIR
				or (ws-available-stk > 0
				and ws-available-stk >= sol-ordered-qty)
				//cost from NEW whse
					set sol-item-cost = ws-sol-item-cost
					set sol-shipped-qty = sol-ordered-qty
					set sol-backorder-qty = 0
				elseif ws-available-stk > 0
				//cost from NEW whse
					set sol-item-cost = ws-sol-item-cost
					set sol-shipped-qty = ws-available-stk
					set sol-backorder-qty = sol-ordered-qty
						- sol-shipped-qty
						//but must create b/o in USED whse
					set ws-rot-whse-to-be-used = YES
					set sol-line-type = 'WN'
					set sol-whse-code = i50lines-used-whse
				else
					set ws-rot-whse-to-be-used = YES
					set sol-line-type = 'WN'
					set sol-whse-code = i50lines-used-whse
					set sol-shipped-qty = 0
					set sol-backorder-qty = sol-ordered-qty
				endif
			endif
			//now calc. line amounts and costs
			set i50entry-qty = sol-shipped-qty
			do i50entry-get-conversion-factor
			do clib406-calc-line-cost
				parameters
					sol-item-cost
					sol-ordered-qty
					sol-shipped-qty
					sol-line-type
					sol-stk-unit-conversion
					sol-stk-unit-desc
					stk-price-per
				returning
					sol-ordered-line-cost
					sol-line-cost
			//price only applies to new item's, not returned items
			set sol-item-price = i50entry-sol-item-price
			if sol-item-price <> i5pricemod-item-price
				set sol-price-rule = SPACES
			elseif i5pricemod-price-used <> ZERO
				set sol-price-rule
					= i5pricemod-price-rule[i5pricemod-price-used]
			endif
			do i50entry-calc-order-totals same
			do i50entry-calc-shipped-totals same
			insert sales-order-line
			set ws-line-seq += 1
			do i50entry-update-stock-file entry once
			if (stk-serialized-flag = YES
			or (i50lines-whse-type = IWTYPEDEF_LOAN_DEMO_WHSE
			and sol-line-type != 'KN'))
			and sol-shipped-qty != 0
				//Enter the serial number(s) of the NEW/REPAIRED item codes(s)
				do i50lines-get-serial-no-info
					parameter
						ws-sopl-record-exists
				get sales-order-line lock
				on error
					reenter stock-code
				endon
			endif
			//now set up the repair warehouse
			get stock-warehouse-detail
				key is stock-code i50lines-repair-whse
			on error
				initialise stock-warehouse-detail
					leaving stock-code whse-code
				set whse-drp-replenish-multiple = 1
				//
				// Create a new stock-warehouse record
				do clibstk-create-stock-warehouse-detail
					parameters stock-warehouse-detail.*
					returning stock-warehouse-detail.* lf-whse-record-created
			endon
			//repair whse found
			set sol-line-seq = ws-line-seq
			set sol-line-type = 'RR'
			set sol-whse-code = i50lines-repair-whse
			set sol-update-whse = 'Y'
			set sol-ordered-qty = 0 - sol-ordered-qty
			set sol-shipped-qty = sol-ordered-qty
			set sol-backorder-qty = 0
			set sol-item-price = lf-x-returned-price
			set sol-price-rule = SPACES
			set sol-item-wholesale-price = sol-item-price
			set i50entry-qty = sol-shipped-qty
			do i50entry-get-conversion-factor
			do clib406-calc-line-cost
				parameters
					sol-item-cost
					sol-ordered-qty
					sol-shipped-qty
					sol-line-type
					sol-stk-unit-conversion
					sol-stk-unit-desc
					stk-price-per
				returning
					sol-ordered-line-cost
					sol-line-cost
			do i50entry-calc-order-totals same
			do i50entry-calc-shipped-totals same
			insert sales-order-line
			set ws-line-seq += 1
			do i50entry-update-stock-file entry once
			if stk-serialized-flag = YES
			or (i50lines-whse-type = IWTYPEDEF_LOAN_DEMO_WHSE
			and sol-line-type != 'KN')
				//Enter the serial number(s) of the RETURNED item codes(s).
				do i50lines-get-serial-no-info
					parameter
						ws-sopl-record-exists
				get sales-order-line lock
				on error
					reenter stock-code
				endon
			endif
		endif
		exit
	endconfirm
after
	//only get here if delete is hit
	set i50lines-special-status = 'R'		// set status to reenter
endscreen //process-rotatable-item --------------------------------------------

//
// ----------------------------  Enquiry Screens  ------------------------------
//
#ifndef ONLY_PSU_OPTIONS
screen a1015-stock-balance-summary-by-whse
	local
		lf-stock-master-error	type boolean
		lf-swd-error			type boolean
	//
	window @14,1 to @23,80
		title is "Stock Balance Summary By Warehouse"
	allow ws-continue-mode search stock-enquiry
	primary stock-warehouse-detail
		on index whse-code stock-code same whse-code
	datagrid occurs 8
before
	set whse-code = so-whse-code
detail
	accept stock-code @14,2
		help "Please enter required stock-code"
		upper_case
	set ws-calc-commitments = whse-current-orders
		+ whse-forward-orders + whse-factory-orders + whse-back-orders
		+ whse-qty-awaiting-putaway
	if searchmode()
		save stock-warehouse-detail
		//
		do clib403-calculate-available
			parameter
				stock-code
				whse-code
			returning
				ws-calc-available-for-sale
				lf-stock-master-error
				lf-swd-error
		//
		if lf-swd-error
			message "Problem locating stock warehouse record"
		endif
		restore stock-warehouse-detail
	endif
	accept whse-code @14,4
	accept whse-qty-on-hand @14,6
	accept whse-back-orders @14,8
	accept ws-calc-commitments @14,10
		title is 'Commit'
	accept ws-calc-available-for-sale @14,12
		title is "Available"
	accept whse-qty-on-order @14,14
	accept whse-qty-in-transit @14,16
	confirm auto
	confirmed
		if screenmode() = ws-continue-mode
			exit
		elseif screenmode() = stock-enquiry
			spl 'stk/m4stkqenq' parameter is stock-code
		endif
	endconfirm
endscreen //a1015-stock-balance-summary-by-whse ---------------------------
#endif

screen select-contract-order
local field
	lf-display				like so-order-total-amount
	//
	window @6,13 to @23,80
		title is "Select Contract Order"
	allowed i81modes-md-select search
	primary sales-order
		on index so-cust-code so-order-no so-bo-suffix
		same so-cust-code
		when so-order-status = I5SO_CONTRACT_ORDER
		and i50lines-licence-start-date between
		so-delivery-date and so-actual-delivery-date
		and (so-order-total-amount = 0
		or (so-order-total-amount != 0
		and so-order-total-amount - so-order-total-shipped-amount > 0))
		and (so-order-total-charges = 0
		or (so-order-total-charges != 0
		and so-order-total-charges - so-order-total-shipped-cost > 0))
	datagrid occurs 15
	review-from-start
detail
	accept so-order-no @6,22
		help 'Enter the order number to find'
	accept so-bo-suffix @6,24
		help 'Enter the backorder suffix to find'
		optional
	display so-cust-reference @6,26
	display so-delivery-date @6,28
		title is "Start Date"
	display so-actual-delivery-date @6,30
		title is "End Date"
	if so-order-total-amount != 0
		set lf-display = so-order-total-amount - so-order-total-shipped-amount
	else
		set lf-display = ZERO
	endif
	display lf-display @6,32
		title is "Limit Remaining"
	confirm auto
	confirmed
		if screen-mode() = i81modes-md-select
			set ws-proforma-order-no = so-order-no
			set ws-proforma-bo-suffix = so-bo-suffix
			set sol-line-description = so-cust-reference
			set i50lines-found-contract = TRUE
			exit
		endif
	endconfirm
after
	set sol-line-description = SPACES
	set ws-proforma-order-no = 0
	set ws-proforma-bo-suffix = SPACES
	message 'No contract selected'
endscreen //select-contract-order --------------------------------------------

screen select-suspended-order
	window @4,1 to @23,80
		title is "Select Suspended Order"
	allowed i81modes-md-select search
	primary tmp-suspended-orders
		on index tmp-order-no tmp-bo-suffix
	datagrid occurs 18
	review-from-start
before
	do check-suspended-orders
detail
	accept tmp-order-no @4,2
		help 'Enter the order number to find'
	display tmp-customer @4,4
	display tmp-order-date @4,6
	display tmp-entered-by @4,8 pic x(10)
	display tmp-whse @4,10
	display tmp-reference @4,12
	display tmp-rep-code @4,14
	get deb-master
		on index accountcode
		key is tmp-customer
	on error
	else
		display shortname @4,16
	endon
	confirm auto
	confirmed
		if screen-mode() = i81modes-md-select
			set ws-saved-order-no = tmp-order-no
			set ws-saved-bo-suffix = tmp-bo-suffix
			exit
		endif
	endconfirm
after
	set ws-found-suspended-order = FALSE
	message 'No order selected'
endscreen //select-suspended-order -------------------------------------------

procedure check-suspended-orders
	open tmp-suspended-orders temporary
	extract saved-sales-order
		on index so-order-status so-order-priority so-delivery-date
			so-order-no so-bo-suffix
		key is I5SO_ORDER_SUSPENDED 0 0 0 SPACES
		next same so-order-status
	detail
		I8USERWHSE_VALIDATE_WHSE_TERR_BY_USER('W',so-whse-code,ws-whse-ok)
		do validate-whse-terr-by-user
			returning ws-terr-ok
		if ws-whse-ok and ws-terr-ok
			set tmp-order-no = so-order-no
			set tmp-bo-suffix = so-bo-suffix
			set tmp-customer = so-cust-code
			set tmp-order-date = so-order-date
			set tmp-entered-by = so-user-id-code
			set tmp-whse = so-whse-code
			set tmp-reference = so-cust-reference
			set tmp-rep-code = so-rep-code
			insert tmp-suspended-orders
		endif
	endextract
	position tmp-suspended-orders
		on index tmp-order-no tmp-bo-suffix
		key is 0 SPACES
endprocedure //check-suspended-orders ----------------------------------------

procedure validate-whse-terr-by-user
	returning
		lr-ok		pic 9
	local field
		lf-valid-whse-terr-for-user			type boolean
	//
	set lr-ok = TRUE
	if sys-so-territory-default != "M"
		if sys-so-territory-default in { "W" "B" }
			do i8userwhse-determine-user-masking-on-system-codes
				parameter
					"W"	//Test Warehouse
					so-territory-code
				returning
					lf-valid-whse-terr-for-user
		else
			do i8userwhse-determine-user-masking-on-system-codes
				parameter
					"T"	//Test Territory
					so-territory-code
				returning
					lf-valid-whse-terr-for-user
		endif
		if not lf-valid-whse-terr-for-user
			message "You don't have access to this sales type "
				so-territory-code
			set lr-ok = FALSE
		else
			set lr-ok = TRUE
		endif
	endif
endprocedure //validate-whse-terr-by-user ------------------------------------

procedure create-install-call
	save sales-order
	save sales-order-line
	spl 'service/s15engcap'
		parameters are 	so-order-no so-bo-suffix
			so-cust-code '-inst'
	restore sales-order
	get sales-order lock
		on index so-order-no so-bo-suffix
		key is so-order-no so-bo-suffix
	restore sales-order-line
endprocedure //create-install-call -------------------------------------------

procedure delete-sales-order-line-extra-detail
	get sales-order-line-extra-detail lock
		on index so-order-no so-bo-suffix sol-line-seq soled-type
		key is so-order-no so-bo-suffix sol-line-seq "R"
	on error
	else
		delete sales-order-line-extra-detail
	endon
endprocedure //delete-sales-order-line-extra-detail ----------------------------

procedure check-issues-to-work-orders
	local
		lf-trn-batch-ref				like trn-batch-ref
	//
	//Check if it's to supply a work order
	//If so - then set the work order transaction back to 'committed'
	//
	set lf-trn-batch-ref =
		concat("SO",fstr(so-order-no, BMSDEF_NUMSIZE(so-order-no),0))
	select *
		from sales-order-work-link
		where sowl-so-order-no = :so-order-no
			and sowl-so-bo-suffix = :so-bo-suffix
			and sowl-sol-line-seq = :sol-line-seq
	detail
		if so-order-status in I5SOSTATII_SO_TRANSFER_STATII
			select *
				from bom-work-order-trans
				where work-order = :sowl-work-order
				and comp-code = :stock-code
				and trn-batch-ref = lf-trn-batch-ref
				and trn-code = 'TFR'
				and trn-qty = :sol-ordered-qty
			for update
			detail
				do revert-to-commit-transaction
				// there should only be one
				break
			endselect
		else
			select *
				from bom-work-order-trans
				where work-order = :sowl-work-order
				and comp-code = :stock-code
				and trn-batch-ref = lf-trn-batch-ref
				and trn-code = 'ISS'
				and trn-qty = :sol-ordered-qty
			for update
			detail
				do revert-to-commit-transaction
				// there should only be one
				break
			endselect
		endif
	endselect
	//
endprocedure //check-work-order-issues ----------------------------------------

procedure revert-to-commit-transaction
	set trn-code = 'COM'
	set trn-batch-ref = SPACES
	update bom-work-order-trans
	get stock-warehouse-detail
		on index stock-code whse-code
		key is stock-code trn-whse
	on error ENOREC
	else
		do i4strupd-stream-update
			parameters stock-code trn-whse work-order SPACES ZERO
				I4STRDEF_WHSE_FACTORY_ORDERS trn-qty
	endon
endprocedure //revert-to-commit-transaction ----------------------------------

screen show-original-order-qty
	local field
		lf-saved-line-seq 		like sol-line-seq
		lf-saved-bo-suffix 		like so-bo-suffix
		lf-original-ordered-qty like sol-ordered-qty
		//
	window @21,45 to @23,80
		title 'Original Quantity'
		no-hide
	allow entry md-show
before
	set lf-saved-bo-suffix = so-bo-suffix
	set lf-saved-line-seq = sol-line-seq
	set lf-original-ordered-qty = 0
	extract sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no SPACES 0
		next same so-order-no
		when sol-line-seq = lf-saved-line-seq
		and sol-update-whse not in {'E' 'X'}
	detail
		set lf-original-ordered-qty += sol-ordered-qty
	endextract
	extract sales-order-line-archive
		on index so-order-no so-bo-suffix sol-line-seq
		key is so-order-no SPACES 0
		next same so-order-no
		when sol-line-seq = lf-saved-line-seq
		and sol-update-whse not in {'E' 'X'}
	detail
		set lf-original-ordered-qty += sol-ordered-qty
	endextract
	display "Quantity : " @22,46 background
detail
	display lf-original-ordered-qty @22,57 foreground data
	confirm auto
	confirmed
		if screenmode() = md-show
			pause
		endif
		get sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no lf-saved-bo-suffix lf-saved-line-seq
		exit
	endconfirm
endscreen //show-original-order-qty ----------------------------------------

procedure test-to-do-alert
	local field		lf-credit-order		pic 9
	//
	set ws-ok = TRUE
	if i50entry-sales-credit = YES
	or i50entry-return-authorisation = YES
		set lf-credit-order = TRUE
	else
		set lf-credit-order = FALSE
	endif
	if not lf-credit-order and ws-total-ordered-incl-charges < 0
		do i50lines-alert returning ws-ok parameters are
			"WARNING - Total is not a positive/debit amount"
	elseif lf-credit-order and ws-total-ordered-incl-charges > 0
		do i50lines-alert returning ws-ok parameters are
			"WARNING - Total is not a negative/credit amount"
	endif
	do i50cusnote-maintain-notes
endprocedure //test-to-do-alert ----------------------------------------------

procedure check-for-install-link
	returning
		lr-install-call-found			type boolean
	parameters
		lp-ref-no						like call-link-ref-no
		//
	set lr-install-call-found = FALSE
	if sys-service-used <> NO
		extract service-links
			on index call-link-type call-link-ref-no
			key is ISDEFINES_CALL_INSTALL_LINK lp-ref-no
			next same call-link-type call-link-ref-no
			when sp-so-bo-suffix = so-bo-suffix
		detail
			set lr-install-call-found = TRUE
			break
		endextract
	endif
endprocedure //check-for-install-link ----------------------------------------

procedure do-they-really-want-freight
	set ws-freight-question-asked = TRUE
	set ws-charge-extra-item = NO
	message-box if-then-else(ws-process-mode = ENTRY
		,'Do you want delivery charged for this order ?'
		,'Do you want delivery charged for this line ?')
		title "Confirm Delivery Charge"
		message-buttons MSG_BOX_YES_NO
		default is MSG_BOX_NO
		icon is MSG_BOX_QUESTION
		tag 1
	if message-status() = MSG_BOX_YES
		set ws-charge-extra-item = YES
	endif
endprocedure //do-they-really-want-frieght -------------------------------------

screen accept-catalog-no
	window @19,48 to @23,80
		title 'Catalogue'
	allow correct
before
	box @19,48 to @22,80
		title SPACES
	if ws-year = ZERO
		set ws-year = year(today())
	endif
detail
	accept ws-catalog-no @20,65
		title "Catalogue No:"
		help "Enter Catalogue No. (if applicable)"
		default ws-catalog-no
		show-value
		optional
	on help-key
		do help-on-catalog
		if deb-catalog-no != ZERO
			set ws-catalog-no = deb-catalog-no
			set ws-year = dc-year
		endif
		reenter optional
	endon
	validation
		do public-determine-year-for-catalogue
			parameter
				ws-catalog-no
				ws-year
			returning
				ws-year
		refresh ws-year
	endvalidation
	accept ws-year @21,65
		title "Catalogue Year:"
		help "Enter catalogue year"
		default ws-year
		show-value
	validation
		if ws-catalog-no != ZERO
			get deb-catalog
				on index deb-catalog-no dc-year
				key is ws-catalog-no ws-year
			on error
				message 'Catalogue no. not valid '
				reenter
			else
				if so-order-date not between dc-start-date and dc-end-date
					message "Catalogue is not open"
					reenter
				elseif dc-source <> SPACES
					message "Catalogue is only for POS or Internet orders"
					reenter
				endif
			endon
		endif
	endvalidation
	confirm auto
	confirmed
		exit
	endconfirm
after
	set ws-catalog-no = ZERO
endscreen //accept-catalog-no ------------------------------------------------

screen help-on-catalog
	window @11,21 to @23,80
		title is 'Current Catalogues'
	allow i81modes-md-select search
	select *
	from
		deb-catalog
	order by deb-catalog-no
	where :so-order-date between dc-start-date and dc-end-date
	and dc-source = SPACES
	datagrid occurs 11
detail
	accept deb-catalog-no @11,26 pic z(8)
		help 'Enter catalogue No. to locate'
		showvalue
	display dc-desc @11,28
	display dc-start-date @11,30
	display dc-end-date @11,32
	confirm auto
	confirmed
		if screenmode() = i81modes-md-select
			exit
		endif
	endconfirm
after
	set deb-catalog-no = ZERO
endscreen //help-on-catalog -------------------------------------------------

screen enquire-by-catalog
	window @11,35 to @23,80
		title is 'Catalogue For Customer'
	allow i81modes-md-select search
	select *
	from deb-catalog-detail
		stock-master
		order by deb-catalog-no dcd-year stock-code
		where deb-catalog-no = :ws-catalog-no
		and dcd-year = :ws-year
	datagrid occurs 11
before
	set accountcode = so-cust-code
detail
	accept stock-code @11,46
		help 'Enter item code to locate'
		showvalue
	display stk-description @11,48
	confirm auto
	confirmed
		if screenmode() = i81modes-md-select
			exit
		endif
	endconfirm
after
	set stock-code = SPACES
endscreen //enquire-by-catalog -------------------------------------------------

procedure find-outstanding-contract-order
	parameter
		lp-customer-code				like so-cust-code
		lp-cust-reference				like so-cust-reference
	returning
		lr-contract-order-found			type boolean
	//
	select * from sales-order
		where so-cust-code = :lp-customer-code
		and so-order-status = I5SO_CONTRACT_ORDER
		and :i50lines-licence-start-date between
		so-delivery-date and so-actual-delivery-date
	before
		set lr-contract-order-found	= FALSE
	detail
		if (so-order-total-amount = 0
		or (so-order-total-amount != 0
		and so-order-total-amount - so-order-total-shipped-amount > 0))
		and (so-order-total-charges = 0
		or (so-order-total-charges != 0
		and so-order-total-charges - so-order-total-shipped-cost > 0))
			set lr-contract-order-found	= TRUE
			break
		elseif so-cust-reference = lp-cust-reference
			//Exceeded sales limit, may want to correct, remove
			//existing item lines
			set ws-proforma-order-no = so-order-no
			set ws-proforma-bo-suffix = so-bo-suffix
		endif
	endselect
endprocedure //find-outstanding-contract-order --------------------------------

procedure ok-to-post-income-and-cost-flags
	// controls maintenance of cost/price fields
	// returns currency on job-cost-master, commitments, service-call
	returning
		lr-ok-to-post-cost			type boolean
		lr-ok-to-post-income		type boolean
		lr-cost-message				type string pic x(80)
		lr-income-message			type string pic x(80)
	local
		lf-vj-type					pic XX
		lf-job-found				type boolean
		lf-cost-tracking-used		type boolean
	//
	set lr-ok-to-post-cost 			= TRUE
	set lr-ok-to-post-income 		= TRUE
	//
	do ijgeneral-job-setup-for-sales-order
		parameters
			SPACES				// unknown job-code
			so-order-no
			so-bo-suffix
			so-order-source
			so-order-status
			SPACES				// service-call action code not known
		returning
			lf-job-found
			lf-cost-tracking-used
			lf-vj-type
		// returns currency on job-cost-master, job-cost-commitments,
		//	service-call
	if so-price-code = 'I' // internal
		set lr-ok-to-post-income	= FALSE
		set lr-income-message 		= "Only Costs allowed"
	elseif job-code != SPACES
	and (sys-job-used-flag != NO
		or so-order-source in { I5SOURCE_SERVICE_REPAIR  I5SOURCE_SERVICE_PM_CALL
							I5SOURCE_SERVICE_PM_3_CALL
							I5SOURCE_SERVICE_FDE_PM_CALL I5SOURCE_RENTAL }		)
	then
		if job-type = IJOBTYPE_NON_CHARGE_SERVICE
		and so-order-type-code != I5SO_TYPE_JOB_ISSUE
			set lr-ok-to-post-income	= FALSE
			set lr-income-message 		= "Proj Type is NO CHARGE"
		endif
		if not lf-cost-tracking-used
		and  so-order-type-code != I5SO_TYPE_JOB_ISSUE
				// m5invoice requires VJ
				// Table to map stk-stock-group to cost[income] category
			set lr-ok-to-post-cost = FALSE
			set lr-cost-message
				= concat("'VJ' system table not set for '",
					lf-vj-type,"' entries. Labour and Special items only")
			//
			if job-cost-category = SPACES // as per job-cost commitment
				set lr-ok-to-post-income = FALSE
				set lr-income-message = "Project Income Category is spaces"
				//
				set lr-cost-message
					= concat("'VJ' system table not set for '",
						lf-vj-type,"' entries. Labour and Special items only")
			else
				set lr-cost-message
					= concat("Sales Order Cost Category is set to type Income.",
						" Labour and Special items only")
			endif
		endif
	endif
	if so-order-type-code = I5SO_TYPE_JOB_ISSUE
	and job-code != SPACES
		do clibjob-check-if-any-cbs-for-job
			parameter job-code job-cost-centre
			returning ws-cbs-exist
	endif
endprocedure //ok-to-post-income-and-cost-flags --------------------------------

screen attempt-to-create-new-debtor
	parameter
		lp-accountcode					like accountcode
	returning
		lr-accountcode					like accountcode
	local field
		lf-debtor-no					pic 9(10)
		lf-serial-no					pic x(10)
		lf-default-rep					like rep-code
		lf-sales-credit-limit-default	like credit-limit
		lf-default-price-code			like price-code
		lf-postcode						like postcode
		lf-error-found					type boolean
		lf-error-message				type varchar pic x(256)
		lf-success-message				type varchar pic x(256)
	//
	window @13,25 to @23,80
		title 'Customer Creation'
before
	open system-defaults
	get system-defaults
		first
	on error
		initialize system-defaults
	endon
	if sys-create-deb-at-order-entry in {"H" "Y"}
		if (strlen(lp-accountcode) <= 3
			and (sys-get-next-serial-for-acnt between "6" and "9"
				or sys-get-next-serial-for-acnt between "A" and "F"))
		or (strlen(lp-accountcode) <= 6
			and (sys-get-next-serial-for-acnt between "G" and "M"
				or sys-get-next-serial-for-acnt between "O" and "Q"))
			if sys-get-next-serial-for-acnt between "B" and "F"
			or sys-get-next-serial-for-acnt in {"L" "M" "O" "P" "Q"}
				set sys-tbl-code = concat("DC",lp-accountcode)
				get system-table
					key is "YY" sys-tbl-code
				on error
					initialise system-table
						leaving sys-tbl-type sys-tbl-code
					set sys-money-value = 1
					insert system-table
				endon
			else
				set sys-tbl-code = "DC"
			endif
			do clibserial-next-serial-number
				parameters
					sys-tbl-code
				returning
					lf-debtor-no
			set lf-serial-no = str(lf-debtor-no)
			ACCNTPAD_ACCOUNT_PAD(lp-accountcode,lf-serial-no)
			set lp-accountcode =
				concat(substring(accountcode,1,strlen(accountcode)),
					lf-serial-no)
				set accountcode = lp-accountcode
			get deb-master lookup
				on index accountcode
				key is accountcode
			on error
			else
				message 'Allocated customer already on file -check serial number'
				exit
			endon
		endif
	endif
	display "New Customer :" @14,28
	display accountcode @14,43 data
	display "Name    :" @16,33
	display "Address :" @17,33
	display "Postcode :" @20,50
	display "Phone   :" @21,33 background
	if sys-default-whse = SPACES
		set sys-default-whse = sys-warehouse-def
	endif
	if getenv("SALEREP") <> SPACES
		set lf-default-rep = getenv("SALEREP")
	endif
	if getenv("SALEREPLOGIN") <> SPACES
		get rep-master
			on index rep-login-id
			key is login-id()
		on error
		else
			set lf-default-rep = rep-code
		endon
	endif
	if lf-default-rep = SPACES
		set lf-default-rep = sys-rep-def
	endif
	if lf-default-rep = SPACES
		set lf-default-rep = sys-default-rep
	endif
	if sys-default-territory = SPACES
		set sys-default-territory = sys-territory-def
	endif
	I8OPTFLD_GET_PRCCODE(lf-default-price-code)
	if lf-default-price-code = SPACES
		//This creation used mostly by POS
		set lf-default-price-code = 'R'
	endif
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'DZ' 'CREDIT_LMT'
	on error
		set sys-tbl-alpha-2 = SPACES
	endon
	set lf-sales-credit-limit-default = sys-tbl-alpha-2
	if lf-sales-credit-limit-default = SPACES
		//This creation used mostly by POS
		set lf-sales-credit-limit-default = 'A'
	endif
	display "Bill to :" @15,33
detail
	accept bill-to @15,43
		help 'Enter account for billing.'
		default accountcode
		lookup deb-master key is bill-to
		on error
			if bill-to <> accountcode
				message 'Bill to account does not exist'
				re_enter optional
			endif
		endon
	accept na-name @16,43
		help "Enter the company name for this address"
		use-validate-trigger
	validation
		if na-name = SPACES
			message 'Must enter company/customer name'
			re_enter optional
		endif
	endvalidation
	accept na-company @17,43
		help "Enter line 1 of the address"
		use-validate-trigger
	validation
		if na-company = SPACES
			message 'Must enter first address line'
			re_enter optional
		endif
	endvalidation
	accept na-street @18,43
		help "Enter line 2 of the address"
		optional
		use-validate-trigger
	accept na-suburb @19,43
		help "Enter line 3 of the address"
		optional
		use-validate-trigger
	accept lf-postcode @20,61
		help "Enter the postcode"
		default lf-postcode
		optional
	on help_key
		do clibpostcode-enquire-on-postcodes
			parameters lf-postcode
			returning lf-postcode
		reenter optional
	endon
	accept na-country-code @21,43
		help "Enter the country code for the phone number"
		default SPACES
	accept na-phone @21,48
		help "Enter the phone number for this address"
	validation
		if na-phone = SPACES
			message 'Must enter the phone number'
			re_enter optional
		endif
		set postcode = lf-postcode
	endvalidation
	confirm default is YES
	confirmed
		set lr-accountcode = accountcode
		initialise deb-master leaving accountcode bill-to
		set dr-clearflag = "O"
		set shortname = na-name
		if get-param(1) = '-cash'
		and cd-default-whse != SPACES
			set warehouse = cd-default-whse
		else
			get system-user
				on index sys-comp-code user-id
				key is sys-consolidation-division login-id()
			on error
				set warehouse = sys-default-whse
			else
				set warehouse = user-whse
			endon
		endif
		if get-param(1) = '-cash'
		and get-param(4) != SPACES
			set rep-code = get-param(4)
		elseif get-param(1) = '-cash'
			set rep-code = cd-default-rep
		else
			set rep-code = lf-default-rep
		endif
		if get-param(1) = '-cash'
		and cd-default-so-terr != SPACES
			set territory = cd-default-so-terr
		else
			get system-user
				on index sys-comp-code user-id
				key is sys-consolidation-division login-id()
			on error
				set territory = sys-default-territory
			else
				set territory = user-territory
			endon
		endif
		set credit-limit = lf-sales-credit-limit-default
		set price-code = lf-default-price-code
		set dr-date-created = today()
		if sys-create-deb-at-order-entry = 'H'
			set deb-status = 'N'
		else
			set deb-status = SPACES
		endif
		//
		set na-type = 'C'
		//
		do clibnewmast-create-new-customer
			parameter	deb-master.*
						name-and-address-master.*
			returning	lf-error-found
						lf-error-message
						lf-success-message
						deb-master.*
		//
		if lf-error-found
			message "Unable to create customer, Error " file-status()
		else
			if lf-error-message != SPACES
				// inserting name-and-address master failed on duplicate
				// as customer may be a supplier - same address, if so
				// update it with these entered details.
				//
				save name-and-address-master
				get name-and-address-master lock
					on index accountcode na-type
					key is accountcode 'C'
				on error
					restore name-and-address-master
					insert name-and-address-master
				else
					restore name-and-address-master
					update name-and-address-master
				endon
			endif
		endif
	endconfirm
endscreen //attempt-to-create-new-debtor -------------------------------------

screen get-location-up-front
	returning
		lr-van-location			like ws-van-id
	local
		lf-confirm				pic x
	//
	window @19,39 to @23,80
		title "Van/Sub Location Selection"
before
	display "Van/Location Code :" @20,40
	display "   OK To Continue :" @21,40
detail
	accept lr-van-location @20,63
		help 'Enter van/location code required for allocation to lines without vans allocated'
		uppercase
		default lr-van-location
	on help-key
		do iwvalloc-enquire-on-valid-locations
		if sl-location-code != SPACES
			set lr-van-location = sl-location-code
		endif
		reenter optional
	endon
	validation
		get warehouse-valid-locations
			on index whse-code sl-location-code
			key is whse-code lr-van-location
		on error
			message "Van/location code selected doesn't exist"
			reenter
		endon
	endvalidation
	accept lf-confirm @21,63
		allow YES NO
		default YES
		uppercase
	confirm auto
	confirmed
		exit
	endconfirm
after
	set lr-van-location = SPACES
endscreen //get-van-location-up-front ---------------------------------

procedure determine-warehouse-cost
	parameters
		lp-stock-code			like stock-code
		lp-whse-code			like whse-code
		lp-from-whse			like whse-code
	returning
		lr-whse-cost			like whse-warehouse-cost
	local field
		lf-found-cost			type boolean
	//
	get system-table-groupings
		on index sys-tbl-type sys-tbl-code
		key is 'WH' lp-whse-code
	on error
		// No group leave cost at zero
		exit
	endon
	set lf-found-cost = FALSE
	extract system-table-groupings
		on index sys-tbl-type stg-key-1
		key is 'WH' stg-key-1
		next same sys-tbl-type stg-key-1
	detail
		//check for another whse record in the same group
		get stock-warehouse-detail
			on index whse-code stock-code
			key is sys-tbl-code lp-stock-code
		on error
		else
			set lf-found-cost = TRUE
			set lr-whse-cost = whse-warehouse-cost
			break
		endon
	endextract
	if lf-found-cost = FALSE
		if sys-charge-for-inter-transfers != 'D'
			//If no records in the grp set it to the sending whse cost
			get stock-warehouse-detail
				on index stock-code whse-code
				key is lp-stock-code lp-from-whse
			on error
				//cost will be zero
			else
				set lr-whse-cost = whse-warehouse-cost
			endon
		endif
	endif
endprocedure //determine-warehouse-cost ---------------------------------------

procedure add-retail-tax-if-required
	if so-price-code in I5SOSTATII_RETAIL_ONLY
	and sys-stax-incl-in-sales-files != YES
		//Now add the sales-tax onto the price
		//1st get item sales-tax
		//
		set sol-item-price = (sol-item-price
		* ( 1 + (sol-tax-rate / 100)))
	endif
endprocedure //add-retail-tax-if-required ------------------------------------

menu ask-type-of-note-line
	window @19,50 to @22,80
detail
	option 'Memo Line Notes' @20,52
		help "View/maintain memo notes for this line"
		do m50lines-notes-via-prowp
			parameter so-order-no so-bo-suffix sol-line-seq '~M'
		exit
	option 'Other Notes for Line' @22,52
		help "View/maintain other notes for this line"
		when stk-outside-supplier-flag != 'O'
		do m50lines-notes-via-prowp
			parameter so-order-no so-bo-suffix sol-line-seq '~O'
		exit
	confirm auto
	confirmed
		exit
	endconfirm
endmenu //ask-type-of-note-line-----------------------------------------------

menu ask-type-of-note-line-inc-combined
	window @19,50 to @22,80
detail
	option 'Memo Line Notes' @20,52
		help "View/maintain memo notes for this line"
		do m50lines-notes-via-prowp
			parameter so-order-no so-bo-suffix sol-line-seq '~M'
		exit
	option 'Other Notes for Line' @22,52
		help "View/maintain other notes for this line"
		when stk-outside-supplier-flag != 'O'
		do m50lines-notes-via-prowp
			parameter so-order-no so-bo-suffix sol-line-seq '~O'
		exit
	option 'Combined Lines View' @22,52
		help "View combined lines with Memo/Other notes"
		save sales-order-line
		do m50lines-combined-lines-view
			parameter so-order-no so-bo-suffix sol-line-seq
		restore sales-order-line
		get sales-order-line
			on index so-order-no so-bo-suffix sol-line-seq
			on index so-order-no so-bo-suffix sol-line-seq
		on error
			//Shouldnt fail but maybe if we add maintenance to the tmp screen
			//then maybe we need this trap
		endon
	confirm auto
	confirmed
		exit
	endconfirm
endmenu //ask-type-of-note-line-----------------------------------------------

object tmp-prowp-file
	type text
record
	tmp-prowp-text				pic x(50)
endrecord

procedure m50lines-notes-via-prowp
parameter lp-order-no 			like so-order-no
		lp-bo-suffix			like so-bo-suffix
		lp-line-seq				like sol-line-seq
		lp-note-type			like soln-type
local field lf-prowp-heading	pic x(50)
		lf-note-seq				like soln-seq-no
	//
	open tmp-prowp-file temporary
	if lp-note-type = "~M"
		set lf-prowp-heading =
			concat(translate "Memo Notes for Sales Order Line: ",
				str(lp-line-seq))
	elseif lp-note-type = "~O"
		set lf-prowp-heading =
			concat(translate "Other Notes for Sales Order Line: ",
				str(lp-line-seq))
	endif
	//
	extract sales-order-line-notes
		on index so-order-no so-bo-suffix sol-line-seq soln-type soln-seq-no
		key is lp-order-no lp-bo-suffix lp-line-seq lp-note-type 0
		next same so-order-no so-bo-suffix sol-line-seq soln-type
	detail
		set tmp-prowp-text = soln-text
		insert tmp-prowp-file
	endextract
	command "prowp" parameters are
		"-h" lf-prowp-heading
		"-b" "12" "32" "10" "10"
		file-name(tmp-prowp-file)
	//
	extract sales-order-line-notes lock
		on index so-order-no so-bo-suffix sol-line-seq soln-type soln-seq-no
		key is lp-order-no lp-bo-suffix lp-line-seq lp-note-type 0
		next same so-order-no so-bo-suffix sol-line-seq soln-type
	detail
		delete sales-order-line-notes
	endextract
	//
	set lf-note-seq = 0
	extract tmp-prowp-file
		all
	detail
		set lf-note-seq += 1
		initialise sales-order-line-notes
		set so-order-no 	= lp-order-no
		set so-bo-suffix 	= lp-bo-suffix
		set sol-line-seq 	= lp-line-seq
		set soln-type 		= lp-note-type
		set soln-seq-no 	= lf-note-seq
		set soln-text 		= tmp-prowp-text
		insert sales-order-line-notes
	endextract
endprocedure //m50lines-notes-via-prowp-----------------------------------------

object tmp-combined-lines-notes
	type memory
record
	tcln-order-no			like so-order-no
	tcln-backorder-flag		like so-bo-suffix
	tcln-l-seq				like sol-line-seq
	tcln-supplier-code		like stock-code
	tcln-note-type			like soln-type
	tcln-note-seq			like soln-seq-no
endrecord
key is tcln-order-no tcln-backorder-flag tcln-l-seq tcln-note-type tcln-note-seq

screen m50lines-combined-lines-view
parameter
		lp-order-no			like so-order-no
		lp-bo-suffix		like so-bo-suffix
		lp-line-seq			like sol-line-seq
local field
		lf-notes			like sol-line-description
		lf-stock-code		like stock-code
		lf-note-type		pic x(20)
		lf-supplier-code	like stock-code
	//
	window @1,1 to @23,88
		title concat(translate 'Combined Lines/Notes for SO: ',
				str(lp-order-no),lp-bo-suffix)
		primary tmp-combined-lines-notes
			same tcln-order-no tcln-backorder-flag
		allowed search stock-enquiry
		datagrid occurs 21
	before
		do load-tmp-combined-lines-notes
			parameter lp-order-no lp-bo-suffix
		position tmp-combined-lines-notes
			key is lp-order-no lp-bo-suffix lp-line-seq
	detail
		set lf-stock-code = SPACES
		set lf-supplier-code = SPACES
		accept tcln-l-seq @1,1
			help 'Enter line sequence to find'
			default tcln-l-seq
		if tcln-note-seq = 0
			get sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key is tcln-order-no tcln-backorder-flag tcln-l-seq
			on error
				set lf-notes = SPACES
			else
				if sol-line-type in {"DN" "DM"}
					set lf-notes = sol-line-description
				else
					set lf-stock-code = stock-code
					set lf-notes = SPACES
					if sol-line-description <> SPACES
						set lf-notes = sol-line-description
					else
						get stock-master
							on index stock-code
							key is stock-code
						on error
						else
							set lf-notes = stk-description
						endon
					endif
				endif
			endon
		else
			set lf-stock-code = SPACES
			get sales-order-line-notes
				on index so-order-no so-bo-suffix sol-line-seq soln-type
					soln-seq-no
				key is tcln-order-no tcln-backorder-flag tcln-l-seq
					tcln-note-type tcln-note-seq
			on error
				set lf-notes = SPACES
			else
				set lf-notes = soln-text
			endon
		endif
		if sol-line-type = 'SS'
		and sys-raise-po-from-so in { '2' '3' '4' '5' }
		and tcln-supplier-code <> SPACES
			set lf-supplier-code = tcln-supplier-code
			set lf-stock-code = SPACES
		endif
		display lf-supplier-code @1,3
			title 'Supplier Code'
		display lf-stock-code @1,5
		display tcln-note-seq @1,7 pic zzz9.9
			title 'Seq'
		if tcln-note-type = "~M"
			set lf-note-type = translate "Memo Note"
		elseif tcln-note-type = "~O"
			set lf-note-type = translate "Other Note"
		elseif tcln-note-type = SPACES
			if sol-line-type = "SN"
				set lf-note-type = translate 'Stock Line'
			elseif sol-line-type = "SS"
				set lf-note-type = translate 'Special Line'
			elseif sol-line-type = "SC"
				set lf-note-type = translate 'Charge Line'
			elseif sol-line-type = "DN"
				set lf-note-type = translate 'Note Line'
			elseif sol-line-type = "DM"
				set lf-note-type = translate 'Memo Line'
			else
				set lf-note-type = SPACES
			endif
		endif
		display lf-note-type @1,9 pic x(12)
			title 'Note Type'
		display lf-notes @1,11
			title 'Notes'
	confirm auto
	confirmed
		if screenmode() = stock-enquiry
			if sol-line-type = 'SS'
			and sys-raise-po-from-so in { '2' '3' '4' '5' }
			and tcln-supplier-code <> SPACES
				get cre-master lookup
					on index cre-accountcode
					key is tcln-supplier-code
				on error ENOREC
					message-box 'No Supplier Found'
						title 'Supplier Enquiry'
				else
					spl "cre/m20mast"
						parameters
							"-drill"
							tcln-supplier-code
				endon
			else
				spl "stk/m4stkqenq"
					parameter
						stock-code
			endif
		endif
	endconfirm
endscreen//m50lines-combined-lines-view-----------------------------------------

procedure load-tmp-combined-lines-notes
parameter lp-order-no		like so-order-no
		lp-bo-suffix		like so-bo-suffix
	//
	open tmp-combined-lines-notes temporary
	extract sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		key is lp-order-no lp-bo-suffix 0
		next same so-order-no so-bo-suffix
	detail
		set tcln-order-no			= so-order-no
		set tcln-backorder-flag		= so-bo-suffix
		set tcln-l-seq				= sol-line-seq
		set tcln-note-type			= SPACES
		set tcln-note-seq			= 0
		if sol-line-type = 'SS'
		and sys-raise-po-from-so in { '2' '3' '4' '5' }
			set tcln-supplier-code = stock-code
		else
			set tcln-supplier-code = SPACES
		endif
		insert tmp-combined-lines-notes
		extract sales-order-line-notes
			on index so-order-no so-bo-suffix sol-line-seq soln-type
				soln-seq-no
			key is so-order-no so-bo-suffix sol-line-seq SPACES 0
			next same so-order-no so-bo-suffix sol-line-seq
			where soln-type in {"~M" "~O" "~L"}
		detail
			set tcln-order-no		= so-order-no
			set tcln-backorder-flag	= so-bo-suffix
			set tcln-l-seq			= sol-line-seq
			set tcln-note-type		= soln-type
			set tcln-note-seq		= soln-seq-no
			insert tmp-combined-lines-notes
		endextract
	endextract
endprocedure //load-tmp-combined-lines-notes-----------------------------------

procedure check-custom-menu-options
	returning lr-menu-option	pic x(20)	occurs 3
		lr-menu-program			pic x(30)	occurs 3
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PR' 'SOLCUS1-MP'	//Menu program
	on error
	else
		if sys-description != SPACES
			set lr-menu-program[1] = sys-description
			get system-table
				on index sys-tbl-type sys-tbl-code
				key is 'PR' 'SOLCUS1-MN'	//Menu option
			on error
				set lr-menu-program[1] = SPACES
			else
				set lr-menu-option[1] = sys-description
			endon
		endif
	endon
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PR' 'SOLCUS2-MP'
	on error
	else
		if sys-description != SPACES
			set lr-menu-program[2] = sys-description
			get system-table
				on index sys-tbl-type sys-tbl-code
				key is 'PR' 'SOLCUS2-MN'
			on error
				set lr-menu-program[2] = SPACES
			else
				set lr-menu-option[2] = sys-description
			endon
		endif
	endon
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PR' 'SOLCUS3-MP'
	on error
	else
		if sys-description != SPACES
			set lr-menu-program[3] = sys-description
			get system-table
				on index sys-tbl-type sys-tbl-code
				key is 'PR' 'SOLCUS3-MN'
			on error
				set lr-menu-program[3] = SPACES
			else
				set lr-menu-option[3] = sys-description
			endon
		endif
	endon
endprocedure

procedure check-uom-decimal
	parameter
		lp-sol-qty				like sol-ordered-qty
	returning
		lr-decimal-ok			type boolean
	local field
		lf-str-sol-qty			pic x(10) type string
		lf-rounding				pic 99v9(5)
		lf-decimals				like sys-default-no-of-decimals
	//
	set lr-decimal-ok = TRUE
	set lf-str-sol-qty = str(lp-sol-qty)
	do clibstk-item-rounding
		parameters
			sol-stk-unit-desc
		returning
			lf-rounding
			lf-decimals
	if pattern(lf-str-sol-qty,"[,.]")
	and strlen(lf-str-sol-qty) - pattern(lf-str-sol-qty,"[,.]")
	> lf-decimals
		message "Too many decimals, maximum = " fstr(lf-decimals,4,0)
		set lr-decimal-ok = FALSE
	endif
endprocedure //check-uom-decimal ---------------------------------------------

procedure remove-sales-order-line-retail-promo
	extract sales-order-line-retail-promo lock
		on index so-order-no so-bo-suffix sol-line-seq solrp-promotion
			solrp-disc-code
		key so-order-no so-bo-suffix sol-line-seq ZERO SPACES
		next same so-order-no so-bo-suffix sol-line-seq
	detail
		delete sales-order-line-retail-promo
	endextract
endprocedure //remove-sales-order-line-retail-promo --------------------------

procedure insert-discounts-into-retail-promo
	local
		lf-idx				pic 99
//
	for lf-idx = 1 to I5PRICEMOD_MAX_ARRAY
		if i5pricemod-rp-disc-code[lf-idx] > SPACES
			initialise sales-order-line-retail-promo
				leaving so-order-no so-bo-suffix sol-line-seq
			set solrp-type = i5pricemod-rp-disc-type[lf-idx]
			set solrp-disc-code = i5pricemod-rp-disc-code[lf-idx]
			set solrp-promotion = i5pricemod-rp-disc-promotion[lf-idx]
			set solrp-flag = i5pricemod-rp-disc-flag[lf-idx]
			set solrp-rate-amount = i5pricemod-rp-disc-amt-or-percent[lf-idx]
			set solrp-tax-included = i5pricemod-rp-tax-included[lf-idx]
			set solrp-cogs-function = i5pricemod-rp-cogs-function[lf-idx]
			insert sales-order-line-retail-promo
			on error
				// don't worry, record already there
			endon
		endif
	endfor
	for lf-idx = 1 to occurrence(drt-terms-rebate-code)
		if i5pricemod-gen-disc-code[lf-idx] > SPACES
			initialise sales-order-line-retail-promo
				leaving so-order-no so-bo-suffix sol-line-seq
			set solrp-type = i5pricemod-gen-disc-type[lf-idx]
			set solrp-disc-code = i5pricemod-gen-disc-code[lf-idx]
			set solrp-promotion = i5pricemod-gen-disc-promotion[lf-idx]
			set solrp-flag = i5pricemod-gen-disc-flag[lf-idx]
			set solrp-rate-amount = i5pricemod-gen-disc-amt-or-percent[lf-idx]
			set solrp-tax-included = i5pricemod-gen-tax-included[lf-idx]
			set solrp-cogs-function = i5pricemod-gen-cogs-function[lf-idx]
			insert sales-order-line-retail-promo
			on error
				// don't worry, record already there
			endon
		endif
	endfor
	//
endprocedure //insert-discounts-into-retail-promo ----------------------------

procedure check-if-promo-exists
	returning
		lr-promo-exists				type boolean
		lr-off-invoice				type boolean
	local
		lf-idx 						pic 99
//
	set	lr-promo-exists = FALSE
	set lr-off-invoice = FALSE
	for lf-idx = 1 to I5PRICEMOD_MAX_ARRAY
		if i5pricemod-rp-disc-type[lf-idx] > SPACES
		and i5pricemod-rp-disc-amt-or-percent[lf-idx] > ZERO
			//It is a discount(not a rebate) and kit item,this cannot be handled
			if i5pricemod-rp-disc-type[lf-idx] = 'D'
			and sol-line-type = 'KN'
				//Do not write sales-order-line-retail-promo
			else
				set lr-promo-exists = TRUE
				break
			endif
		endif
	endfor
	if not lr-promo-exists
		for lf-idx = 1 to occurrence(drt-terms-rebate-code)
			if i5pricemod-gen-disc-type[lf-idx] > SPACES
			and i5pricemod-gen-disc-amt-or-percent[lf-idx] > ZERO
				if i5pricemod-gen-disc-type[lf-idx] = 'D'
				and sol-line-type = 'KN'
					// Do not write sales-order-line-retail-promo as discount
					// from line amount is not handled for kit item.
				else
					set lr-promo-exists = TRUE
					break
				endif
			endif
		endfor
	endif
	//
	for lf-idx = 1 to I5PRICEMOD_MAX_ARRAY
		if i5pricemod-rp-disc-type[lf-idx] = 'D'
		and i5pricemod-rp-disc-amt-or-percent[lf-idx] > ZERO
			set lr-off-invoice = TRUE
			break
		endif
	endfor
	if not lr-off-invoice
		for lf-idx = 1 to occurrence(drt-terms-rebate-code)
			if i5pricemod-gen-disc-type[lf-idx] = 'D'
			and i5pricemod-gen-disc-amt-or-percent[lf-idx] > ZERO
				set lr-off-invoice = TRUE
				break
			endif
		endfor
	endif
endprocedure //check-if-promo-exists -----------------------------------------

procedure lines-place-stock-reservation
	//
	parameters
		lp-order-no						like so-order-no
		lp-bo-suffix					like so-bo-suffix
		lp-line-seq						like sol-line-seq
		lp-stock-code					like stock-code
		lp-stk-unit-conversion			like sol-stk-unit-conversion
		lp-whse-code					like so-whse-code
		lp-ordered-qty					like sol-ordered-qty
		lp-line-type					like sol-line-type
		lp-billto-account				like accountcode
		lp-van-id						like sl-location-code
		lp-whse-to						like so-whse-to
		lp-transfer-between-whse		pic x
		lp-stk-unit-desc				like sol-stk-unit-desc
	//
	returning
		lr-reenter						type boolean
	//
	local field
		lf-reserve-qty					like sol-ordered-qty
		lf-avail-dedicated				like whse-qty-on-hand
	//
	set lr-reenter = FALSE
	do i50strupd-remove-reserve
		parameters lp-order-no lp-bo-suffix lp-line-seq
	do i50strupd-lock-stock-warehouse-detail
		parameters lp-stock-code lp-whse-code
		returning i50entry-stock-warehouse-locked
	if not i50entry-stock-warehouse-locked
		message "Cannot lock stock warehouse detail "
			lp-stock-code
			lp-whse-code
			" (" file-status() ")"
		set lr-reenter = TRUE
		exit
	endif
	//******************************************************
	//** stock-warehouse-detail is now locked - available **
	//** stock call will now reveal most accurate result. **
	//******************************************************
	do i50lines-determine-available-stock
		parameters lp-order-no lp-bo-suffix lp-line-seq lp-line-type
			lp-ordered-qty lp-billto-account lp-whse-code lp-stock-code
			lp-van-id
			TRUE	//Accurate available stock.
			lp-stk-unit-desc
			lp-stk-unit-conversion
		returning
			ws-available-stk
			lf-avail-dedicated
			i50entry-dedicated-line
			sol-stk-unit-desc		// used to display available
			sol-stk-unit-conversion	// used to display available
	if ws-available-stk > lp-ordered-qty
		set lf-reserve-qty = lp-ordered-qty
	else
		set lf-reserve-qty = ws-available-stk
	endif
	do i50strupd-insert-reserve
		parameters lp-order-no lp-bo-suffix lp-line-seq lp-stock-code
			lp-whse-code lf-reserve-qty
	do i50strupd-perform-global-unlock
		parameters lp-order-no lp-bo-suffix lp-line-seq
			FALSE	//Not a time out.
			i50entry-stock-warehouse-locked
			lp-stock-code lp-whse-to lp-transfer-between-whse
			FALSE	//Retain stock reservation.
		returning i50entry-stock-warehouse-locked
endprocedure //lines-place-stock-reservation ---------------------------------

procedure check-if-sopl-record-exists
	set ws-sopl-record-exists = FALSE
	extract sales-order-picking-location
		on index so-order-no so-bo-suffix sol-line-seq
		key ws-saved-order-no ws-saved-bo-suffix ZERO
		next same so-order-no so-bo-suffix
		where sl-location-code <> IWCOMMON_LOST_LOCATION
	detail
		if pick-batch-no in {ZERO 999999}		// Pre-allocated
		and sol-pick-reference > SPACES
			// Pre-allocated
		elseif sopl-pick-job-no != SPACES
			set ws-sopl-record-exists = TRUE
			break
		endif
	endextract
endprocedure //check-if-sopl-record-exists -----------------------------------

procedure recalc-line-totals
	returning
		lr-ordered-cost					like sol-line-cost
		lr-shipped-cost					like sol-line-cost
		lr-sol-backorder-sales-tax-amt	like sol-shipped-sales-tax-amt
		lr-sol-backorder-discount-amt	like sol-shipped-discount-amt
		lr-sol-backorder-amount			like sol-shipped-amount
	//
	do i50entry-get-conversion-factor
	//
	push stock-master
	if sol-line-type = 'SS'
		set stk-price-per = sol-price-uom
	endif
	do clib406-calc-line-cost
		parameters
			sol-item-cost
			sol-ordered-qty
			sol-shipped-qty
			sol-line-type
			sol-stk-unit-conversion
			sol-stk-unit-desc
			stk-price-per
		returning
			sol-ordered-line-cost
			sol-line-cost
	pop stock-master
	//
	set lr-ordered-cost = sol-ordered-line-cost
	set lr-shipped-cost = sol-line-cost
	//
	//  Recalculate lines amounts
	do i50entry-calc-order-totals same
	do i50entry-calc-shipped-totals same
	//
	if sol-backorder-qty <> 0
		set i50entry-qty = sol-backorder-qty
		do i50entry-do-line-calc
		set lr-sol-backorder-amount = i50entry-line-amt
		set lr-sol-backorder-discount-amt = i50entry-disc-amt
		set lr-sol-backorder-sales-tax-amt = i50entry-stax-amt
	endif
	//
	do calc-the-gp-percent
		parameters
			lr-ordered-cost
			sol-line-amount
			sol-ordered-sales-tax-amt
			sol-tax-rate
		returning
			i50entry-gp
			i50entry-gp-string
endprocedure //recalc-line-totals --------------------------------------------

procedure lookup-stock-unit-conversion
	set i50lines-alt-unit-qty = ZERO
	get stock-unit-conversion
		on index stock-code suc-unit-desc
		key is stock-code sol-stk-unit-desc
	on error
		set i50lines-alt-unit-qty = ZERO
		set suc-unit-conversion = 1
	else
		if suc-unit-conversion = ZERO
			set suc-unit-conversion = 1
			set i50lines-alt-unit-qty = sol-extra-item-disc-amt
		endif
	endon
endprocedure //lookup-stock-unit-conversion ----------------------------------

procedure correct-alt-unit-qty
	local field
		lf-ok		type boolean
	//
	// First get the first Unit description
	set suc-unit-desc = substring(sol-stk-unit-desc,1,2)
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is "UM" suc-unit-desc
	on error
		set i50lines-1st-unit-desc = sol-stk-unit-desc
	else
		set i50lines-1st-unit-desc = sys-description
	endon
	// Now get the conversion factor
	set suc-unit-desc = substring(sol-stk-unit-desc,3,strlen(sol-stk-unit-desc))
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is "UM" suc-unit-desc
	on error
		set i50lines-2nd-unit-desc = suc-unit-desc
	else
		set i50lines-2nd-unit-desc = sys-description
	endon
	set str-ordered-qty = str(sol-ordered-qty)
	set i50lines-str-ordered-slash-pos = strlen(str-ordered-qty) + 1
	set lf-ok = FALSE
	extract stock-unit-conversion
		on index stock-code suc-unit-desc suc-trade-unit-no
		key is stock-code suc-unit-desc SPACES
		next same stock-code suc-unit-desc
	detail
		set lf-ok = TRUE
		break
	endextract
	if lf-ok = FALSE
		set suc-unit-desc = spaces
		set i50lines-using-alt-unit-desc = FALSE
	else
		if suc-unit-conversion = 0
			message "No unit conversion found"
			exit
		else
			do i50lines-ask-qty-in-alt-2 entry once
		endif
	endif
	confirm
	confirmed
		get sales-order lock
		get sales-order-line current lock
		if suc-unit-conversion = 0
			set suc-unit-conversion = 1
		endif
		set sol-extra-item-disc-amt = i50lines-alt-unit-qty
		set sol-stk-unit-conversion = (i50lines-alt-unit-qty / suc-unit-conversion)
		I50LINES_ROUNDING_ERROR(sol-stk-unit-conversion)
		do i50entry-calc-order-totals
		do i50entry-calc-shipped-totals
		if sol-line-type = 'SS'
			set stk-price-per = sol-price-uom
		endif
		do i50entry-get-conversion-factor
		do clib406-calc-line-cost
			parameters
				sol-item-cost
				sol-ordered-qty
				sol-shipped-qty
				sol-line-type
				sol-stk-unit-conversion
				sol-stk-unit-desc
				stk-price-per
			returning
				sol-ordered-line-cost
				sol-line-cost
		update sales-order-line
		do b300-calc-total-amounts-update-header
	endconfirm
endprocedure // correct-alt-unit-qty -----------------------------------------


screen public-update-header-fields export
////////////////////////////////////////////////////////////////////////////////
//clstart
//cldesc	This procedure allows the sale-order object to be updated while in
//			m50lines.
//			The default fields currently updated are:
//				so-actual-delivery-date
//				so-delivery-date
//				so-carrier-code
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		Sales order no
//clp2 		Sales order b/o suffix
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-so-order-no				like so-order-no				// clp1
		lp-so-bo-suffix				like so-bo-suffix				// clp2
//clend
///////////////////////////////////////////////////////////////////////////////
	local field
		lf-actual-delivery-title			pic x(20)
		lf-actual-delivery-help				pic x(50)
		lf-delivery-title					pic x(20)
		lf-delivery-help					pic x(50)
	//
	window @18,40 to @23,80
		title is "Sales Order Header Details"
		no-hide
before
	//
	box @18,41 to @22,79
		title "Delivery"
	//
	if sys-so-header-defaults = 'C'
		set lf-actual-delivery-title = "Actual Delivery :"
		set lf-actual-delivery-help = "Enter the actual date of delivery"
		set lf-delivery-title = "(Est)  Delivery :"
		set lf-delivery-help = "Enter the estimated delivery date for the order"
	else
		set lf-actual-delivery-title = "Earliest Delivery :"
		set lf-actual-delivery-help = "Enter the earliest delivery date for the order"
		set lf-delivery-title = "Latest Delivery :"
		if sys-so-header-defaults = '8'
			set lf-delivery-help = "Enter the latest delivery date for the order"
		else
			set lf-delivery-help = "Enter the estimated delivery date for the order"
		endif
	endif
	//
detail
	get sales-order lock
		on index so-order-no so-bo-suffix
		key is lp-so-order-no lp-so-bo-suffix
	on error
		message 'WARNING.. Sales Order cannot be locked' pause
	else
		display so-delivery-date @20,60
		display so-carrier-code @21,60
		//
		accept so-actual-delivery-date @19,60
			title lf-actual-delivery-title
			help lf-actual-delivery-help
			default so-actual-delivery-date
			when ws-order-type not in { 'T','C','J' }
			and sys-so-header-defaults in {'8', 'C'}
			no-warning
		validation
			if so-actual-delivery-date < so-order-date
			and sys-so-header-defaults = '8'
				message "Warning: Earliest delivery date can't be less than the order date"
			elseif sys-so-header-defaults = 'C'
			and so-actual-delivery-date <> ZERO
				if so-actual-delivery-date > today() + 5
					message "Warning: Actual delivery date is more than 5 days ahead of today."
				endif
			endif
		endvalidation
		//
		accept so-delivery-date @20,60
			help lf-delivery-help
			default so-delivery-date
			title lf-delivery-title
			when ws-order-type = 'F'
			or (ws-order-type not in { 'T','C','J' }
				and ((ws-mode-type = 'C' and sys-so-header-defaults != "D")
				or sys-so-header-defaults in {YES,'1','4','7' '8' '9' 'B' 'C' 'E' 'F'}))
				no-warning
		on up-arrow
			if so-delivery-date != zero
				set so-delivery-date -= 1
				if so-delivery-date < today()
					set so-delivery-date = today()
					message "Cannot move prior to today's date"
				endif
			endif
			reenter optional
		endon
		on down-arrow
			if so-delivery-date != ZERO
				set so-delivery-date += 1
			endif
			reenter optional
		endon
		validation
			if sys-so-header-defaults in {'4','C'}
				set so-order-date = so-delivery-date
			elseif sys-so-header-defaults = '8'
			and so-actual-delivery-date > so-delivery-date
				message "The latest delivery date can't be less than the earliest delivery date"
				reenter
			elseif sys-so-header-defaults = '9'
				if so-delivery-date = 0
					message "Delivery date is mandatory, reenter"
					reenter
				elseif so-delivery-date < today()
					message "Delivery date must be greater than today's date, reenter"
					reenter
				endif
			elseif so-delivery-date < so-order-date
			and sys-so-header-defaults <> 'C'
				message "Warning: Delivery date cannot be less than the order date"
			endif
			if ws-order-type = 'N'
			and so-order-type-code != I5SO_TYPE_LUMP_BILLED
			and so-delivery-date > today() + sys-so-days-future-forward
			and sys-so-days-future-forward != ZERO
				// Please Note we did this deliberately as it is not required at this time // shane
				// message 'WARNING. Date increase now classifies type as Forward order but no change possible' pause
			endif
		endvalidation
		//
		accept so-carrier-code @21,60
			default so-carrier-code
			help "Enter the required carrier code"
			title if-then-else(sys-so-prompts[1] <> SPACES,
					concat(sys-so-prompts[1],":"),"Carrier Code:")
			no-clear
			uppercase
			when so-order-source != I5SOURCE_SERVICE_REPAIR
			and sys-so-prompts[1] = SPACES
		on help-key
			do i85carrier-maint
			if carrier-code > SPACES
				set so-carrier-code = carrier-code
			endif
			reenter optional
		endon
		validation
			if so-carrier-code not = SPACES
				get system-carrier
					key is so-carrier-code
				on error
					get system-table
						key is 'CA' so-carrier-code
					on error
						message "Carrier not valid " so-carrier-code
						reenter optional
					endon
				endon
			endif
		endvalidation
	endon
	confirm
	confirmed
		update sales-order lock
		exit
	endconfirm
endscreen // public-update-header-fields -------------------------------------

screen get-customer-pin-number
	returning lr-pin-checked-ok		type boolean
	//
	title is "Account Access"
	window @8,2 to @12,40
	//
	allowed entry
before
	set lr-pin-checked-ok = FALSE
	display "Account    :" @8,3
	display "Name       :" @9,3
	display "Access     :" @10,3
	display accountcode @8,16 data
	get deb-master
		on index accountcode
		key is accountcode
	on error
	endon
	display shortname @9,16 data
detail
	accept ws-pin-number @10,16
		blank
		help 'Enter the customers access code, ie pin number'
		when dpn-pin-number != SPACES
	validation
		if ws-pin-number != dpn-pin-number
			set lr-pin-checked-ok = FALSE
		else
			set lr-pin-checked-ok = TRUE
		endif
		exit
	endvalidation
	confirm auto
	confirmed
	endconfirm
endscreen //get-customer-pin-number ---------------------------------------

procedure process-full-stock-enquiry
	get stock-master
		on index stock-code
		key is stock-code
	on error ENOREC
		spl 'stk/m4stkqenq'
			parameters
				SPACES
	else
		spl 'stk/m4stkqenq'
			parameters
				stock-code
	endon
endprocedure // process-full-stock-enquiry --------------------------------

procedure public-allow-entry-of-a-line export
//clstart
//cldesc	This procedure allow users to enter their own sales order
//			lines. By setting the return flag to TRUE when returning to the
//			standard entry program the sales-order totals will be recalculated
//			and the screen will be refreshed.
//			If you insert sales-order-lines using this procedure you must
//			make sure all relevant values have been setup correctly. Please
//			use the Sales Order and Inventory integrities to also check
//			your entries!
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales-order.*   all of sales-order record
//clp2 		The stock-code entered on the line
//clp3 		The next available sales order line sequence number
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Flag to indicate that the order totals need to be recalculated, the
//			next sequence needs to be recalculated and the screen needs to be
//			refreshed.  Values are
//			TRUE - Recalculate and refresh screen
//			FALSE - Just continue
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*					// clp1
		lp-stock-code				like stock-code						// clp2
		lp-sol-line-seq				like sol-line-seq					// clp3
	returning
		lr-ok-to-recalc-and-refresh	type boolean						// clr1
//clend
///////////////////////////////////////////////////////////////////////////////
	// just to stop compile warnings!
	set lp-stock-code = SPACES
	set lp-sol-line-seq = ZERO
	//
	set lr-ok-to-recalc-and-refresh = FALSE		// no need to recalc and refresh
endprocedure //public-allow-entry-of-a-line ----------------------------------

procedure public-z-allow-entry-of-a-line export
//clstart
//cldesc	This procedure allow users to enter their own sales order
//			lines, if the enter a 'Z' for the stock code.
//			By setting the return flag to TRUE when returning to the
//			standard entry program the sales-order totals will be recalculated
//			and the screen will be refreshed.
//			If you insert sales-order-lines using this procedure you must
//			make sure all relevant values have been setup correctly. Please
//			use the Sales Order and Inventory integrities to also check
//			your entries!
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales-order.*   all of sales-order record
//clp2 		The next available sales order line sequence number
//clp3		The order type.
//			A - Asset, B - Rebate Credit Note, C - Credit Note,
//			D - DOB Credit, E - Tax Only, F - Forward Order,
//			G - Adjustment, H - Hire Rental Contract, I - Project Issue
//			J - Project Issue, L - Layby, M - Direct Ship, N - Normal Order,
//			O - On Consignment, P - Phone Order, Q - Quotation, R - RMA,
//			S - Service Contract, T - Transfer, V - Lump Billed,
//			X - Contract, Y - Proforma, 1 - Consolidation.
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Flag to indicate that the order totals need to be recalculated, the
//			next sequence needs to be recalculated and the screen needs to be
//			refreshed.  Values are
//			TRUE - Recalculate and refresh screen
//			FALSE - Just continue
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*					// clp1
		lp-sol-line-seq				like sol-line-seq					// clp2
		lp-order-type				like ws-order-type					// clp3
	returning
		lr-ok-to-recalc-and-refresh	type boolean						// clr1
//clend
///////////////////////////////////////////////////////////////////////////////
	// just to stop compile warnings!
	set lp-sol-line-seq = ZERO
	//
	set lr-ok-to-recalc-and-refresh = FALSE		// no need to recalc and refresh
	//
	if ws-special-ordent-program != SPACES
		spl ws-special-ordent-program
			parameters are	str(lp-sales-order.so-order-no)
						lp-sales-order.so-bo-suffix
						lp-sales-order.so-cust-code
						lp-order-type
		on error
			spl 'so/m50z'
				parameters are	str(lp-sales-order.so-order-no)
						lp-sales-order.so-bo-suffix
						lp-sales-order.so-cust-code
						lp-order-type
			on error
				//must be a normal item code
			else
				set lr-ok-to-recalc-and-refresh = TRUE
			endon
		else
			set lr-ok-to-recalc-and-refresh = TRUE
		endon
	endif
	//
endprocedure //public-z-allow-entry-of-a-line --------------------------------

procedure public-process-line-after-it-has-been-entered export
//clstart
//cldesc	This procedure allow users to process the line that has just been
//			entered, removed or corrected. NOTE: the line exists!!
//			By setting the return flag to TRUE when returning to the
//			standard entry program the sales-order totals will be recalculated,
//			the totals will be redisplayed and the next sequence number will
//			be incremented if in entry mode or it will be left the same if
//			in correct mode.
//			If you insert/change sales-order-lines using this procedure you must
//			make sure all relevant values have been setup correctly. Please
//			use the Sales Order and Inventory integrities to also check
//			your changes!
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales-order.*   all of sales-order record
//clp2 		sales-order-line.* allof the sale-order-line record
//clp3		Mode Types values
//			E  - means we are in entry mode
//			C  - means we are in correct mode
//			R  - means we are in remove mode
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Flag to indicate that the order totals need to be recalculated, the
//			next sequence needs to be recalculated and the screen needs to be
//			refreshed.  Values are
//			TRUE - Recalculate and refresh screen
//			FALSE - Just continue
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*					// clp1
		lp-sales-order-line.*		like sales-order-line.*				// clp2
		lp-mode-type				pic x								// clp3
	returning
		lr-ok-to-recalc-and-refresh	type boolean						// clr1
//clend
///////////////////////////////////////////////////////////////////////////////
	//
	//
	set lr-ok-to-recalc-and-refresh = FALSE	// no need to recalc and refresh
	//
	if ws-overide-lines-program != SPACES
		set so-order-no = lp-sales-order.so-order-no
		set so-bo-suffix = lp-sales-order.so-bo-suffix
		set sol-line-seq = lp-sales-order-line.sol-line-seq
		spl ws-overide-lines-program
			parameters are so-order-no so-bo-suffix sol-line-seq
						lp-mode-type
			returning lr-ok-to-recalc-and-refresh
			leave-files-open
		on error
			spl concat("so/",ws-overide-lines-program)
				parameters are so-order-no so-bo-suffix sol-line-seq
						lp-mode-type
				returning lr-ok-to-recalc-and-refresh
			on error
				message 'Unable to find quote override line program - '
					ws-overide-lines-program
			endon
		endon
	endif
	//
endprocedure //public-process-line-after-it-has-been-entered -----------------

procedure public-allow-pre-line-entry export
//clstart
//cldesc	This procedure allow users to do pre line checking. It is only
//			available in entry and detail-entry.
//			It returns a ok flag to indicate if it is ok to continue with
//			the entry mode.
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales-order.*   all of sales-order record
//clp2 		The sales order line sequence number
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Flag to indicate that the entry or detail-entry is ok to continue!
//			TRUE -  just continue through entry / detail-entry mode
//			FALSE - Break out of entry mode!
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*					// clp1
		lp-sol-line-seq				like sol-line-seq					// clp1
	returning
		lr-ok-to-continue			type boolean						// clr1
//clend
///////////////////////////////////////////////////////////////////////////////
	//
	set lr-ok-to-continue = TRUE	// continue with entry / detail-entry
	//
	if ws-sol-before-entry-program <> SPACES
		spl ws-sol-before-entry-program
			parameter
				lp-sales-order.so-order-no
				lp-sales-order.so-bo-suffix
				lp-sol-line-seq
			returning lr-ok-to-continue
		on error
		endon
	endif
endprocedure //public-allow-pre-line-entry -----------------------------------

procedure public-allow-pre-confirm-of-line-entry export
//clstart
//cldesc	This procedure allow users to do extra checks just before the
//			confirm is done. It can be in either entry or correct modes
//			IMPORTANT: NO update/insert in the hook program should be allowed.
//		             It should only be used for extra checks only.
//			It returns a ok flag to indicate if the entry or correct of the
//			line will be abandon.
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales-order.*   all of sales-order record
//clp2 		sales-order-line.* all of the sales-order-line record
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Flag to indicate that the entry or detail-entry is ok to continue!
//			TRUE -  just continue through correct, entry, detail-entry mode
//			FALSE - Break out of entry, detail-entry, correct and reenter the
//					stock-code.
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*					// clp1
		lp-sales-order-line.*		like sales-order-line.*				// clp2
	returning
		lr-ok-to-continue			type boolean						// clr1
//clend
///////////////////////////////////////////////////////////////////////////////
	//
	set lr-ok-to-continue = TRUE	// continue with correct,entry, detail-entry
	//
	if ws-sol-before-confirm-program <> SPACES
		push sales-order-line
		spl ws-sol-before-confirm-program
			leave-files-open
			parameter
				lp-sales-order.so-order-no
				lp-sales-order.so-bo-suffix
				lp-sales-order-line.sol-line-seq
				lp-sales-order-line.sol-line-amount
				lp-sales-order-line.sol-shipped-amount
			returning lr-ok-to-continue
		if lr-ok-to-continue
			// ok to continue so just restore values!
			pop sales-order-line
		else
			//	Dont insert or update the changes,
			//	restore the original values from the file and regain
			//	s/order lock/currency then force the user to reenter
			get sales-order-line lock
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix sol-line-seq
			on error
				// we may be in entry mode, so the record will not exist yet!
			endon
		endif
	endif
endprocedure //public-allow-pre-confirm-of-line-entry ------------------------

procedure public-allow-entry-of-customer-details export
//clstart
//cldesc	This procedure allow users to create a new customer account,
//			if one does not exist, via their own screen.
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales-order.*   all of sales-order record
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Flag to indicate that a customise customer entry program has been
//			executed
//			TRUE -  A customised customer entry program has been run!
//			FALSE - Can just run the inline customer entry program!
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*					// clp1
	returning
		lr-cust-prog-executed		type boolean						// clr1
//clend
///////////////////////////////////////////////////////////////////////////////
	//
	set lr-cust-prog-executed = FALSE
	//
	if sys-create-deb-at-order-entry in {'H' 'Y'}
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'PR' 'SO_DEB_ENT'
		on error
			set sys-description = SPACES
		else
			if sys-description != SPACES
				spl sys-description
					parameters are '-entry' lp-sales-order.so-cust-code
				on error
					message "Can't find customised account entry " sys-description
					set sys-description = SPACES
				else
					set lr-cust-prog-executed = TRUE
				endon
			endif
		endon
	endif
endprocedure //public-allow-entry-of-customer-details ------------------------

procedure public-allow-manuf-packing-maintenance export
//clstart
//cldesc	This procedure allow users to do their own manufacturing / packing
//			maintenance
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales-order.*   all of sales-order record
//clp2 		The sales order line sequence number
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*					// clp1
		lp-sol-line-seq				like sol-line-seq					// clp1
//clend
///////////////////////////////////////////////////////////////////////////////
	//
	if ws-manuf-packing-program != SPACES
		spl ws-manuf-packing-program
			parameter
				lp-sales-order.so-order-no
				lp-sales-order.so-bo-suffix
				fstr(lp-sol-line-seq,5,2)
		on error
 			message "Can't find override program 'SO_LNPACK' " ws-manuf-packing-program
		endon
	endif
endprocedure //public-allow-manuf-packing-maintenance ------------------------

procedure public-allow-recalc-item-price export
//clstart
//cldesc	This procedure allows users to set the flag to recalculate the
//			item price for quantity breaks and special pricing
//
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		sales-order.*   all of sales-order record
//clp2		lp-recalc-item-price	type boolean
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Flag to indicate that item price is to be recalculated
//			TRUE  - recalculate item price
//			FALSE - do not recalculate item price
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*					// clp1
		lp-recalc-item-price		pic x
	returning
		lr-recalc-item-price		pic x								// clr1
//clend
///////////////////////////////////////////////////////////////////////////////

		set lr-recalc-item-price = lp-recalc-item-price

endprocedure // public-allow-recalc-item-price --------------------------------

procedure commit-auto-transaction
	// do an unlock all to flush any records locked within
	// an auto transaction.
	// unlock all - the equivalent of transaction commit
	// get sales-order lock - the equivalent of transaction begin
	//
	unlock all
	//
	get sales-order lock
		on index so-order-no so-bo-suffix
		key is so-order-no so-bo-suffix
endprocedure //commit-auto-transaction ---------------------------------------

procedure public-get-sales-order-supplier export
//
//clstart
//cldesc	This procedure gets the supplier details
//			using the supplier code or the sales-order-line.
//			This will be useful when the supplier code and name needs to
//			be displayed based on the linked purchase order in the sales order.
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		Supplier code
//clp2 		Supplier name
//clp3		Sales Order Object ( i.e. sales-order.*)
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1 		Supplier code
//clr2      Supplier name
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-supplier-code			like cre-accountcode				// clr1
		lp-cr-shortname				like cr-shortname					//
		lp-sales-order-line.*		like sales-order-line.*
	returning
		lr-supplier-code			like cre-accountcode				// clr1
		lr-cr-shortname				like cr-shortname					// c
//clend
///////////////////////////////////////////////////////////////////////////////
//
	set lr-supplier-code = lp-supplier-code
	set lr-cr-shortname = lp-cr-shortname
endprocedure // public-get-sales-order-supplier -------------------------------

procedure public-set-note-line-lookup-tables export
//
//clstart
//cldesc	This procedure sets the table type that will be used by the
//			various memo and note line values that are available
////////////////////////////////////////////////////////////////////////////////
//clp		Parameters Passed
//clp1		Required Table type for Note Lines (stock-code - N)
//clp2		Required Table type for Memo Lines (stock-code - M)
//clp3		Required Table type for Text Code Lines (stock-code - D/X)
//clp4		Required Table type for Term Code Lines (stock-code - W/T)
//clpend
//
////////////////////////////////////////////////////////////////////////////////
//clr		Return Parameters
//clr1		Required Table type for Note Lines (stock-code - N)
//clr2		Required Table type for Memo Lines (stock-code - M)
//clr3		Required Table type for Text Code Lines (stock-code - D/X)
//clr4		Required Table type for Term Code Lines (stock-code - W/T)
//clrend
//
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-note-N				like sys-tbl-type
		lp-memo-M				like sys-tbl-type
		lp-select-note-text-D	like sys-tbl-type
		lp-select-note-term-W	like sys-tbl-type
	returning
		lr-note-N				like sys-tbl-type
		lr-memo-M				like sys-tbl-type
		lr-select-note-text-D	like sys-tbl-type
		lr-select-note-term-W	like sys-tbl-type
//clend
///////////////////////////////////////////////////////////////////////////////
//
	set lr-note-N = lp-note-N
	set lr-memo-M = lp-memo-M
	set lr-select-note-text-D = lp-select-note-text-D
	set lr-select-note-term-W = lp-select-note-term-W
//
endprocedure // public-set-note-line-lookup-tables ----------------------------

procedure public-process-proforma-lines export
//////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//<DESC>
//	This procedure allows customisation of processing of proforma lines
//
// Example
//
//<pre>
//procedure public-process-proforma-lines export
//parameter
//		lp-so.*							like sales-order.*
//		lp-sol.*						like sales-order-line.*
//		lp-next-line-seq				like sol-line-seq
//		lp-shipped-incl-charges			like so-order-total-shipped-amount
//		lp-ordered-incl-charges			like so-order-total-shipped-amount
//returning
//		lr-process-standard-proforma	type boolean
//		lr-line-to-position-on			like sol-line-seq
//	//
//	if lp-so.so-cust-code = "BHP"
//		//BHP have a special proforma process
//		do custom-bhp-proforma
//			parameter
//				lp-so.*
//				lp-next-line-seq
//			returning
//				lr-line-to-position-on
//		set lr-process-standard-proforma = FALSE
//	else
//		set lr-process-standard-proforma = TRUE
//	endif
//endprocedure//public-process-proforma-lines------------------------------------
// </pre>
//
////////////////////////////////////////////////////////////////////////////////
//<P1>	This entire current sales-order.* record
//<P2>	The entire current sales-order-line.* record (if any)
//<P3>	The next available SOL sequence number
//<P4>	Current total shipped amount incl charges
//<P5>  Current total ordered amount incl charges
//
//<R1>	Process standard proforma logic	- default TRUE
//<R2>  SOL to position on upon return (if <R1> is FALSE) - default ZERO
////////////////////////////////////////////////////////////////////////////////
parameter
		lp-so.*							like sales-order.*
		lp-sol.*						like sales-order-line.*
		lp-next-line-seq				like sol-line-seq
		lp-shipped-incl-charges			like so-order-total-shipped-amount
		lp-ordered-incl-charges			like so-order-total-shipped-amount
returning
		lr-process-standard-proforma	type boolean
		lr-line-to-position-on			like sol-line-seq
	//
	set lr-process-standard-proforma = TRUE
endprocedure//public-process-proforma-lines------------------------------------

procedure public-override-price-rule-desc export
////////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//<DESC>
// This procedure allows customisation of price rule desc
//
// <P1> The current sales order line
// <P2> The current Price Rule Desc
//
// <R1> New Price Rule Desc
///////////////////////////////////////////////////////////////////////////////
	parameters
		lp-sales-order-line.*		like sales-order-line.*
		lp-price-rule-desc			pic x(30)
	returning
		lr-price-rule-desc			pic x(30)
	//
	set lr-price-rule-desc = lp-price-rule-desc
endprocedure //public-override-price-rule-desc -------------------------------

procedure public-allow-pre-line-remove export
////////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//<DESC>
// This procedure allow users to do pre line checking before line removal.
// It returns a ok flag to indicate if it is ok to continue with the
// remove mode.
//
//<P1>		sales-order.*   all of sales-order record
//<P2> 		The sales order line sequence number
//
//<R1> 		Flag to indicate that the 'remove' is ok to continue!
//			TRUE -  just continue through remove mode
//			FALSE - Break out of remove mode!
////////////////////////////////////////////////////////////////////////////////
	parameter
		lp-sales-order.*			like sales-order.*
		lp-sol-line-seq				like sol-line-seq
	returning
		lr-ok-to-continue			type boolean
	//
	set lr-ok-to-continue = TRUE	// continue with remove
	//
endprocedure //public-allow-pre-line-remove ----------------------------------

procedure public-determine-if-public-mode-active export
//<CLIB_DOC>
//<DESC>
// Public procedure to allow control over whether a public/user-defined mode is
// exposed on the PO Lines screens
//
// Example:
//
//<pre>
//procedure public-determine-if-public-mode-active export
//parameter
//		lp-so.*								like sales-order.*
//		lp-param1							pic x(20) type string
//		lp-param7							pic x(20) type string
//returning
//		lr-public-mode-active				type boolean
//		lr-public-mode-prompt				pic x(20) type string
//		lr-public-mode-help					pic x(128) type string
//	//
//	if lp-so.so-cust-code = 'BHP'
//		set lr-public-mode-active			= TRUE
//		set lr-public-mode-prompt			= 'BHP Load'
//		set lr-public-mode-help				= 'Load BHP SO Lines'
//	else
//		//Empty - all returning fields SPACES, FALSE or ZERO
//	endif
//endprocedure//public-determine-if-public-mode-active---------------------------
//</pre>
//
//<P1> The current entire SO record
//<P2> Calling parameter 1
//
//<R1> Public mode active - default FALSE
//<R2> Public mode prompt - default SPACES
//<R2> Public mode help - default SPACES
//////////////////////////////////////////////////////////////////////////////////
parameter
		lp-so.*								like sales-order.*
		lp-param1							pic x(20) type string
returning
		lr-public-mode-active				type boolean
		lr-public-mode-prompt				pic x(20) type string
		lr-public-mode-help					pic x(128) type string
	//
	//Empty - all returning fields SPACES, FALSE or ZERO
endprocedure//public-determine-if-public-mode-active---------------------------

procedure process-public-screenmode
returning
		lr-public-mode-refresh-flag					pic x
	//
	push sales-order-line
	do public-mode-procedure
		parameter
			sales-order-line.*
			sales-order.*
		returning
			lr-public-mode-refresh-flag
	pop sales-order-line
endprocedure//process-public-screenmode----------------------------------------

procedure public-mode-procedure export
//<CLIB_DOC>
//<DESC>
// Public procedure to allow control what occurs when the public mode is processed
// on the SO lines screen
//
// Example:
//
//<pre>
//procedure public-mode-procedure export
//parameter
//		lp-sol.*					like sales-order-line
//		lp-so.*						like sales-order
//returning
//		lr-public-mode-refresh-flag	pic x
//	//
//	do custom-process-so-lines-load
//		parameter
//			lp-sol.*
//		set lr-public-mode-refresh-flag = "R"		//Refresh Review
//	else
//		//Empty - all returning fields SPACES, FALSE or ZERO
//	endif
//endprocedure//public-mode-procedure---------------------------------------------
//</pre>
//
//<P1> The current entire sales-order-line.* record
//<P2> The current entire sales-order.* record
//
//<R1> Refresh Flag - i.e. what happens upon return to the screen detail - default SPACES
//  case "R"
//		refresh review
//	case "S"
//		refresh
//	case "D"
//		refresh data
//	case "P"
//		refresh prompts
/////////////////////////////////////////////////////////////////////////////////
parameter
		lp-sol.*						like sales-order-line.*
		lp-so.*							like sales-order.*
returning
		lr-public-mode-refresh-flag	pic x
	//
	//Empty - all returning fields SPACES, FALSE or ZERO
endprocedure//public-mode-procedure---------------------------------------------

procedure update-zshortship-order-line
	parameters
		lp-sol.*	like sales-order-line.*
	//
	local field
		lf-ordered-cost					like sol-line-cost
		lf-shipped-cost					like sol-line-cost
		lf-sol-backorder-sales-tax-amt	like sol-shipped-sales-tax-amt
		lf-sol-backorder-discount-amt	like sol-shipped-discount-amt
		lf-sol-backorder-amount			like sol-shipped-amount
		lf-sol-shipped-diff				like sol-shipped-qty
	//
	push sales-order-line
	get sales-order-line lock
		on index so-order-no so-bo-suffix sol-line-seq
		key is lp-sol.so-order-no lp-sol.so-bo-suffix (lp-sol.sol-line-seq - 0.01)
	on error ENOREC ELOCKED
	else
		//Set the new order line quantities. This is really based on the
		//updated quantity shipped because the ZSHORTSHIP line is a
		//placeholder for a quantity already invoiced. If the quantity is
		//greater than the original shortship then the customer should
		//be charged for this.
		// 1. sol-ordered-qty should not need to be changed.  This is
		//    treated as fixed.
		// 2. sol-shipped-qty will update to a maximum of the original
		//    ordered quantity.
		// 3. sol-backorder-qty will update according to what has happened
		//    to the shipped quantity
		set lf-sol-shipped-diff = (lp-sol.sol-shipped-qty * -1) - sol-shipped-qty
		set sol-shipped-qty = if-then-else(lf-sol-shipped-diff <= sol-backorder-qty,
			sol-ordered-qty,sol-shipped-qty + lf-sol-shipped-diff)
		set sol-backorder-qty = sol-ordered-qty - sol-shipped-qty
		//
		get stock-master
			on index stock-code
			key is stock-code
		on error ENOREC
			set stk-price-per = 1
		endon
		//Do not call the standard RECALC_LINE_TOTALS macro as
		//we do not need to refresh the data.
		do recalc-line-totals
			returning
				lf-ordered-cost
				lf-shipped-cost
				lf-sol-backorder-sales-tax-amt
				lf-sol-backorder-discount-amt
				lf-sol-backorder-amount
		//Update the ZSHORTSHIP order line
		update sales-order-line
	endon
	//Get currency back on the actual order line that was corrected.
	get sales-order-line
		on index so-order-no so-bo-suffix sol-line-seq
		key is lp-sol.so-order-no lp-sol.so-bo-suffix lp-sol.sol-line-seq
	on error ENOREC
	endon
	pop sales-order-line
	//
	get stock-master
		on index stock-code
		key is stock-code
	on error ENOREC
	endon
	//
endprocedure//update-zshortship-order-line -------------------------------------

procedure check-special-codes-so
	parameters
		lp-param		 pic x(40)
	returning
		lr-conv-param pic x(40)
	//
	if lp-param = '[so-order-no]'
		set lr-conv-param = str(so-order-no)
	elseif lp-param = '[so-bo-suffix]'
		set lr-conv-param = so-bo-suffix
	elseif lp-param = '[sol-line-seq]'
		set lr-conv-param = str(sol-line-seq)
	elseif lp-param = '[stock-code]'
		set lr-conv-param = stock-code
	elseif lp-param = '[so-cust-code]'
		set lr-conv-param = so-cust-code
	elseif lp-param = '[bill-to]'
		set lr-conv-param = bill-to
	elseif lp-param in {'[cd-store-id]' '[so-whse-code]'}
		set lr-conv-param = so-whse-code
	elseif lp-param = '[so-rep-code]'
		set lr-conv-param = so-rep-code
	elseif lp-param = '[accountcode]'
		set lr-conv-param = accountcode
	elseif lp-param = '[rep-code]'
		set lr-conv-param = rep-code
	elseif lp-param = '[so-cust-reference]'
		//Regardless of sale in progress as change of customer
		//will ask for cust reference
		set lr-conv-param = so-cust-reference
	else
		set lr-conv-param = lp-param
	endif
endprocedure //check-special-codes-so ----------------------------------------------------------

procedure public-show-discount-rounding export
/////////////////////////////////////////////////
//CLIB_DOC
//DESC
// This exportable procedure will allow the display and processing of
// discount rounding sales order lines. (ZROUNDDISC)
// The default behaviour is to exclude these lines.
/////////////////////////////////////////////////
//<R1> - Allow the display and processing of discount rounding lines.
/////////////////////////////////////////////////
	returning
		lr-show-discount-rounding	type boolean
	//
	set lr-show-discount-rounding = FALSE
endprocedure //public-show-rounding-discount ----------------------------------

procedure public-accept-stock-check export
////////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//This public procedure allows capture of the stock-code being entered and to either
//manipulate this and/or force a reenter of the field.
//It can also be used to capture some of the single character fields such as 'Q' to perform
//checks on the order prior to quiting the order.
//
//<P1> Entire current sales-order.* record
//<P2> Item code (or hotkey character) entered
//
//<R1> Item code (or hotkey character) to be returned to core procedure - default <P2>
//<R2> Reenter flag - default is FALSE
////////////////////////////////////////////////////////////////////////////////
parameter
		lp-so.*									like sales-order.*
		lp-stock-code							like stock-code
returning
		lr-stock-code							like stock-code
		lr-reenter-flag							type boolean
	//
	set lr-stock-code = lp-stock-code
endprocedure// public-accept-stock-check -------------------------------------

screen get-asset-info
	returning
		lr-location-code					like am-location-code
		lr-asset-group						like am-group
		lr-depreciation-code				like adrd-depreciation-code
	//
	local
		lf-location-desc					like sys-description
		lf-group-desc						like sys-description
	//
	window @5,1 to @12,80
		title "Enter Asset related information"
before
detail
	accept lr-location-code @7,20
		title "Location Code:"
		default lr-location-code
		help "Enter Location Code"
		show-value
	on help-key
		do i3assloc-asset-location-maint
		if sys-tbl-code > SPACES
			set lr-location-code = sys-tbl-code
		endif
		reenter optional
	end
	validation
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'AL' lr-location-code
		on error ENOREC
			message-box param-text('Asset location <<P1>> unknown [HELP]',lr-location-code)
			reenter
		else
			if lr-location-code = WILDCARD
				message-box "Not permitted to enter wildcard pattern here"
				reenter
			endif
		endon
	endvalidation
	do clibassetctrl-get-table-desc
		parameters
			'AL'
			lr-location-code
			translate 'Asset Location'
		returning
			lf-location-desc
	display lf-location-desc @7,27 prompt
	//
	accept lr-asset-group @8,20
		title "Group Category:"
		default lr-asset-group
		help "Enter the group this asset belongs to"
		show-value
	on help-key
		do i3assgrp-asset-group-maint
		if sys-tbl-code > SPACES
			set lr-asset-group = sys-tbl-code
		endif
		reenter optional
	end
	validation
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'AG' lr-asset-group
		on error ENOREC
			message-box param-text('Asset group <<P1>> unknown [HELP]',lr-asset-group)
			reenter
		else
			if lr-asset-group = WILDCARD
				message-box "Not permitted to enter wildcard pattern here."
				reenter
			endif
		endon
	endvalidation
	do clibassetctrl-get-table-desc
		parameters
			'AG'
			lr-asset-group
			translate 'Asset Group'
		returning
			lf-group-desc
	display lf-group-desc @8,27 prompt
	//
	accept lr-depreciation-code @9,20
		title "Depreciation Code:"
		help "Enter the depreciaton code"
		default lr-depreciation-code
		show-value
	on help-key
		do clibassetscreens-help-on-depreciation-code
			parameter
				'0'
			returning
				lr-depreciation-code
		reenter optional
	endon
	validation
		if lr-depreciation-code = SPACeS
			message-box "Depreciation code cannot be blank"
			reenter
		endif
		get asset-depn-regime-default
			on index adrd-depreciation-code adrd-regime
			key is lr-depreciation-code '0'
		on error ENOREC
			message-box param-text("Defaults <<P1>> have not been setup for regime 0", lr-depreciation-code)
			reenter
		endon
	end-validation
	display adrd-depreciation-desc @9,27 prompt
	confirm
		default is YES
	confirmed
	endconfirm
after
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'AL' lr-location-code
	on error ENOREC
		message-box param-text('Asset location <<P1>> unknown [HELP]',lr-location-code)
		back-to-detail
	else
		if lr-location-code = WILDCARD
			message-box "Not permitted to enter wildcard pattern here"
			back-to-detail
		endif
	endon
	//
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'AG' lr-asset-group
	on error ENOREC
		message-box param-text('Asset group <<P1>> unknown [HELP]',lr-asset-group)
		back-to-detail
	else
		if lr-asset-group = WILDCARD
			message-box "Not permitted to enter wildcard pattern here."
			back-to-detail
		endif
	endon
	//
	if lr-depreciation-code = SPACES
		message-box "Depreciation code cannot be blank"
		back-to-detail
	else
		get asset-depn-regime-default
			on index adrd-depreciation-code adrd-regime
			key is lr-depreciation-code '0'
		on error ENOREC
			message-box param-text("Defaults <<P1>> have not been setup for regime 0", lr-depreciation-code)
			back-to-detail
		endon
	endif
endscreen //get-asset-info ---------------------------------------------------

procedure public-tally-item export
////////////////////////////////////////////////
//CLIB_DOC
//DESC
// This exportable procedure will allow changing the sales order line ordered
// quantity and can be used for linear measured (tally) items. This exportable
// can be removed in a future version when i5pieces becomes a component.
//////////////////////////////////////////////////////////////////////////////
//<P1>	This entire current stock-master.* record
//<P2>	The entire current sales-order-line.* record (if any)
//<P3>	The next available SOL sequence number
//<P3>  Mode Types values
//			E  - means we are in entry mode
//			C  - means we are in correct mode
//			R  - means we are in remove mode
//
//<R1>	Flag to indicate that ordered quantity is to be recalculated
//			TRUE  - recalculate item quantity
//			FALSE - do not recalculate item quantity
//<R2>  Sales order line quantity
/////////////////////////////////////////////////////////////////////////////
parameter
		lp-stock-master.*		like stock-master.*
		lp-sales-order-line.*	like sales-order-line.*
		lp-mode-type			pic x
	returning
		lr-field-ok				type boolean
		lr-tally-qty			like sol-ordered-qty
	//
	set lr-field-ok = FALSE
	set lr-tally-qty = lp-sales-order-line.sol-ordered-qty
	//
endprocedure //public-tally-item ----------------------------------------------

procedure update-contract-order-qty
	//
	//If line has been deallocated then
	//reverse contract remaining limit.
	if sol-short-ship-reason-code = '0'
		set ws-update-contract-qty = (sol-shipped-qty * sol-stk-unit-conversion)
			- (i50entry-sol-ordered-qty * i50entry-stk-conv-factor)
	else
		set ws-update-contract-qty =
			(sol-ordered-qty * sol-stk-unit-conversion)
			+ (i50entry-sol-ordered-qty * i50entry-stk-conv-factor)
	endif
	if stk-conversion-factor = 0
		set stk-conversion-factor = 1
	endif
	get sales-order lock
		on index so-order-no so-bo-suffix
		key is ws-proforma-order-no ws-proforma-bo-suffix
	set so-order-total-shipped-amount += (sol-line-amount
		- i50entry-sol-line-amount)
	set so-order-total-shipped-cost += (ws-update-contract-qty
		/ stk-conversion-factor)
	set ws-limit-contract-amount = so-order-total-amount
		- so-order-total-shipped-amount
	set ws-limit-contract-qty = so-order-total-charges
		- so-order-total-shipped-cost
	if not i50lines-contracts-used
		update sales-order
	endif
	//Display warning message at this point as well in
	//order to keep consistency.
	if so-order-total-amount != 0	//contract limit
		if ws-limit-contract-amount < 0
			message 'WARNING: Contract amount limit exceeded'
		elseif ws-limit-contract-amount = 0
			message 'WARNING: Contract amount limit reached'
		endif
	endif
	//Release the fields from saved values.
	if sol-short-ship-reason-code = '0'
		set i50entry-sol-ordered-qty = ZERO
		set i50entry-sol-line-amount = ZERO
		set i50entry-sol-shipped-qty = ZERO
	endif
	//
endprocedure //update-contract-order-qty -------------------------------------

procedure check-if-kit-price-override-record-exists
	returning
		lr-kit-price-override-falg		type boolean
	//
	if sol-line-type != 'KN'
		//We are current on one of the components of the kit, not the header.
		//We need to find out the kit header line sequence and get the currency on the KIT header SOL
		//This record will be used when calling tlibpromo.
		get sales-order-line-promo
			on index solpr-order-no solpr-order-suffix solpr-sol-line-seq
			key is so-order-no so-bo-suffix sol-line-seq
		on error ENOREC
		else
			get sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key so-order-no so-bo-suffix solpr-kit-header-line-seq
			on error ENOREC
			endon
		endon
	endif
	get sales-order-line-extra-detail
		on index so-order-no so-bo-suffix sol-line-seq soled-type
		key so-order-no so-bo-suffix sol-line-seq 'O'
	on error ENOREC
	else
		set lr-kit-price-override-falg = TRUE
	endon
endprocedure //check-if-kit-price-override-record-exists ----------------------------------------------------------

procedure check-alt-scs-items
	//
	// Checks for suggested alternative items for an already entered sales
	// order line for an Style/Colour/Size item. Requires the sales order line
	// sequence number as a parameter since multiple lines can be inserted by
	// the 'Order Entry By Size And Colour' screen in so/m50lengths.spl
	//
	// In general, this can be used to add suggested alternative items
	// for new sales order lines as well.
	//
	// Replicates relevant bits of code from i50lines.spl, procedure
	// i50lines-check-review-order-qty, then undoes changes to warehouse
	// quantities since those will have already been affected at this point.
	parameters
		lp-sol-line-seq						like sol-line-seq
		lp-stock-code						like stock-code
	returning
		lr-lines-alt-kit					like stock-code
	local
		lf-using-alt-unit-desc				type boolean
		lf-type								pic x
		lf-new-line							pic x(10)
		lf-line-replaced 					pic x
		lf-found-companion-alt-items		type boolean
		lf-qty								like whse-qty-on-hand
		lf-conversion-factor				like sol-stk-unit-conversion
		lf-prompt							type boolean
	//
	if sys-so-initial-line-mode = "A"
		set lf-using-alt-unit-desc = TRUE
	endif
	extract stock-conversion-procedure
		on index scp-stock-code scp-accountcode scp-sequence-no
		key is lp-stock-code SPACES ZERO
		next same scp-stock-code scp-accountcode
		when scp-conversion-rule in { "^^" "@@" "!!" }
		and scp-stock-group = SPACES
	detail
		set lf-found-companion-alt-items = TRUE
		break
	endextract
	if lf-found-companion-alt-items
		//
		// Get the conversion factor for the current sales order line before we
		// get a chance to replace with an alt item
		do i50entry-get-conversion-factor
		set lf-conversion-factor = i50entry-stk-conv-factor
		//
		if stk-stock-status <> 'K' and ws-available-stk > zero
			set lf-type = 'B'
		endif
		//
		do public-i50lines-control-suggested-alternates
			parameter
				sales-order.*
				stock-code
			returning
				lf-prompt
		if lf-prompt = FALSE
			exit
		endif
		//
		if lf-using-alt-unit-desc and stk-unit-desc != stk-alt-unit-desc
			spl 'so/m50promo'
				parameters are
					str(so-order-no)
					so-bo-suffix
					str(lp-sol-line-seq)
					lf-type
					SPACES
					'-alt'
				returning
					lf-new-line
					lf-line-replaced
					lr-lines-alt-kit
			on error
				set lf-line-replaced = NO
			endon
		else
			spl 'so/m50promo'
				parameters are
					str(so-order-no)
					so-bo-suffix
					str(lp-sol-line-seq)
					lf-type
				returning
					lf-new-line
					lf-line-replaced
					lr-lines-alt-kit
			on error
				set lf-line-replaced = NO
			endon
		endif
		//
		// If line was replaced, undo any changes to current/back order
		// quantities in warehouse, for the original line
		if lf-line-replaced = YES
			do i4stkrnd-round-stock-quantity
				parameters
					stk-unit-desc
					sol-shipped-qty
					lf-conversion-factor
				returning
					lf-qty
			do i4strupd-stream-update
				parameters
					lp-stock-code
					so-whse-code
					str(so-order-no)
					so-bo-suffix
					lp-sol-line-seq
					I4STRDEF_WHSE_CURRENT_ORDERS
					(0 - lf-qty)
			//
			do i4stkrnd-round-stock-quantity
				parameters
					stk-unit-desc
					sol-backorder-qty
					lf-conversion-factor
				returning
					lf-qty
			do i4strupd-stream-update
				parameters
					lp-stock-code
					so-whse-code
					str(so-order-no)
					so-bo-suffix
					lp-sol-line-seq
					I4STRDEF_WHSE_BACK_ORDERS
					(0 - lf-qty)
		endif
		//
		if lr-lines-alt-kit = SPACES
			get sales-order-line
				on index so-order-no so-bo-suffix sol-line-seq
				key is so-order-no so-bo-suffix lp-sol-line-seq
			do b300-calc-total-amounts-update-header
			do display-totals
		endif
	endif
endprocedure //check-alt-scs-items --------------------------------------------

procedure public-determine-year-for-catalogue export
///////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//This procedure allows program override of the default year in the
//screen "accept-catalog-no".
//
//The returned year will refresh the ws-year accept field and act at the default.
//
//<P1>	Catalogue No
//<P2>	Year as defined by core procedure - default is current calendar year
//
//<R1>	Year as defined by this procedure - default is <P2>

///////////////////////////////////////////////////////////////////////////////
parameter
		lp-catalog-no 				like deb-catalog-no
		lp-year						like sys-gl-yr
returning
		lr-year						like sys-gl-yr
	//
	set lr-year = lp-year
endprocedure// public-determine-year-for-catalogue ---------------------------

procedure check-and-warn-min-gp
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is "WL" sol-whse-code
	on error ENOREC
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is "WL" so-whse-code
		on error ENOREC
			set ws-minimum-gp = sys-so-mov
		else
			set ws-minimum-gp = sys-money-value
		endon
	else
		set ws-minimum-gp = sys-money-value
	endon
	//
	if sol-line-type = 'SS'
	and screenmode() = entry
	and i50entry-sales-credit = NO
	and i50entry-return-authorisation = NO
	and sol-item-group != SPACES
		set stock-group = sol-item-group
		set ws-mode-type = 'E'
	endif
	get system-table
		on index sys-tbl-type sys-tbl-code
		key is 'PG' stock-group
	on error ENOREC
		set sys-tbl-sales-mtd = 0
	endon
	//
	if ws-mode-type in { 'C', 'D', 'E'}
	and sys-tbl-sales-mtd != 0 and i50entry-gp < sys-tbl-sales-mtd
	and i50entry-sales-credit = NO
	and i50entry-return-authorisation = NO
	and i50entry-transfer-between-whse = NO
	and i50entry-forward-transfer = NO
	and screenmode() <> search
	and ws-order-flag != CUSTOMER
	and sol-line-type not in { 'SC' 'ST' }
	and (ws-ok-to-post-cost and ws-ok-to-post-income)
		message-box 'Less than minimum gross profit for this item group.'
			title "Minimum Gross Profit"
			message-buttons MSG_BOX_OK
			icon is MSG_BOX_WARNING
			tag 10
	else
		if ws-mode-type in { 'C', 'D', 'E'}
		and ws-minimum-gp != 0 and i50entry-gp < ws-minimum-gp
		and i50entry-sales-credit = NO
		and i50entry-return-authorisation = NO
		and i50entry-transfer-between-whse = NO
		and i50entry-forward-transfer = NO
		and screenmode() <> search
		and ws-order-flag != CUSTOMER
		and sol-line-type not in { 'SC' 'ST' }
		and (ws-ok-to-post-cost and ws-ok-to-post-income)
			message-box 'Less than minimum gross profit.'
				title "Minimum Gross Profit"
				message-buttons MSG_BOX_OK
				icon is MSG_BOX_WARNING
				tag 20
		endif
	endif
endprocedure //check-and-warn-min-gp ----------------------------------------

procedure determine-line-tax-display
	returning
		lr-grid-order-title				pic x(20) type string
		lr-grid-ship-title				pic x(20) type string
		lr-line-total-title				pic x(20) type string
		lr-show-ex-tax					type boolean
	//
	if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_LINE
		set lr-grid-order-title	= 'Order Total'
		set lr-grid-ship-title  = 'Ship Total'
		set lr-line-total-title = 'Total'
		set lr-show-ex-tax = TRUE
	else
		if so-order-status =  I5SO_UPDATED
			set lr-grid-order-title	= 'Order Inc Tax Total'
			set lr-grid-ship-title  = 'Ship Inc Tax Total'
			set lr-line-total-title = 'Inc Tax Total'
			set lr-show-ex-tax = TRUE
		else
			if so-tax-calc-level = BMSDEF_SO_TAX_CALC_LEVEL_ORDER
			and so-price-code in I5SOSTATII_RETAIL_ONLY
				set lr-grid-order-title	= 'Order Inc Tax Total'
				set lr-grid-ship-title  = 'Ship Inc Tax Total'
				set lr-line-total-title = 'Inc Tax Total'
				set lr-show-ex-tax = FALSE
			else
				set lr-grid-order-title	= 'Order Ex Tax Total'
				set lr-grid-ship-title  = 'Ship Ex Tax Total'
				set lr-line-total-title = 'Ex Tax Total'
				set lr-show-ex-tax = TRUE
			endif
		endif
	endif
endprocedure //determine-line-tax-display ------------------------------------

procedure public-check-base-uom-conversion export
///////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
// This procedure allows control over whether to prevent entry of
// an ordered quantity where the quantity is in an alternate unit of measure
// and the the quantity and alternate unit of measure does not convert
// exactly to the base unit of measure.
// There may be a requirement to prevent this because it can cause issues
// downstream when picking the item (so/m5delfifo) because picking is done
// in the base unit of measure.
// To reflect pre-existing functionality, the default is set to FALSE
// i.e. permit entry.
//
// This public procedure exists in two programs:
// - so/m50lines
// - so/m50quote
// and is referenced in the following include which is shared by
// both these programs
// - so/i50lines
//
//<P1> The current entire sales order line record i.e. sales-order-line.*
//<P2> Stock Code
//
//<R1> Flag indicating whether to prevent entry TRUE/FALSE default FALSE
//
///////////////////////////////////////////////////////////////////////////////
parameter
		lp-sol.*						like sales-order-line.*
		lp-stock-code					like stock-code
returning
		lr-check-base-uom-conversion	type boolean
	//
	set lr-check-base-uom-conversion = FALSE
	//
endprocedure //public-check-base-uom-conversion -------------------------------

screen assign-cbs-sequence
	parameter
		lp-order-no						like so-order-no
		lp-bo-suffix					like so-bo-suffix
		lp-line-seq						like sol-line-seq
	local field
		lf-job-code						like job-code
		lf-cost-centre					like job-cost-centre
		lf-ok							type boolean
		lf-error-message				pic x(20)
		//
		lf-jcb-type						like jcb-type
		lf-selected-section-code		like jcbac-section-code
		lf-selected-section-key			like jcbac-section-key
		lf-selected-variation-no		like jcbac-variation-no
		lf-selected-version-no			like jcbac-version-no
		//
		lf-job-seq						like job-seq-no
		lf-prev-section-code			like jcbac-section-code
		lf-prev-section-key				like jcbac-section-key
		lf-prev-variation-no			like jcbac-variation-no
		lf-prev-version-no				like jcbac-version-no
		//
		lf-jcbac-section-key			like jcbac-section-key
		lf-jcbac-variation-no			like jcbac-variation-no
		lf-jcbac-version-no				like jcb-version-no
		//
		lf-message						pic x(300) type string
		lf-found						type boolean
		lf-document-no					like job-document-no
	//
	window @1,1 to @5,37
		title "Assign CBS Sequence"
	//
	allow search correct
	datagrid occurs 4
	//
	primary sales-order-gl-coding
	when so-order-no = :lp-order-no
	and so-bo-suffix = :lp-bo-suffix
	and sol-line-seq = :lp-line-seq
	and I6POSTATII_GL_ACCT_FOR_JOB_CAT(so-gl-accountcode)
	//
	allow correct
before
detail
	if not I6POSTATII_GL_ACCT_FOR_JOB_CAT(so-gl-accountcode)
		continue
	endif
	if screenmode = correct
		I8VALIDGL_VALIDATE_GL_POST(so-gl-accountcode,YES,lf-job-code,
			lf-cost-centre,lf-error-message,lf-ok)
		//
		if lf-ok = FALSE
			continue
		endif
		if so-gl-cbs-section-code != SPACES
			set lf-document-no = rightjustify(str(lp-order-no),sizeof(job-document-no))
			set lf-prev-section-key = SPACES
			set lf-prev-variation-no = SPACES
			set lf-prev-version-no = SPACES
			select * from job-cost-budget-detail
				where job-document-type = I3DOCTYPE_SALESORDER
				and job-document-no = :lf-document-no
				and job-document-seq = :lp-line-seq
				and job-code = :lf-job-code
				and job-cost-centre = :lf-cost-centre
				and jcbd-rec-type = IJGENERAL_JCBD_TYPE_BUDGET
			detail
				get job-cost-budget-attached-cbs
					on index job-code jcbd-rec-type job-cost-centre job-seq-no
					key lf-job-code jcbd-rec-type lf-cost-centre job-seq-no
				on error ENOREC
				else
					if jcbac-section-code = so-gl-cbs-section-code
						set lf-prev-section-key = jcbac-section-key
						set lf-prev-variation-no = jcbac-variation-no
						set lf-prev-version-no = jcbac-version-no
						set lf-job-seq = job-seq-no
						break
					endif
				endon
			endselect
		endif
	endif
	display so-gl-accountcode @2,20
	accept so-gl-cbs-section-code @ 2,22 pic x(10)
		help 'Enter CBS sequence'
		default so-gl-cbs-section-code
		show-value
		when lf-ok  //relates to job
	before-accept
		set lf-prev-section-code = so-gl-cbs-section-code
	end-before-accept
	on help-key
		spl "job/jcbsmaint"
			leave-files-open
			parameters
				"-cbs-consolidated-by-cost-cat"
				IJOBSTATII_CBS_JOB
				lf-job-code
				lf-cost-centre	//this particular cost category
			returning
				lf-jcb-type
				lf-job-code
				lf-selected-variation-no
				lf-selected-version-no
				lf-selected-section-key
				lf-selected-section-code
		//
		if lf-selected-section-code = SPACES
			//nothing selected
			//don't overwrite what we had before
		else
			set lf-jcbac-variation-no = lf-selected-variation-no
			set lf-jcbac-version-no = lf-selected-version-no
			set so-gl-cbs-section-code = lf-selected-section-code
		endif
		reenter optional
	endon
	validation
		if lf-prev-section-code != so-gl-cbs-section-code
			if so-gl-cbs-section-code = SPACES
				message-box 'Previous CBS Sequence cannot be changed to blank.'
					title is 'Cost Breakdown Structure Sequence'
					message-buttons MSG_BOX_OK
					icon MSG_BOX_STOP
					default is MSG_BOX_OK
				set so-gl-cbs-section-code = lf-prev-section-code
				reenter
			else
				do clibcbs-validate-section-code
					parameter
						so-gl-cbs-section-code
					returning
						lf-message
						so-gl-cbs-section-code
						lf-jcbac-section-key
				//
				if lf-message = SPACES
					//must exist for this job and cost category
					set lf-found = ZERO
					select *
					from job-cost-breakdown
						when jcb-type = IJOBSTATII_CBS_JOB
						and jcb-job-code = :lf-job-code
						and jcb-cost-category = :lf-cost-centre
						and jcb-section-key = :lf-jcbac-section-key
					detail
						set lf-found = TRUE
						set lf-selected-variation-no = jcb-variation-no
						set lf-selected-version-no = jcb-version-no
						break
					endselect
					if lf-found = FALSE
						set lf-message = param-text("CBS Sequence <<P1>> does not exist for project <<P2>> or is not for cost category <<P3>>.<<BR>>Use help to display all valid CBS sequences.",so-gl-cbs-section-code,lf-job-code,lf-cost-centre)
					else
						set lf-jcbac-variation-no = lf-selected-variation-no
						set lf-jcbac-version-no = lf-selected-version-no
					endif
				endif
				if lf-message <> SPACES
					message-box lf-message
						title "Invalid Sequence"
						message-buttons MSG_BOX_OK
						default MSG_BOX_OK
						icon MSG_BOX_STOP
						tag 305
					reenter so-gl-cbs-section-code
				endif
			endif
		endif
	endvalidation
confirm auto
confirmed
	if screenmode() = correct
	and so-gl-cbs-section-code != lf-prev-section-code
		if lf-job-seq != ZERO
			//Need to update the attached cbs and the totals if exist
			get job-cost-budget-attached-cbs lock
				on index job-code jcbd-rec-type job-cost-centre job-seq-no
				key lf-job-code IJOBSTATII_CBS_JOB lf-cost-centre lf-job-seq
			on error ENOREC
				set jcbac-section-code = so-gl-cbs-section-code
				set jcbac-section-key = lf-jcbac-section-key
				set jcbac-variation-no = lf-jcbac-variation-no
				set jcbac-version-no = lf-jcbac-version-no
				insert job-cost-budget-attached-cbs
				//
				do clibcbs-update-cbs-from-linked-budget-items
					parameters
						IJOBSTATII_CBS_JOB
						job-code
						jcbac-section-key
						jcbac-version-no
						jcbac-variation-no
						job-cost-centre
						IJGENERAL_JCBD_TYPE_BUDGET
			else
				set jcbac-section-code = so-gl-cbs-section-code
				set jcbac-section-key = lf-jcbac-section-key
				set jcbac-variation-no = lf-jcbac-variation-no
				set jcbac-version-no = lf-jcbac-version-no
				update job-cost-budget-attached-cbs
				//
				do clibcbs-update-cbs-from-linked-budget-items
					parameters
						IJOBSTATII_CBS_JOB
						job-code
						jcbac-section-key
						jcbac-version-no
						jcbac-variation-no
						job-cost-centre
						IJGENERAL_JCBD_TYPE_BUDGET
				//
				get job-cost-breakdown
					on index jcb-type jcb-job-code jcb-variation-no
						jcb-version-no jcb-section-key
					key IJOBSTATII_CBS_JOB job-code lf-prev-variation-no
						lf-prev-version-no lf-prev-section-key
				on error ENOREC
					// do nothing, CBS does not exist
				else
					do clibcbs-update-cbs-from-linked-budget-items
						parameters
							IJOBSTATII_CBS_JOB
							job-code
							jcb-section-key
							jcb-version-no
							jcb-variation-no
							job-cost-centre
							IJGENERAL_JCBD_TYPE_BUDGET
				endon
			endon
		endif
	endif
endconfirm
endscreen //assign-cbs-sequence -------------------------------------------

screen bulk-assign-cbs-sequence
	parameter
		lp-order-no						like so-order-no
		lp-bo-suffix					like so-bo-suffix
	local field
		lf-job-code						like job-code
		lf-cost-centre					like job-cost-centre
		lf-cbs-job-code					like job-code
		lf-cbs-cost-centre				like job-cost-centre
		lf-cbs-section-code				like jcbac-section-code
		//
		lf-ok							type boolean
		lf-error-message				pic x(20)
		//
		lf-jcb-type						like jcb-type
		lf-selected-section-code		like jcbac-section-code
		lf-selected-section-key			like jcbac-section-key
		lf-selected-variation-no		like jcbac-variation-no
		lf-selected-version-no			like jcbac-version-no
		//
		lf-job-seq						like job-seq-no
		lf-prev-section-key				like jcbac-section-key
		lf-prev-variation-no			like jcbac-variation-no
		lf-prev-version-no				like jcbac-version-no
		//
		lf-jcbac-variation-no			like jcbac-variation-no
		lf-jcbac-version-no				like jcb-version-no
		lf-jcbac-section-key			like jcbac-section-key
		//
		lf-message						pic x(300) type string
		lf-found						type boolean
		lf-document-no					like job-document-no
		lf-cbs-exist					type boolean
	//
	window @3,1 to @9,34
		title "Bulk Assign CBS Sequence"
	//
	allow correct
	//
before
	box @3,1 to @8,34
		title SPACES
	set lf-cbs-job-code = job-code
	set lf-cbs-cost-centre = job-cost-category
	set lf-jcbac-variation-no = SPACES
	set lf-jcbac-version-no	= SPACES
detail
	accept lf-cbs-job-code @4,12
		help 'Enter Job Code to update CBS Sequence'
		default lf-cbs-job-code
		title 'Job No:'
	on help-key
		do m5enqjob-enquire-on-jobs
	 	set lf-cbs-job-code = job-code
		reenter optional
	endon
	validation
		get job-cost-master
			on index job-code
			key is lf-cbs-job-code
		on error
			message "Project not valid "
			reenter
		endon
	endvalidation
	accept lf-cbs-cost-centre @5,12
		title 'Category:'
		help 'Enter cost category'
		default lf-cbs-cost-centre
		uppercase
		show-value
	on help-key
		I8PARAM_ENQ_JOB_CATS_CBS(lf-cbs-job-code,lf-cbs-cost-centre, lf-cbs-section-code)
		reenter optional
	endon
	validation
		do clibjob-check-if-any-cbs-for-job
			parameter lf-cbs-job-code lf-cbs-cost-centre
			returning lf-cbs-exist
		if lf-cbs-exist = FALSE
			message 'CBS Structure does not exist for this combination'
			reenter
		endif
	endvalidation
	accept lf-cbs-section-code @6,12 pic x(8)
		help 'Enter project cbs sequence'
		default lf-cbs-section-code
		title 'CBS:'
		no-warning
		when lf-cbs-job-code != SPACES
		and lf-cbs-cost-centre != SPACES
		and lf-cbs-exist
		show-value
	on help-key
		spl "job/jcbsmaint"
			parameters
				"-cbs-consolidated-by-cost-cat"
				IJOBSTATII_CBS_JOB
				lf-cbs-job-code
				lf-cbs-cost-centre
			returning
				lf-jcb-type
				lf-job-code
				lf-selected-variation-no
				lf-selected-version-no
				lf-selected-section-key
				lf-selected-section-code
		//
		if lf-selected-section-code = SPACES
			//nothing selected
			//don't overwrite what we had before
		else
			set lf-cbs-section-code = lf-selected-section-code
			set lf-jcbac-variation-no = lf-selected-variation-no
			set lf-jcbac-version-no	= lf-selected-version-no
			set lf-jcbac-section-key = lf-selected-section-key
		endif
		reenter optional
	endon
	validation
		do clibcbs-validate-section-code
			parameter
				lf-cbs-section-code
			returning
				lf-message
				lf-cbs-section-code
				lf-jcbac-section-key
		//
		if lf-message = SPACES
			//must exist for this job and cost category
			set lf-found = ZERO
			select *
			from job-cost-breakdown
				when jcb-type = IJOBSTATII_CBS_JOB
				and jcb-job-code = :lf-cbs-job-code
				and jcb-cost-category = :lf-cbs-cost-centre
				and jcb-section-key = :lf-jcbac-section-key
			detail
				set lf-found = TRUE
				break
			endselect
			if lf-found = FALSE
				set lf-message = param-text("CBS Sequence <<P1>> does not exist for project <<P2>> or is not for cost category <<P3>>.<<BR>>Use help to display all valid CBS sequences.",lf-cbs-section-code,lf-cbs-job-code,lf-cbs-cost-centre)
			endif
		endif
		if lf-message <> SPACES
			message-box lf-message
				title "Invalid Sequence"
				message-buttons MSG_BOX_OK
				default MSG_BOX_OK
				icon MSG_BOX_STOP
				tag 305
			reenter
		endif
	endvalidation
confirm auto
confirmed
	select *
		from sales-order-gl-coding
		when so-order-no = :lp-order-no
		and so-bo-suffix = :lp-bo-suffix
		and so-gl-cbs-section-code != lf-cbs-section-code
		for-update
	detail
		I8VALIDGL_VALIDATE_GL_POST(so-gl-accountcode,YES,lf-job-code,
			lf-cost-centre,lf-error-message,lf-ok)
		if lf-ok
		and lf-job-code = lf-cbs-job-code
		and lf-cost-centre = lf-cbs-cost-centre
			if so-gl-cbs-section-code != SPACES
				//changing from an already entered sequence
				//
				set lf-document-no = rightjustify(str(lp-order-no),sizeof(job-document-no))
				set lf-prev-section-key = SPACES
				set lf-prev-variation-no = SPACES
				set lf-prev-version-no = SPACES
				set lf-job-seq = ZERO
				select * from job-cost-budget-detail
					where job-document-type = I3DOCTYPE_SALESORDER
					and job-document-no = :lf-document-no
					and job-document-seq = :sol-line-seq
					and job-code = :lf-cbs-job-code
					and job-cost-centre = :lf-cbs-cost-centre
					and jcbd-rec-type = IJGENERAL_JCBD_TYPE_BUDGET
				detail
					get job-cost-budget-attached-cbs
						on index job-code jcbd-rec-type job-cost-centre job-seq-no
						key lf-cbs-job-code jcbd-rec-type lf-cbs-cost-centre job-seq-no
					on error ENOREC
					else
						if jcbac-section-code = so-gl-cbs-section-code
							set lf-prev-section-key = jcbac-section-key
							set lf-prev-variation-no = jcbac-variation-no
							set lf-prev-version-no = jcbac-version-no
							set lf-job-seq = job-seq-no
							break
						endif
					endon
				endselect
				if lf-job-seq != ZERO
					//Need to update the attached cbs and the totals if exist
					get job-cost-budget-attached-cbs lock
						on index job-code jcbd-rec-type job-cost-centre job-seq-no
						key lf-cbs-job-code IJOBSTATII_CBS_JOB lf-cbs-cost-centre lf-job-seq
					on error ENOREC
						set jcbac-section-code = lf-cbs-section-code
						set jcbac-section-key = lf-jcbac-section-key
						set jcbac-variation-no = lf-jcbac-variation-no
						set jcbac-version-no = lf-jcbac-version-no
						insert job-cost-budget-attached-cbs
						//
						do clibcbs-update-cbs-from-linked-budget-items
							parameters
								IJOBSTATII_CBS_JOB
								job-code
								jcbac-section-key
								jcbac-version-no
								jcbac-variation-no
								job-cost-centre
								IJGENERAL_JCBD_TYPE_BUDGET
					else
						set jcbac-section-code = lf-cbs-section-code
						set jcbac-section-key = lf-jcbac-section-key
						update job-cost-budget-attached-cbs
						//
						do clibcbs-update-cbs-from-linked-budget-items
							parameters
								IJOBSTATII_CBS_JOB
								job-code
								jcbac-section-key
								jcbac-version-no
								jcbac-variation-no
								job-cost-centre
								IJGENERAL_JCBD_TYPE_BUDGET
						//
						get job-cost-breakdown
							on index jcb-type jcb-job-code jcb-variation-no
								jcb-version-no jcb-section-key
							key IJOBSTATII_CBS_JOB job-code lf-prev-variation-no
								lf-prev-version-no lf-prev-section-key
						on error ENOREC
							// do nothing, CBS does not exist
						else
							do clibcbs-update-cbs-from-linked-budget-items
								parameters
									IJOBSTATII_CBS_JOB
									job-code
									jcb-section-key
									jcb-version-no
									jcb-variation-no
									job-cost-centre
									IJGENERAL_JCBD_TYPE_BUDGET
						endon
					endon
				endif
			endif
			set so-gl-cbs-section-code = lf-cbs-section-code
			update sales-order-gl-coding
			//
		endif
	endselect
	//
endconfirm
endscreen //bulk-assign-cbs-sequence --------------------------------------

procedure check-for-promo-alerts
	returning
		lr-exit								type boolean
	local field
		lf-alert-message					like pas-alert-message
	//
	set lr-exit = FALSE
	//rerun the promo engine, because if you have restarted a suspended
	//order, the promo temp files are not available for checking
	do tlibpromo-set-force-rerun
		parameter
			TRUE
	//
	do tlibpromo-reset-and-preload
		parameter
			sales-order.*
			sales-order.*
			TRIGGER_AFTER_INSERT
	//
	//now check the temp files
	do tlibpromo-check-for-promo-alerts
		returning
			lf-alert-message
	if lf-alert-message = SPACES
		//update totals as something has changed but no alert message to display
		set ws-so-order-total-shipped-amount = so-order-total-shipped-amount
		set ws-so-order-total-charges = so-order-total-charges
		set ws-so-order-packages = so-order-packages
		set ws-last-promo-so-order-no = so-order-no
		set ws-last-promo-alert-message = lf-alert-message
		set ws-last-so-date-stamp = so-date-stamp
		set ws-last-so-time-stamp = so-time-stamp
	else
		if ws-so-order-total-shipped-amount = so-order-total-shipped-amount
		and ws-so-order-total-charges = so-order-total-charges
		and ws-so-order-packages = so-order-packages
		and ws-last-promo-so-order-no = so-order-no
		and ws-last-promo-alert-message = lf-alert-message
		and ws-last-so-date-stamp = so-date-stamp
		and ws-last-so-time-stamp = so-time-stamp
			// do nothing as all main sales order details are the same and the alert message is also unchanged
		else
			//update totals as something has changed and display alert message
			set ws-so-order-total-shipped-amount = so-order-total-shipped-amount
			set ws-so-order-total-charges = so-order-total-charges
			set ws-so-order-packages = so-order-packages
			set ws-last-promo-so-order-no = so-order-no
			set ws-last-promo-alert-message = lf-alert-message
			set ws-last-so-date-stamp = so-date-stamp
			set ws-last-so-time-stamp = so-time-stamp
			//
			do display-promo-alert
				parameters
					lf-alert-message
				returning
					lr-exit
		endif
	endif
endprocedure //check-for-promo-alerts ----------------------------------------

procedure display-promo-alert
	parameters
		lp-alert-message				like pas-alert-message
	returning
		lr-exit							type boolean
	//
	set lr-exit = FALSE
	//
	if lp-alert-message <> SPACES
		message-box param-text("<<P1>><<BR>><<BR>>Press YES to finalise order without alteration.<<BR>>Press NO so you can change your order to qualify.",strconcat(lp-alert-message))
				title "Promotion Alert"
				message-buttons MSG_BOX_YES_NO
				default MSG_BOX_YES
				icon MSG_BOX_INFORMATION
				tag 10
			//
			if message-status() = MSG_BOX_NO
				set lr-exit = TRUE
			endif
		//
	endif
endprocedure // display-promo-alert -------------------------------------------

procedure m50lines-drill-into-atp-calc
	local fields
		lf-whse-code					like so-whse-code
		lf-error-msg					type string pic x(BMSDEF_PATHSIZE)
	//
	if ((stock-code = SPACES) or
		((so-whse-code = SPACES) and (sol-whse-code = SPACES)) or
		((uppercase(sol-line-type) != "SN") and (uppercase(sol-line-type) != "WN")))
		// Stock code is blank and/or warehouse code is blank and/or
		// current line is not a normal sales order line.
		// Note 1: SN = Normal sales item.
		// Note 2: WN = Item shipped from a different warehouse.
		exit
	endif
	//
	if (sol-whse-code != SPACES)
		set lf-whse-code = sol-whse-code // Other warehouse has been applied to current line item.
	else
		set lf-whse-code = so-whse-code // Sales order warehouse has been applied to current line item.
	endif
	//
	set lf-error-msg = SPACES
	spl "stk/m4stkatp"
		parameters
			"-atp-rec-so"
			stock-code
			lf-whse-code
			login-id()
			SPACES // Maintenance mode.
			so-order-no
			so-bo-suffix
			sol-line-seq
		returning
			lf-error-msg
	//
	if (lf-error-msg != SPACES)
		messagebox lf-error-msg
			title "Error"
			messagebuttons MSG_BOX_OK
			default MSG_BOX_OK
			icon MSG_BOX_STOP
	endif
endprocedure // m50lines-drill-into-atp-calc ----------------------------------

procedure lock-promo-for-other-whse
	parameter
		lp-so-order-no					like so-order-no
		lp-so-bo-suffix					like so-bo-suffix
	local field
		lf-no-lines-from-other-whse		type numeric
	//
	// If a line is to be supplied directly from another warehouse, we need to
	// lock the promotions, otherwise they will not be applied to suffixed
	// orders when the order is split later in so/m50ordent.
	if sys-supply-from-other-whse = 'S'
		select lf-no-lines-from-other-whse = count()
			from sales-order-line
			when sol-line-type = 'WN'
			and so-order-no = :lp-so-order-no
			and so-bo-suffix = :lp-so-bo-suffix
		detail
		endselect
		if lf-no-lines-from-other-whse > ZERO
			get sales-order lock
				on index so-order-no so-bo-suffix
				key is lp-so-order-no lp-so-bo-suffix
			on error ENOREC ELOCKED
			else
				set so-promo-lock = 'L'
				update sales-order
			endon
		endif
	endif
endprocedure // lock-promo-for-other-whse -------------------------------------

procedure public-freight-pre-check export
///////////////////////////////////////////////////////////////////////////////
//<CLIB_DOC>
//This procedure allows to disable the message box for confirming if they
//really want freight and set the values for ws-freight-question-asked and
//ws-charge-extra-item.
//
//<P1> sales-order-line record
//<P2> Pass in ws-freight-question-ask
//<P3> Pass in ws-charge-extra-item
//
//<R1> Returning ws-freight-question-ask
//<R2> Returning ws-charge-extra-item
//<R3> Return TRUE/FALSE, Default TRUE
//			- TRUE then it will display the message box asking for confirmation
//			- FALSE then it will bepass the message pop up
///////////////////////////////////////////////////////////////////////////////
	parameters
		lp-sol.*							like sales-order-line.*
		lp-freight-question-asked			like ws-freight-question-asked
		lp-charge-extra-item				like ws-charge-extra-item
	returning
		lr-freight-question-asked			like ws-freight-question-asked
		lr-charge-extra-item				like ws-charge-extra-item
		lr-ok-proceed						type boolean
	//
	set lr-freight-question-asked = lp-freight-question-asked
	set lr-charge-extra-item = lp-charge-extra-item
	set lr-ok-proceed = TRUE
endprocedure //public-freight-pre-check --------------------------------------

procedure determine-ageing-titles
	//
	returning
		lr-age-title-1					pic x(5)
		lr-age-title-2					pic x(5)
		lr-age-title-3					pic x(6)
	//
	if sys-dr-allow-ageing-of-credits = "2"
		get system-table
			on index sys-tbl-type sys-tbl-code
			key is 'DK' dr-ageing-code
		on error
			set sys-tbl-alpha-1 = SPACES
		endon
		if sys-tbl-alpha-1 = 'W'
			set lr-age-title-1 = translate " 1Wk:"
			set lr-age-title-2 = translate "2Wks:"
			set lr-age-title-3 = translate "3+Wks:"
		elseif sys-tbl-alpha-1 = 'F'
			set lr-age-title-1 = translate "2Wks:"
			set lr-age-title-2 = translate "4Wks:"
			set lr-age-title-3 = translate "6+Wks:"
		else
			set lr-age-title-1 = translate "  1P:"
			set lr-age-title-2 = translate "  2P:"
			set lr-age-title-3 = translate "  3+P:"
		endif
	else
		switch on dr-clearflag
		case "W"
			set lr-age-title-1 = translate " 1Wk:"
			set lr-age-title-2 = translate "2Wks:"
			set lr-age-title-3 = translate "3+Wks:"
		case "F"
			set lr-age-title-1 = translate "2Wks:"
			set lr-age-title-2 = translate "4Wks:"
			set lr-age-title-3 = translate "6+Wks:"
		else
			set lr-age-title-1 = translate "  30:"
			set lr-age-title-2 = translate "  60:"
			set lr-age-title-3 = translate "  90+:"
		endswitch
	endif
endprocedure //determine-ageing-titles ---------------------------------------

//1.00 start [>
screen i50linec-lot-allocation
	
	local field
		lf-conv-factor		like stk-conversion-factor
		lf-dec-places		pic 9
		lf-ok-to-select		pic 9
		lf-class-code		pic x(3)
		lf-so-to-po-link 	type boolean
		lf-supplier			like cre-accountcode
		lf-note				like prodbn-text
		lf-note-title		pic x(15)
		lf-qty				like whse-qty-on-hand
		lf-use-by-date		like slm-use-by-date
		lf-qty-pic			pic x(10)
		lf-qa-hold			type boolean
		lf-hold				type boolean
		lf-excl-flag		pic x
		lf-expected-qty	pic 999999.99
		lf-record-count     pic 9(6)  // New variable for counting records
	//
	window @1,1 to @23,90
		title is "Available Lots/Batches"
	primary tmp-stock-location
	when sl-qty-due-out = 0
	//	on index stock-code whse-code sl-picking-preference
	//		sl-receipt-date sl-location-code sl-reference-lot
	//	same stock-code whse-code
	//	when sl-location-code <> IWCOMMON_LOST_LOCATION
	datagrid occurs 15
	review-from-start
	allowed search i50linec-find-ref i50linec-md-mark i50linec-md-mark-all i50linec-md-unmark-all
				i50linec-continue i50linec-exit //select-lot search md-maint-picking-loc md-exit-loc

	// Insert debugging code here
// End of debugging code

//	stop-exit-all-key
		// NOTE NO entry mode!!!!
		//mode-find-ref md-in-transit-lots md-remove-all md-piece-tally
before

    //message "Debug: Starting procedure" //dineth
    //set lf-record-count = 0//dineth
   // select * from tmp-stock-location//dineth
    //detail//dineth
       // set lf-record-count += 1//dineth
   // endselect//dineth
    //message concat("Debug: Total records in tmp-stock-location: ", str(lf-record-count))  //dineth

	//message "24531 i50linec-lot-allocation"  //dineth
	set lf-dec-places = 4
	box @1,1 to @6,45
		title SPACES
	display "     Order:" @2,2
	display so-order-no @2,14 foreground data
	display so-bo-suffix @2,23 foreground data
	display "      Line:" @3,2
	display sol-line-seq @3,14 pic zz9.9 foreground data
	display " Item Code:" @4,2
//	display "Qty to Ship:" @3,31
//	display "To Allocate:" @4,31
	//
//	do set-location-whse-code
	//
	display stock-code @4,14 foreground data
	display " Item Desc:" @5,2
	display stk-description @5,14 foreground data
/*	set lf-expected-qty = (sol-shipped-qty * ws-lot-sales-conv-factor
		/ ws-lot-pick-conv-factor)
	display (sol-shipped-qty
		* ws-lot-sales-conv-factor
		/ ws-lot-pick-conv-factor) @3,44
			pic ws-lot-main-qty-pic foreground data
	display ws-lot-pick-unit @3,59 foreground data
	display ws-lot-pick-unit @4,59 foreground data
	display (sol-shipped-qty
		* ws-lot-sales-conv-factor) @3,64
			pic ws-lot-main-qty-pic foreground data */
//	display stk-unit-desc @3,79 foreground data
//	display stk-unit-desc @4,79 foreground data
//	do display-qty-to-allocate
//	display "Base Qty." @2,64
//	display "Unit" @2,59
	//
	//message " 24616 "//dineth

/*	if ws-lot-using-default-uom
		set lf-conv-factor = ws-lot-pick-conv-factor
		set lf-dec-places = ws-lot-pick-dec-places
	else
		set lf-conv-factor = 1
		set lf-dec-places = ws-lot-main-dec-places
	endif */
	switch on lf-dec-places
	case 4
		set lf-qty-pic = "-(4)9.9999"
	case 3
		set lf-qty-pic = "-(5)9.999"
	case 2
		set lf-qty-pic = "-(6)9.99"
	case 1
		set lf-qty-pic = "-(7)9.9"
	else
		set lf-qty-pic = "-(9)9"
	endswitch
	//
	if sys-confirm-for-broken-pack = 'L'
		set lf-note-title = "Note"
	else
		set lf-note-title = "Master Lot"
	endif
detail

	//message "Debug: Starting new record in tmp-stock-location"//dineth
    //message concat("Debug: Reference Lot: ", str-concat(sl-reference-lot))//dineth
    //message concat("Debug: Stock Code: ", str-concat(stock-code))//dineth
    //message concat("Debug: Warehouse Code: ", str-concat(whse-code))//dineth
    //message concat("Debug: Location Code: ", str-concat(sl-location-code))//dineth
    //message concat("Debug: Quantity On Hand: ", str(sl-qty-on-hand))//dineth
    //message concat("Debug: Quantity Due Out: ", str(sl-qty-due-out))//dineth
    //message concat("Debug: Quantity On Hold: ", str(sl-qty-on-hold))//dineth
    //message "Debug: ------------------------"//dineth

	//message " 24643 "//dineth

	set lf-use-by-date = ZERO
//	do i50linec-get-cls-program-values
	get stock-lot-master
		on index stock-code slm-lot-number
		key is stock-code sl-reference-lot
	on error
	else
		set lf-use-by-date = slm-use-by-date
	endon
	accept tmp-mark @7,2
		help 'Enter * to mark'
		title is "Select"
		allowed "*"
	accept sl-reference-lot @7,4
		help 'Enter the location reference'
		uppercase
	accept sl-receipt-date @7,6
		help 'Enter the date of stock receipt'
		default today()
	accept lf-use-by-date @7,8
		help 'Enter the use by date'
		optional
	accept sl-location-code @7,10
		help 'Enter the location code'
		uppercase
		default sl-location-code
	accept sl-picking-preference @7,12
		help 'Enter the location preference'
		uppercase
		default sl-picking-preference
	//	when not ws-using-batch-class
	//	and stk-condition-code not = 'Q'
	display slm-test-classification @7,14 pic x(6)
//	if ws-using-batch-class
		get production-batch-result-header
			on index stock-code stock-batch-reference
			key is stock-code sl-reference-lot
		on error
		//	if i4labcomm-unclassified-code = SPACES
				//Shouldn't be, but just in case
		//		do i4labcomm-get-unclassified-code
		//	endif
		//	set pbrh-classification = i4labcomm-unclassified-code
		endon
		set lf-class-code = pbrh-classification
//	else
		set lf-class-code = SPACES
//	endif
	display lf-class-code @7,16 pic x(6)
		title is "Class"
	//
	//Lot qty display in base unless ws-lot-using-defaul-uom - then in default
	display sl-qty-on-hand @7,18 pic lf-qty-pic
		title is "On Hand"
	display sl-qty-due-out @7,20 pic lf-qty-pic
		title is "Due Out"
	display sl-qty-on-hold  @7,22 pic lf-qty-pic
		title is "On Hold"
	display (sl-qty-on-hand - sl-qty-due-out
		- sl-qty-on-hold) @7,24 pic lf-qty-pic
		title is "Available"
	if sys-confirm-for-broken-pack = 'L'
		set lf-supplier = slm-master-lot-ref
		get production-batch-notes
			on index stock-code stock-batch-reference pbn-type prodbn-seq-no
			key is stock-code sl-reference-lot "N" 1
		on error
			set lf-note = SPACES
		else
			set lf-note = prodbn-text
		endon
	else
		set lf-supplier = SPACES
		set lf-note = slm-master-lot-ref
	endif
	display lf-supplier @7,26
		title is "Supplier"
	display slm-retest-date @7,28
	display lf-note @7,28 pic x(15)
		title is lf-note-title
confirm auto
confirmed
		if screenmode() = i50linec-md-mark
			if tmp-mark = '*'
				set tmp-mark = ' '
				update tmp-stock-location
					on error 112
					else
				//		do	i50linec-delete-cls-program-values
					endon
			elseif tmp-mark = ' '
				set tmp-mark = '*'
				update tmp-stock-location
					on error 112
						//Same as above
					endon
				set tmp-mark = ' '
			endif
			refresh review
			refresh prompt
			refresh data
		elseif screenmode() = i50linec-md-mark-all
			push tmp-stock-location
				extract tmp-stock-location
				detail
					set tmp-mark = '*'
					update tmp-stock-location
					on error 112
						//Same as above
					endon
				endextract
			pop tmp-stock-location
		elseif screenmode() = i50linec-md-unmark-all
			push tmp-stock-location
				extract tmp-stock-location
				detail
					set tmp-mark = ' '
					update tmp-stock-location
					on error 112
						//Same as above
					else
					endon
				endextract
			pop tmp-stock-location
		elseif screenmode() = i50linec-find-ref
			do i50linec-batch-lot
			if i50linec-code-entered
				refresh review
			endif
		elseif screenmode() = i50linec-continue
			do i50linec-average-result
			set str-ordered-qty = str(sol-ordered-qty + i50linec-average-result) //04jul13vgm102698
			set sol-ordered-qty += i50linec-average-result //04jul13vgm102698
			if stock-code = "300000" and i50linec-calculate
				do i50linec-update-qty-to-pick
			endif
			exit
		elseif screenmode() = i50linec-exit
				//1.00 I50LINEC_UNMARK_ON_CANCEL
				save tmp-stock-location
					get tmp-stock-location-copy /*21sep12vgm94444*/
					on error
					else
						extract tmp-stock-location-copy
							where tmp-mark = "*"
						detail
							set tmp-mark = spaces
							set sl-qty-due-out = 0
							update tmp-stock-location-copy
						endextract
						get stock-location
							on index whse-code stock-code sl-location-code sl-reference-lot
							key is whse-code stock-code sl-location-code sl-reference-lot
							on error
						else
							set sl-qty-due-out = 0
							update stock-location
						endon
				endon
				restore tmp-stock-location
				set sol-ordered-qty = 0
				exit
		endif
	after
	/*	do i50linec-average-result
		set str-ordered-qty = str(i50linec-average-result)
		I50LINEC_UPDATE_QTY_TO_PICK //18jan13vgm92099 */
	not-confirmed
		exit
	endconfirm
	after
		back-to-detail
endscreen //i50linec-lot-allocation ------------------------------------------

procedure insert-tmp-stock-location
	set tmp-mark = spaces

	field //dineth
        lf-record-count-before 		pic 999999.99//dineth
        lf-record-count-after 		pic 999999.99//dineth

    set lf-record-count-before = 0//dineth
    set lf-record-count-after = 0//dineth

	//message "Debug: Starting insert-tmp-stock-location procedure"
    //message concat("Debug: Initial stock-code: ", stock-code)
    //message concat("Debug: Initial whse-code: ", whse-code)
    //message concat("Debug: IWCOMMON_LOST_LOCATION value: ", IWCOMMON_LOST_LOCATION)

	extract stock-location
		on index stock-code whse-code sl-picking-preference
			sl-receipt-date sl-location-code sl-reference-lot
		key is stock-code whse-code spaces 0 spaces spaces
		next same stock-code whse-code
		when sl-location-code <> IWCOMMON_LOST_LOCATION
		and sl-qty-due-out = 0
	detail


		//message "Debug: Processing a stock-location record"
        //message concat("Debug: stock-code: ", stock-code)
        //message concat("Debug: whse-code: ", whse-code)
        //message concat("Debug: sl-picking-preference: ", sl-picking-preference)
        //message concat("Debug: sl-receipt-date: ", str(sl-receipt-date))
       // message concat("Debug: sl-location-code: ", sl-location-code)
        //message concat("Debug: sl-reference-lot: ", sl-reference-lot)
        //message concat("Debug: sl-qty-due-out: ", str(sl-qty-due-out))
       // message concat("Debug: sl-qty-on-hand: ", str(sl-qty-on-hand))

		//start ------------------////12sep12vgm94444
		get stock-lot-master
			on index stock-code slm-lot-number
			key is stock-code 
		on error
			 message "Debug: No corresponding stock-lot-master record found"
		else
			//message "Debug: stock-lot-master record found"
            //message concat("Debug: slm-test-classification: ", slm-test-classification)
           // message concat("Debug: slm-lot-number: ", slm-lot-number)
            //message concat("Debug: slm-use-by-date: ", str(slm-use-by-date))

			

			if slm-test-classification != "P"
				//message "Debug: Skipping this record as slm-test-classification is not 'P'"
				continue
			endif
		endon
		//end ------------------////12sep12vgm94444
		//message "Debug: Attempting to insert into tmp-stock-location" 

		//message "Debug: stock-lot-master record found"
        //message concat("Debug: slm-test-classification: ", slm-test-classification)
        //message concat("Debug: slm-lot-number: ", slm-lot-number)
        //message concat("Debug: slm-use-by-date: ", str(slm-use-by-date))


		 // Count records before insertion
       // select lf-record-count-before = count(*)			//dineth
       // from tmp-stock-location								//dineth
       // end-select											//dineth

       // message concat("Debug: Record count before insertion: ", str(lf-record-count-before))			//dineth

		get tmp-stock-location
			on index stock-code whse-code sl-picking-preference
				sl-receipt-date sl-location-code sl-reference-lot
			key is stock-code whse-code sl-picking-preference
				sl-receipt-date sl-location-code sl-reference-lot
		on error
			//message "Debug: Inserting new record into tmp-stock-location"
			insert tmp-stock-location
		else
		//
		endon
	endextract

	// Count records after all insertions
   // select lf-record-count-after = count(*) 				//dineth
    //from tmp-stock-location									//dineth
    //end-select												//dineth

   // message concat("Debug: Final record count in tmp-stock-location: ", str(lf-record-count-after))			//dineth
    //message concat("Debug: Records added: ", str(lf-record-count-after - lf-record-count-before))			//dineth

endprocedure // insert-tmp-stock-location-------------------------------------

procedure i50linec-batch-lot
	window @21,37 to @23,80
		title is "Select Lot Reference"
	display "Lot Reference :" @22,39 background
	set i50linec-code-entered = FALSE
	accept i50linec-reference @22,55
		help "Enter lot reference to search for"
		uppercase
	confirm auto
	confirmed
		extract tmp-stock-location
			on index whse-code stock-code sl-reference-lot sl-location-code
			key whse-code stock-code i50linec-reference SPACES
			next same stock-code whse-code sl-reference-lot
		detail
			break // stop on first
		endextract
		if sl-reference-lot <> i50linec-reference
			message "Tmp reference not valid " tmp-reference
		else
			set i50linec-code-entered = TRUE
		endif
	endconfirm
endprocedure //i50linec-batch-lot --------------------------------------------

procedure i50linec-average-result
	set i50linec-average-result = 0
	set i50linec-average-reo = 0
	set i50linec-average-dmt = 0
	set i50linec-reo-dmt-sum = 0
	save tmp-stock-location
	extract tmp-stock-location
		where tmp-mark = "*"
		and sl-qty-due-out = 0
	detail
	set i50linec-average-result += sl-qty-on-hand //09Nov2012vgm94444
	/*
		get production-batch-results
			on index stock-code stock-batch-reference stock-batch-property-code
			key is stock-code  sl-reference-lot "DMT"
		on error
		else
			set i50linec-average-result += stock-batch-average-result
			set i50linec-average-dmt = stock-batch-average-result
		//	do i50linec-insert-cls-program-values
		endon
		set sol-ordered-qty = i50linec-average-result
		get production-batch-results
			on index stock-code stock-batch-reference stock-batch-property-code
			key is stock-code  sl-reference-lot "REO"
		on error
		else
			set i50linec-average-reo = stock-batch-average-result
		endon
		set i50linec-reo-dmt-sum +=  i50linec-average-dmt *  (i50linec-average-reo / 100) //03Dec12vgm98773*/
	endextract
	restore tmp-stock-location
endprocedure // i50linec-average-result---------------------------------------

procedure  i50linec-get-stock-price
	get stock-price
		on index stock-code prc-region-code
		key is stock-code sys-default-region
	on error
	else
		set i50linec-stock-price = prc-wholesale-price
	endon
endprocedure // i50linec-stock-price------------------------------------------

procedure i50linec-update-qty-to-pick
	local lf-found type boolean
			lf-reference-lot like sl-reference-lot
			lf-location-code			like sl-location-code
	save sales-order-line
	save tmp-stock-location
	get tmp-stock-location //08oct2012vgm94444
	on error
		exit
	endon
	extract tmp-stock-location
		where tmp-mark = "*"
	detail
		set lf-found = false
		set lf-reference-lot = sl-reference-lot //12jun13vgm102828
		set lf-location-code = sl-location-code  //12jun13vgm102828
		//start--------------------------------------18Jan13vgm98773
	/*	get production-batch-results
			on index stock-code stock-batch-reference stock-batch-property-code
			key is stock-code  sl-reference-lot "DMT"
		on error
			set i50linec-average-dmt = 0
		else
			set i50linec-average-dmt = stock-batch-average-result
		endon*/
		set i50linec-average-result = sl-qty-on-hand
	//end--------------------------------------18Jan13vgm98773
		extract sales-order-picking-location
			on index so-order-no so-bo-suffix sol-line-seq
			key is so-order-no so-bo-suffix 0
			next same so-order-no so-bo-suffix
		detail
			if sol-pick-reference = sl-reference-lot
			and i50linec-average-dmt > 0
				set sol-qty-to-pick = sl-qty-on-hand//i50linec-average-dmt
				set sol-picked-qty = sl-qty-on-hand //i50linec-average-dmt
				update sales-order-picking-location
				set lf-found = true
			endif
		endextract
		if not lf-found
		and i50linec-average-result > 0
		//	set sol-line-seq = 1
			set sol-qty-to-pick = i50linec-average-result
			set sol-pick-reference = sl-reference-lot
			get stock-lot-master
				on index stock-code slm-lot-number
				key is stock-code sl-reference-lot
			on error
			else
				set slm-test-classification = "P" //12sep12vgm94444
				update stock-lot-master
			endon
			set sol-pick-reference = sl-reference-lot
			set sl-location-code = lf-location-code //12jun13vgm102828
			set sol-pick-fifo-date = sl-receipt-date
			set sol-pick-batch-use-by-date = slm-use-by-date
			set sol-pick-master-lot-ref = slm-master-lot-ref
			set sol-pick-lot-status = slm-test-classification
			set sol-pick-lot-retest-date = slm-retest-date
			set sol-pick-factor = slm-factor
			set sol-qty-to-pick = sl-qty-on-hand //i50linec-average-dmt
			set sol-picked-qty = sl-qty-on-hand //i50linec-average-dmt
		//	get sales-order-line
			restore sales-order-line
			insert  sales-order-picking-location
		endif
		get stock-location
			on index whse-code stock-code sl-location-code sl-reference-lot
			key is whse-code stock-code lf-location-code lf-reference-lot //12jun13vgm102828
		on error
			message 'stock location not found' whse-code stock-code lf-location-code lf-reference-lot
		else
			set sl-qty-due-out = i50linec-average-result
			update stock-location lock
			on error
				message 'error updating stock location'
			else

			endon
		endon
		get tmp-stock-location-copy
			on index whse-code stock-code sl-reference-lot sl-location-code
			key is whse-code stock-code  lf-reference-lot sl-location-code
		on error
		else
			set sl-qty-due-out = i50linec-average-result
			update tmp-stock-location-copy
		endon
	//	endif
	endextract
	restore sales-order-line
	restore tmp-stock-location
endprocedure // i50linec-update-qty-to-pick-----------------------------------

procedure i50linec-insert-cls-program-values
	set cpu-usage-code = "SO"
	set cpu-type = so-bo-suffix
	set cpu-code = sl-reference-lot
	set cpu-seq = so-order-no
	get cls-program-usage
	on index cpu-usage-code cpu-type cpu-code cpu-seq
	key is cpu-usage-code cpu-type cpu-code cpu-seq
	on error
		insert cls-program-usage
	endon
endprocedure // i50linec-insert-cls-program-values----------------------------

procedure i50linec-get-cls-program-values
	set cpu-usage-code = "SO"
	set cpu-type = so-bo-suffix
	set cpu-code = sl-reference-lot
	set cpu-seq = so-order-no
	get cls-program-usage
	on index cpu-usage-code cpu-type cpu-code cpu-seq
	key is cpu-usage-code cpu-type cpu-code cpu-seq
	on error
	else
		set tmp-mark = "*"
		update tmp-stock-location
	endon
endprocedure // i50linec-get-cls-program-values-------------------------------

procedure i50linec-delete-cls-program-values
	set cpu-usage-code = "SO"
	set cpu-type = so-bo-suffix
	set cpu-code = sl-reference-lot
	set cpu-seq = so-order-no
	get cls-program-usage
	on index cpu-usage-code cpu-type cpu-code cpu-seq
	key is cpu-usage-code cpu-type cpu-code cpu-seq
	on error
	else
		delete cls-program-usage
	endon
endprocedure // i50linec-delete-cls-program-values----------------------------
//1.00 end <]

//1.01 begin [>
screen container-details
	local
		lr-lot-number		like slm-lot-number
	window @1,1 to @23,47
	title 'Container Details'
	select *
		from sales-order-container-details
		where so-order-no = :so-order-no
		and so-bo-suffix = :so-bo-suffix
		and socd-line-seq = sol-line-seq
		order by socd-wb-docket-no
	allowed search entry correct remove
	datagrid occurs 18
	review-from-current
before
	box @1,2 to @4,47
//		title 'Container Details'
//	display 'Order No.:'				@2,5
//	display so-order-no					@2,15
//	display so-bo-suffix				@2,25
//	display 'Line Seq. No:'				@2,40
//	display socd-line-seq				@2,55
//	display 'Item Code:'				@3,5
//	display stock-code					@3,15
	accept so-order-no					@2,11
		title 'Order No.:'
		default so-order-no
		showvalue
		when 1 = 0
	accept so-bo-suffix					@2,22
		default so-bo-suffix
		showvalue
		when 1 = 0
	accept sol-line-seq				@2,40
		title 'Line Seq. No:'
		default sol-line-seq
		showvalue
		when 1 = 0
	accept stock-code					@3,11
		title 'Item Code:'
		default stock-code
		showvalue
		when 1 = 0
detail
	set socd-line-seq = sol-line-seq
	accept socd-wb-docket-no			@5,2 pic x(12)
		title 'Lot #'
		default socd-wb-docket-no
	on help-key
		do select-lot
			parameters
				stock-code
			returning
				lr-lot-number
		set socd-wb-docket-no = lr-lot-number
		refresh socd-wb-docket-no
	endon
	validations
		if socd-wb-docket-no = SPACES
			message 'Invalid Lot #'
			reenter
		else
			get stock-lot-master
				on index stock-code slm-lot-number
				key is stock-code socd-wb-docket-no
			on error
				message 'Invalid Lot #'
				reenter
			endon
		endif
	endvalidations
	//
	accept socd-container-no			@5,4
		title 'Container'
		default socd-container-no
		uppercase
	//
	accept socd-seal-no					@5,6
		title 'Seal'
		default socd-seal-no
		uppercase
		showvalue
	//
confirm auto
	confirmed
	endconfirm
endscreen //container-details --------------------------------------------------

screen select-lot
	parameters
		lp-stock-code		like stock-code
	returning
		lr-lot-number		like slm-lot-number
	//
	window @10,51 to @23,80
		title is concat("Lots for Item: " lp-stock-code)
	select slm-lot-number
		from stock-lot-master
		where stock-code = lp-stock-code
		group by slm-lot-number
	datagrid occurs 12
	review-from-current
	allowed md-select search
detail
	accept slm-lot-number @10,64 pic x(30)
		title "Lot Number"
		showvalue
	before-accept
		set slm-lot-number = SPACES
	end-before-accept
	confirm auto
	confirmed
		if screenmode() = md-select
			set lr-lot-number = slm-lot-number
			exit
		endif
	endconfirm
endscreen //select-lot ---------------------------------------------------------
//1.01 end <]
//End of m50lines.spl --------------------------------------------------------
